import { allModulesData } from './server/seedModules';

async function checkAndReseed() {
  try {
    console.log(`–ú–æ–¥—É–ª–µ–π –≤ —Ñ–∞–π–ª–µ seedModules: ${allModulesData.length}`);
    
    // –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –º–æ–¥—É–ª–µ–π
    const modulesByNumber: { [key: number]: any[] } = {};
    
    allModulesData.forEach((module, index) => {
      if (!modulesByNumber[module.number]) {
        modulesByNumber[module.number] = [];
      }
      modulesByNumber[module.number].push({
        ...module,
        arrayIndex: index
      });
    });
    
    // –ù–∞–π–¥–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const duplicates: { [key: number]: any[] } = {};
    Object.entries(modulesByNumber).forEach(([number, modules]) => {
      if (modules.length > 1) {
        duplicates[parseInt(number)] = modules;
      }
    });
    
    if (Object.keys(duplicates).length > 0) {
      console.log('\nüîç –ù–ê–ô–î–ï–ù–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´:');
      Object.entries(duplicates).forEach(([number, modules]) => {
        console.log(`\n–ú–æ–¥—É–ª—å ${number} (–Ω–∞–π–¥–µ–Ω–æ ${modules.length} –∫–æ–ø–∏–π):`);
        modules.forEach((module, idx) => {
          console.log(`  ${idx + 1}. –ü–æ–∑–∏—Ü–∏—è ${module.arrayIndex}: "${module.title}"`);
        });
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const numbers = allModulesData.map(m => m.number).sort((a, b) => a - b);
    console.log(`\n–î–∏–∞–ø–∞–∑–æ–Ω –Ω–æ–º–µ—Ä–æ–≤: ${numbers[0]} - ${numbers[numbers.length - 1]}`);
    
    // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞
    const expectedNumbers = Array.from({length: 140}, (_, i) => i + 1);
    const missingNumbers = expectedNumbers.filter(num => !numbers.includes(num));
    if (missingNumbers.length > 0) {
      console.log(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞: ${missingNumbers.join(', ')}`);
    }
    
    console.log(`\n–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤: ${Object.keys(modulesByNumber).length}`);
    console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π: ${allModulesData.length}`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

checkAndReseed();