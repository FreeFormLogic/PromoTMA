import { eq } from 'drizzle-orm';
import { db } from './server/db';
import { modules, industries } from '@shared/schema';
import { allIndustriesData } from './server/seedIndustries';
import { allModulesData } from './server/seedModules';

async function checkAndReseed() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏
    const moduleCount = await db.select().from(modules);
    console.log(`üìä –ú–æ–¥—É–ª–µ–π –≤ –±–∞–∑–µ: ${moduleCount.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
    const industryCount = await db.select().from(industries);
    console.log(`üè≠ –ò–Ω–¥—É—Å—Ç—Ä–∏–π –≤ –±–∞–∑–µ: ${industryCount.length}`);
    
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–ª–∏ –º–∞–ª–æ - –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º
    if (moduleCount.length < 60 || industryCount.length < 25) {
      console.log('üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Ö–≤–∞—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è...');
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
      await db.delete(modules);
      await db.delete(industries);
      console.log('üóëÔ∏è  –¢–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã');
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω–¥—É—Å—Ç—Ä–∏–∏
      for (const industry of allIndustriesData) {
        await db.insert(industries).values(industry);
      }
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allIndustriesData.length} –∏–Ω–¥—É—Å—Ç—Ä–∏–π`);
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–æ–¥—É–ª–∏
      for (const module of allModulesData) {
        await db.insert(modules).values(module);
      }
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allModulesData.length} –º–æ–¥—É–ª–µ–π`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ò–ù–î–û–ù–ï–ó–ò–Ø
      const indonesiaModules = await db.select().from(modules).where(eq(modules.category, '–ò–ù–î–û–ù–ï–ó–ò–Ø'));
      console.log(`üáÆüá© –ú–æ–¥—É–ª–µ–π –ò–ù–î–û–ù–ï–ó–ò–Ø: ${indonesiaModules.length}`);
      
      console.log('üéâ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

checkAndReseed();