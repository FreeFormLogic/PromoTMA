import { db } from "./server/db";
import { modules } from "./shared/schema";
import { allModulesData } from "./server/seedModules";

// –ù–æ–º–µ—Ä–∞ –º–æ–¥—É–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏)
const moduleNumbersToAdd = [176, 177, 178, 179, 181, 182, 183, 184, 186, 191, 192, 196, 199, 204, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217];

async function addUpdatedModules() {
  try {
    console.log("–î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏...");
    
    // –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const modulesToAdd = allModulesData.filter(module => 
      moduleNumbersToAdd.includes(module.number)
    );
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${modulesToAdd.length} –º–æ–¥—É–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
    for (const module of modulesToAdd) {
      await db.insert(modules).values(module);
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–æ–¥—É–ª—å ${module.number}: ${module.name}`);
    }
    
    console.log("\nüéâ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π
    const allModules = await db.select().from(modules);
    console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –≤ –±–∞–∑–µ: ${allModules.length}`);
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª–µ–π:", error);
  } finally {
    process.exit(0);
  }
}

addUpdatedModules();