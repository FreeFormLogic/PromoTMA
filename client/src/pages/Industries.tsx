import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Skeleton } from "@/components/ui/skeleton";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { 
  Search, ArrowRight, Star, Users, Building2, Target, TrendingUp,
  ShoppingCart, Utensils, Smartphone, GraduationCap, Brain,
  Truck, Package, Briefcase, Scissors, Stethoscope,
  Home, Car, Plane, Gamepad2, Music,
  Dumbbell, Camera, Baby, DollarSign, Wrench,
  AlertTriangle, CheckCircle, Component, Store, CreditCard,
  Aperture, Gift, Repeat, Heart, BarChart3, TestTube2, Mail,
  Users2, MousePointerClick, Link, Crown, Award, Calendar, Coins,
  Trophy, Eye, Bot, Globe, Settings, UserPlus, Wifi, Zap,
  Clock, Puzzle, Sword, CheckSquare, FileText, MessageSquare, UserCheck,
  Edit, Video, Headphones, Database, Webhook, Wallet, Shield,
  Bell, CalendarCheck, Paintbrush, Phone, Monitor, Flag
} from "lucide-react";
import { Industry, Module } from "@shared/schema";

// –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –æ—Ç—Ä–∞—Å–ª–µ–π
const industryIconMap: Record<string, any> = {
  "üçï": Utensils,
  "üõçÔ∏è": ShoppingCart,
  "üì±": Smartphone,
  "üéì": GraduationCap,
  "üß†": Brain,
  "üõµ": Car,
  "üöö": Truck,
  "üíº": Briefcase,
  "üíá‚Äç‚ôÄÔ∏è": Scissors,
  "üè•": Stethoscope,
  "üì¶": Package,
  "üè†": Home,
  "‚úàÔ∏è": Plane,
  "üéÆ": Gamepad2,
  "üéµ": Music,
  "üí™": Dumbbell,
  "üì∑": Camera,
  "üë∂": Baby,
  "üí∞": DollarSign,
  "üîß": Wrench,
};

// –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –º–æ–¥—É–ª–µ–π (–∫–∞–∫ –≤ Modules.tsx)
const moduleIconMap: { [key: string]: any } = {
  Store, Camera, ShoppingCart, CreditCard, Package, Truck, Aperture, Gift, 
  Repeat, Users, Star, Heart, BarChart3, TestTube2, TrendingUp, Target, Mail,
  Users2, MousePointerClick, Link, Crown, Award, Calendar, Gamepad2, Coins,
  Trophy, Eye, GraduationCap, Brain, Bot, Globe, Settings, Building2,
  Component, Search, ArrowRight, DollarSign, UserPlus, Wifi, Zap,
  Clock, Puzzle, Sword, CheckSquare, FileText, MessageSquare, UserCheck,
  Edit, Video, Headphones, Briefcase, Database, Webhook, Car, Wallet, Shield,
  Bell, CalendarCheck, Smartphone
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–æ–¥—É–ª–µ–π (–∫–∞–∫ –≤ Modules.tsx)
const moduleCategoryColors: { [key: string]: string } = {
  "E-COMMERCE": "bg-emerald-100 text-emerald-700 dark:bg-emerald-900 dark:text-emerald-300",
  "–ú–ê–†–ö–ï–¢–ò–ù–ì": "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300",
  "–í–û–í–õ–ï–ß–ï–ù–ò–ï": "bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300",
  "–û–ë–†–ê–ó–û–í–ê–ù–ò–ï": "bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300",
  "–§–ò–ù–¢–ï–•": "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300",
  "CRM": "bg-cyan-100 text-cyan-700 dark:bg-cyan-900 dark:text-cyan-300",
  "B2B": "bg-indigo-100 text-indigo-700 dark:bg-indigo-900 dark:text-indigo-300",
  "–ö–û–ù–¢–ï–ù–¢ –ò –ú–ï–î–ò–ê": "bg-pink-100 text-pink-700 dark:bg-pink-900 dark:text-pink-300",
  "–ò–ù–¢–ï–ì–†–ê–¶–ò–ò": "bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300",
  "–ò–ù–î–û–ù–ï–ó–ò–Ø": "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300",
  "–ò–ì–†–´": "bg-violet-100 text-violet-700 dark:bg-violet-900 dark:text-violet-300",
  "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´": "bg-gray-100 text-gray-700 dark:bg-gray-900 dark:text-gray-300"
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π (–∫–∞–∫ –≤ Modules.tsx)
function parseKeyFeatures(keyFeatures: unknown): string[] {
  if (Array.isArray(keyFeatures)) {
    return keyFeatures;
  }
  if (typeof keyFeatures === 'string') {
    try {
      const parsed = JSON.parse(keyFeatures);
      return Array.isArray(parsed) ? parsed : [];
    } catch {
      return [keyFeatures];
    }
  }
  return [];
}

function formatFeatureText(text: string): React.ReactNode {
  const parts = text.split(/(\*\*[^*]+\*\*)/g);
  
  return parts.map((part, index) => {
    if (part.startsWith('**') && part.endsWith('**')) {
      const boldText = part.slice(2, -2);
      return <strong key={index} className="font-semibold text-gray-900 dark:text-gray-100">{boldText}</strong>;
    }
    return <span key={index}>{part}</span>;
  });
}

// –ú–æ–¥—É–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ Modules.tsx)
function ModuleInlineModal({ module, variant }: { module: Module; variant: 'required' | 'recommended' }) {
  const IconComponent = moduleIconMap[module.icon] || Component;
  const keyFeatures = parseKeyFeatures(module.keyFeatures);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  
  const borderColor = variant === 'required' ? 'border-green-200 dark:border-green-800' : 'border-blue-200 dark:border-blue-800';
  const bgColor = variant === 'required' ? 'bg-green-50 dark:bg-green-900/10' : 'bg-blue-50 dark:bg-blue-900/10';
  const hoverBgColor = variant === 'required' ? 'hover:bg-green-100 dark:hover:bg-green-900/20' : 'hover:bg-blue-100 dark:hover:bg-blue-900/20';
  const badgeColor = variant === 'required' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300' : 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';

  return (
    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
      <DialogTrigger asChild>
        <div className={`border ${borderColor} rounded-lg p-4 ${bgColor} cursor-pointer hover:shadow-md ${hoverBgColor} transition-all`}>
          <div className="flex items-start gap-3 mb-2">
            <Badge variant="outline" className={badgeColor}>
              ‚Ññ{module.number}
            </Badge>
            <div className="flex-1">
              <h4 className="font-semibold text-gray-900 dark:text-gray-100 flex items-center gap-2">
                {module.name}
                <ArrowRight className="w-4 h-4 opacity-60" />
              </h4>
            </div>
          </div>
          <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
            {module.description}
          </p>
        </div>
      </DialogTrigger>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ - —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –∏–∑ Modules.tsx */}
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-hidden">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <DialogTitle className="text-xl font-bold text-gray-900 dark:text-gray-100">
              {module.name}
            </DialogTitle>
            <Badge className={`${moduleCategoryColors[module.category] || moduleCategoryColors["–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´"]}`}>
              #{module.number} {module.category}
            </Badge>
          </div>
        </DialogHeader>
        
        <ScrollArea className="max-h-[70vh] pr-4">
          <div className="space-y-6">
            {/* –ò–∫–æ–Ω–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
            <div className="flex items-start gap-4">
              <div className="w-16 h-16 rounded-xl bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0">
                <IconComponent className="w-8 h-8 text-white" />
              </div>
              <div className="flex-1">
                <p className="text-gray-600 dark:text-gray-300 leading-relaxed">
                  {module.description}
                </p>
              </div>
            </div>

            <Separator />

            {/* –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
                –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
              </h3>
              <div className="space-y-3">
                {keyFeatures.map((feature, index) => (
                  <div key={index} className="flex items-start gap-3">
                    <div className="w-2 h-2 rounded-full bg-blue-500 mt-2 flex-shrink-0" />
                    <p className="text-sm text-gray-600 dark:text-gray-300 leading-relaxed">
                      {formatFeatureText(feature)}
                    </p>
                  </div>
                ))}
              </div>
            </div>

            <Separator />

            {/* –ë–∏–∑–Ω–µ—Å-–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-3">
                –ë–∏–∑–Ω–µ—Å-–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
              </h3>
              <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
                <p className="text-green-800 dark:text-green-300 font-medium">
                  {module.benefits}
                </p>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex gap-3 pt-4">
              <Button className="flex-1 bg-blue-600 hover:bg-blue-700 text-white">
                –î–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç
              </Button>
              <Button variant="outline" className="flex-1">
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
              </Button>
            </div>
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤–∞–∂–Ω–æ—Å—Ç–∏
const categoryColors: Record<string, string> = {
  "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û": "bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300 border-blue-200 dark:border-blue-800",
  "–û–ß–ï–ù–¨ –ü–û–õ–ï–ó–ù–û": "bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300 border-purple-200 dark:border-purple-800",
  "–ü–û–õ–ï–ó–ù–û": "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300 border-green-200 dark:border-green-800"
};



const categories = ["–í–°–ï –ù–ò–®–ò", "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û", "–û–ß–ï–ù–¨ –ü–û–õ–ï–ó–ù–û", "–ü–û–õ–ï–ó–ù–û"];

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∂–∏—Ä–Ω—ã–º
function formatText(text: string): React.ReactNode {
  const parts = text.split(/(\*\*[^*]+\*\*)/g);
  
  return parts.map((part, index) => {
    if (part.startsWith('**') && part.endsWith('**')) {
      const boldText = part.slice(2, -2);
      return <strong key={index} className="font-semibold text-gray-900 dark:text-gray-100">{boldText}</strong>;
    }
    return <span key={index}>{part}</span>;
  });
}

// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç—Ä–∞—Å–ª–∏
function IndustryCard({ industry, modules }: { industry: Industry; modules: Module[] }) {
  const IconComponent = industryIconMap[industry.icon] || Building2;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏
  const getIndustryBenefits = (industryName: string) => {
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π
    if (industryName.includes("–†–µ—Å—Ç–æ—Ä–∞–Ω—ã") || industryName.includes("–¥–æ—Å—Ç–∞–≤–∫–∞")) {
      return [
        {
          problem: "–í—ã—Å–æ–∫–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–æ–≤ (25-35%)",
          solution: "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø—Ä–æ–¥–∞–∂ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π",
          impact: "–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–¥—É—Ç –Ω–∞–ø—Ä—è–º—É—é –≤–∞–º, –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤"
        },
        {
          problem: "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö",
          solution: "–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö –∏ –∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö",
          impact: "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤"
        },
        {
          problem: "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º",
          solution: "–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –∫–∞–Ω–∞–ª –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–¥–∞–∂",
          impact: "–ö–ª–∏–µ–Ω—Ç—ã –∑–∞–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é —É –≤–∞—Å, –∞ –Ω–µ –∏—â—É—Ç –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–µ"
        },
        {
          problem: "–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂",
          solution: "–ü—Ä—è–º—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
          impact: "–ö–ª–∏–µ–Ω—Ç—ã –≤–∏–¥—è—Ç –≤–∞—à–∏ –∞–∫—Ü–∏–∏ –≤ Telegram, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞—é—Ç 10+ —Ä–∞–∑ –≤ –¥–µ–Ω—å"
        }
      ];
    }

    if (industryName.includes("e-commerce") || industryName.includes("–º–∞–≥–∞–∑–∏–Ω")) {
      return [
        {
          problem: "–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å CAC (Customer Acquisition Cost)",
          solution: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ Telegram",
          impact: "–ö–ª–∏–µ–Ω—Ç—ã —É–∂–µ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ - –Ω–µ –Ω—É–∂–Ω–æ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ"
        },
        {
          problem: "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤",
          solution: "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–¥–∞–∂",
          impact: "–í—ã —Å–∞–º–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ —Ü–µ–Ω—ã –∏ –ø—Ä–∞–≤–∏–ª–∞, –±–µ–∑ –¥–∏–∫—Ç–∞—Ç–∞ –ø–ª–æ—â–∞–¥–∫–∏"
        },
        {
          problem: "–ù–∏–∑–∫–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞",
          solution: "–ù–∞—Ç–∏–≤–Ω—ã–π –æ–ø—ã—Ç –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
          impact: "–ü–æ–∫—É–ø–∫–∞ –≤ –¥–≤–∞ –∫–ª–∏–∫–∞ –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"
        },
        {
          problem: "–°–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤",
          solution: "–ü—Ä—è–º–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∑–Ω–∞–∫–æ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Telegram",
          impact: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç—É–¥–∞, –≥–¥–µ –∫–ª–∏–µ–Ω—Ç –æ–±—â–∞–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
        }
      ];
    }

    if (industryName.includes("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ") || industryName.includes("–∫—É—Ä—Å—ã")) {
      return [
        {
          problem: "–ù–∏–∑–∫–æ–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤",
          solution: "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è",
          impact: "–£—á–µ–Ω–∏–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —É—Ä–æ–∫–∏ –∫–∞–∫ –∏–≥—Ä—É —Å –±–∞–ª–ª–∞–º–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏"
        },
        {
          problem: "–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è",
          solution: "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è LMS —Å–∏—Å—Ç–µ–º–∞ –≤ Telegram",
          impact: "–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–±—É—á–µ–Ω–∏—è —É–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä"
        },
        {
          problem: "–°–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤–µ–±–∏–Ω–∞—Ä–æ–≤",
          solution: "–ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –∏ –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
          impact: "–°—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ—Ç—Ä—è—Ç –≤–µ–±–∏–Ω–∞—Ä—ã —Ç–∞–º –∂–µ, –≥–¥–µ –ø–æ–ª—É—á–∞—é—Ç –¥–æ–º–∞—à–∫—É"
        }
      ];
    }

    if (industryName.includes("–ú–µ–¥–∏—Ü–∏–Ω–∞") || industryName.includes("–∫–ª–∏–Ω–∏–∫–∞")) {
      return [
        {
          problem: "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã –∏–∑-–∑–∞ –∑–∞–±—ã–≤—á–∏–≤–æ—Å—Ç–∏",
          solution: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∏–∑–∏—Ç–∞—Ö",
          impact: "–ü–∞—Ü–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –ø—Ä–∏–µ–º–∞"
        },
        {
          problem: "–î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É",
          solution: "–û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å –Ω–∞ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è",
          impact: "–í—ã–±–æ—Ä –≤—Ä–∞—á–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ 30 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∑–≤–æ–Ω–∫–æ–≤"
        },
        {
          problem: "–ü–æ—Ç–µ—Ä—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏",
          solution: "–¶–∏—Ñ—Ä–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π",
          impact: "–í—Å—è –∏—Å—Ç–æ—Ä–∏—è –±–æ–ª–µ–∑–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Ä–∞—á—É –≤ –æ–¥–∏–Ω –∫–ª–∏–∫"
        }
      ];
    }

    // –û–±—â–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π
    return [
      {
        problem: "–ö–æ–º–∏—Å—Å–∏–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π 15-30%",
        solution: "–ü—Ä—è–º—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram",
        impact: "–ö–∞–∂–¥–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤"
      },
      {
        problem: "40% –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        solution: "–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
        impact: "–ö–ª–∏–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞"
      },
      {
        problem: "–í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
        solution: "–ì–æ—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞",
        impact: "–ó–∞–ø—É—Å–∫ –∑–∞ –Ω–µ–¥–µ–ª–∏ –≤–º–µ—Å—Ç–æ –º–µ—Å—è—Ü–µ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
      }
    ];
  };
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  // –ü–∞—Ä—Å–∏–Ω–≥ –º–∞—Å—Å–∏–≤–æ–≤ –∏–∑ JSON
  const painPoints = Array.isArray(industry.painPoints) ? industry.painPoints : [];
  const requiredModules = Array.isArray(industry.requiredModules) ? industry.requiredModules : [];
  const recommendedModules = Array.isArray(industry.recommendedModules) ? industry.recommendedModules : [];
  const keyMetrics = Array.isArray(industry.keyMetrics) ? industry.keyMetrics : [];

  return (
    <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
      <DialogTrigger asChild>
        <Card className="group cursor-pointer hover:shadow-lg transition-all duration-300 border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-600 hover:-translate-y-1">
          <CardContent className="p-6">
            {/* –ò–∫–æ–Ω–∫–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
            <div className="flex items-start gap-4 mb-4">
              <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0">
                <IconComponent className="w-6 h-6 text-white" />
              </div>
              <div className="flex-1 min-w-0">
                <h3 className="font-bold text-lg text-gray-900 dark:text-gray-100 leading-tight mb-2 min-h-[3.5rem] flex items-center">
                  {industry.name}
                </h3>

              </div>
            </div>
            
            {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
            <p className="text-sm text-gray-600 dark:text-gray-400 line-clamp-3 mb-4 leading-relaxed">
              {industry.description}
            </p>
            
            {/* –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2 text-xs text-blue-600 dark:text-blue-400">
                <TrendingUp className="w-4 h-4" />
                <span className="font-medium">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</span>
              </div>
              <ArrowRight className="w-5 h-5 text-gray-400 group-hover:text-blue-500 transition-colors" />
            </div>
          </CardContent>
        </Card>
      </DialogTrigger>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <DialogContent 
        className="max-w-5xl max-h-[90vh] overflow-hidden p-0" 
        aria-describedby={`industry-description-${industry.id}`}
      >
        <DialogHeader className="p-6 border-b border-gray-200 dark:border-gray-700">
          <DialogTitle className="text-2xl font-bold text-gray-900 dark:text-gray-100">
            {industry.name}
          </DialogTitle>
        </DialogHeader>
        
        <ScrollArea className="max-h-[75vh]">
          <div className="p-6 space-y-6">
            {/* –ò–∫–æ–Ω–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
            <div className="flex items-start gap-4" id={`industry-description-${industry.id}`}>
              <div className="w-16 h-16 rounded-xl bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center flex-shrink-0">
                <IconComponent className="w-8 h-8 text-white" />
              </div>
              <div className="flex-1">
                <p className="text-gray-600 dark:text-gray-300 leading-relaxed text-base">
                  {industry.description}
                </p>
              </div>
            </div>

            <Separator />

            {/* –ö–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
              <p className="text-blue-800 dark:text-blue-300 leading-relaxed text-base">
                {formatText(industry.importance)}
              </p>
            </div>

            <Separator />

            {/* –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
            <div>
              <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100 mb-6">
                –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Telegram Mini App
              </h3>
              <div className="grid gap-2">
                {getIndustryBenefits(industry.name).map((benefit, index) => (
                  <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-3 bg-white dark:bg-gray-800/50 hover:shadow-sm transition-all">
                    <div className="flex items-start gap-3">
                      <div className="flex-shrink-0 w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-md flex items-center justify-center">
                        <CheckCircle className="w-4 h-4 text-white" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="font-medium text-gray-900 dark:text-gray-100 text-sm leading-tight">
                          {benefit.solution}
                        </p>
                        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1 line-through">
                          {benefit.problem}
                        </p>
                        <p className="text-xs text-green-600 dark:text-green-400 font-medium mt-1">
                          ‚Üí {benefit.impact}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <Separator />

            {/* –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ */}
            <div>
              <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">
                –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
              </h3>
              <div className="grid gap-4">
                {requiredModules.map((module: any, index) => {
                  const fullModule = modules?.find(m => m.number === module.number);
                  return fullModule ? (
                    <ModuleInlineModal key={index} module={fullModule} variant="required" />
                  ) : (
                    <div key={index} className="border border-green-200 dark:border-green-800 rounded-lg p-4 bg-green-50 dark:bg-green-900/10">
                      <div className="flex items-start gap-3 mb-2">
                        <Badge variant="outline" className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300">
                          ‚Ññ{module.number}
                        </Badge>
                        <h4 className="font-semibold text-gray-900 dark:text-gray-100">{module.name}</h4>
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-400 italic leading-relaxed">
                        {formatText(module.reason)}
                      </p>
                    </div>
                  );
                })}
              </div>
            </div>

            <Separator />

            {/* –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥—É–ª–∏ */}
            <div>
              <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥—É–ª–∏
              </h3>
              <div className="grid gap-4">
                {recommendedModules.map((module: any, index) => {
                  const fullModule = modules?.find(m => m.number === module.number);
                  return fullModule ? (
                    <ModuleInlineModal key={index} module={fullModule} variant="recommended" />
                  ) : (
                    <div key={index} className="border border-blue-200 dark:border-blue-800 rounded-lg p-4 bg-blue-50 dark:bg-blue-900/10">
                      <div className="flex items-start gap-3 mb-2">
                        <Badge variant="outline" className="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300">
                          ‚Ññ{module.number}
                        </Badge>
                        <h4 className="font-semibold text-gray-900 dark:text-gray-100">{module.name}</h4>
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-400 italic leading-relaxed">
                        {formatText(module.reason)}
                      </p>
                    </div>
                  );
                })}
              </div>
            </div>

            {/* –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
            {keyMetrics.length > 0 && (
              <>
                <Separator />
                <div>
                  <h3 className="text-xl font-bold text-gray-900 dark:text-gray-100 mb-4">
                    –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                  </h3>
                  <div className="grid gap-3">
                    {keyMetrics.map((metric, index) => (
                      <div key={index} className="flex items-start gap-3 p-4 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg">
                        <TrendingUp className="w-5 h-5 text-green-600 mt-0.5 flex-shrink-0" />
                        <p className="text-sm text-green-800 dark:text-green-300 font-medium leading-relaxed">
                          {formatText(metric)}
                        </p>
                      </div>
                    ))}
                  </div>
                </div>
              </>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex flex-col sm:flex-row gap-3 pt-6 pb-2">
              <Button className="flex-1 bg-blue-600 hover:bg-blue-700 text-white h-12">
                –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø
              </Button>
              <Button variant="outline" className="flex-1 h-12">
                –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
              </Button>
            </div>
          </div>
        </ScrollArea>
      </DialogContent>
      
    </Dialog>
  );
}

// –°–∫–µ–ª–µ—Ç–æ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
function IndustryCardSkeleton() {
  return (
    <Card className="border border-gray-200 dark:border-gray-700">
      <CardContent className="p-6">
        <div className="flex items-start gap-4 mb-4">
          <Skeleton className="w-12 h-12 rounded-xl" />
          <div className="flex-1">
            <Skeleton className="h-6 w-full mb-2" />
            <Skeleton className="h-4 w-24" />
          </div>
        </div>
        <Skeleton className="h-16 w-full mb-4" />
        <div className="flex items-center justify-between">
          <Skeleton className="h-4 w-20" />
          <Skeleton className="w-5 h-5" />
        </div>
      </CardContent>
    </Card>
  );
}

export default function Industries() {
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState("–í–°–ï –ù–ò–®–ò");

  const { data: industries, isLoading, error } = useQuery<Industry[]>({
    queryKey: ['/api/industries'],
  });

  const { data: modules } = useQuery<Module[]>({
    queryKey: ['/api/modules'],
  });

  const filteredIndustries = industries?.filter(industry => {
    const matchesSearch = !searchTerm.trim() || 
      industry.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      industry.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
      industry.importance.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = selectedCategory === "–í–°–ï –ù–ò–®–ò" || industry.category === selectedCategory;
    return matchesSearch && matchesCategory;
  }) || [];

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalIndustries = industries?.length || 0;
  const categoriesStats = {
    "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û": industries?.filter(i => i.category === "–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û").length || 0,
    "–û–ß–ï–ù–¨ –ü–û–õ–ï–ó–ù–û": industries?.filter(i => i.category === "–û–ß–ï–ù–¨ –ü–û–õ–ï–ó–ù–û").length || 0,
    "–ü–û–õ–ï–ó–ù–û": industries?.filter(i => i.category === "–ü–û–õ–ï–ó–ù–û").length || 0,
  };

  if (error) {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-red-600 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∏—à</h1>
          <p className="text-gray-600">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-600 to-blue-800 bg-clip-text text-transparent mb-4">
              –ë–∏–∑–Ω–µ—Å-–Ω–∏—à–∏ –¥–ª—è Telegram Mini Apps
            </h1>
            <p className="text-lg text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
              –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è {totalIndustries} –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∏—à —Å –≥–æ—Ç–æ–≤—ã–º–∏ –º–æ–¥—É–ª—è–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
            </p>
          </div>

          {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
          <div className="bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900 dark:to-blue-800 rounded-xl border border-blue-200 dark:border-blue-700 p-6 max-w-5xl mx-auto">
            <div className="flex flex-col lg:flex-row gap-4 items-center justify-center">
              <div className="relative flex-1 w-full lg:max-w-md">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-500 w-4 h-4" />
                <Input
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–∏—à–∏..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 bg-white dark:bg-blue-800 border-blue-300 dark:border-blue-600 placeholder:text-blue-500 dark:placeholder:text-blue-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
              
              <div className="flex flex-wrap gap-2 justify-center">
                {categories.map((category) => (
                  <Button
                    key={category}
                    variant={selectedCategory === category ? "default" : "outline"}
                    size="sm"
                    onClick={() => setSelectedCategory(category)}
                    className={`text-xs whitespace-nowrap ${
                      selectedCategory === category
                        ? "bg-blue-600 hover:bg-blue-700 text-white shadow-md"
                        : "bg-white dark:bg-blue-700 text-blue-700 dark:text-blue-200 hover:bg-blue-50 dark:hover:bg-blue-600 border-blue-200 dark:border-blue-600"
                    }`}
                  >
                    {category === "–í–°–ï –ù–ò–®–ò" ? `–í—Å–µ (${totalIndustries})` : category}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –û—Ç—Ä–∞—Å–ª–∏ */}
      <div className="container mx-auto px-4 py-8">
        {isLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {Array.from({ length: 12 }).map((_, index) => (
              <IndustryCardSkeleton key={index} />
            ))}
          </div>
        ) : filteredIndustries.length === 0 ? (
          <div className="text-center py-12">
            <div className="w-16 h-16 mx-auto bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mb-4">
              <Search className="w-8 h-8 text-gray-400" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2">
              –ù–∏—à–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            </h3>
            <p className="text-gray-600 dark:text-gray-400">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            </p>
          </div>
        ) : (
          <>
            <div className="flex items-center justify-between mb-6">
              <p className="text-sm text-gray-600 dark:text-gray-400">
                –ù–∞–π–¥–µ–Ω–æ {filteredIndustries.length} –Ω–∏—à
                {selectedCategory !== "–í–°–ï –ù–ò–®–ò" && ` –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${selectedCategory}"`}
              </p>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredIndustries.map((industry) => (
                <IndustryCard key={industry.id} industry={industry} modules={modules || []} />
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  );
}