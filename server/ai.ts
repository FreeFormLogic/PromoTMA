// PromoTMA/server/ai.ts
import { GoogleGenerativeAI } from "@google/generative-ai";
import { storage } from "./storage";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ç–∞–π–º-–∞—É—Ç–æ–≤
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–¥–Ω–æ–º—É "–ø–∞–∫–µ—Ç—É" –º–æ–¥—É–ª–µ–π.
 */
async function getRecommendationsForChunk(
  chunk: string,
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[],
): Promise<string> {
  const systemPrompt = `–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ß–ê–°–¢–ò–ß–ù–´–ô –°–ü–ò–°–û–ö –º–æ–¥—É–ª–µ–π, –≤—ã–±–µ—Ä–∏ –∏–∑ –Ω–µ–≥–æ 2-3 –°–ê–ú–´–• –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—à–µ–Ω–∏—è.

–ß–ê–°–¢–ò–ß–ù–´–ô –°–ü–ò–°–û–ö –ú–û–î–£–õ–ï–ô:
---
${chunk}
---

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1.  –ò–∑—É—á–∏ –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.
2.  –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ —Ç–æ–ª—å–∫–æ —Ç–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –ò–î–ï–ê–õ–¨–ù–´–ú –ø–æ–ø–∞–¥–∞–Ω–∏–µ–º –≤ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.
3.  –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ –µ–≥–æ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ [MODULE:–ù–û–ú–ï–†]. –ù–µ –ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ.

–ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
-   –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –¢–û–õ–¨–ö–û –∏–∑ —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ \`[MODULE:–ù–û–ú–ï–†]\`.
-   –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø—Ä–æ—â–∞–Ω–∏–π –∏–ª–∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
-   –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ã: [${alreadyShownModules.join(", ")}].
`;

  try {
    const result = await model.generateContent(
      `${systemPrompt}\n\n–î–∏–∞–ª–æ–≥:\n${messages.map((msg) => `${msg.role === "user" ? "–ö–ª–∏–µ–Ω—Ç" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}: ${msg.content}`).join("\n")}`,
    );
    return result.response.text();
  } catch (error) {
    console.error("Gemini chunk processing error:", error);
    return ""; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞.
 */
export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    // --- –≠–¢–ê–ü 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ–π –±–∞–∑—ã –º–æ–¥—É–ª–µ–π –Ω–∞ —á–∞—Å—Ç–∏ ---
    const allModules = await storage.getAllModules();
    console.log(`ü§ñ Stage 1: Processing all ${allModules.length} modules.`);

    const formattedModules = allModules.map(
      (m) => `[MODULE:${m.number}] ${m.name} - ${m.description}`,
    );

    const CHUNK_SIZE = 60; // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä "–ø–∞–∫–µ—Ç–∞"
    const chunks: string[] = [];
    for (let i = 0; i < formattedModules.length; i += CHUNK_SIZE) {
      chunks.push(formattedModules.slice(i, i + CHUNK_SIZE).join("\n"));
    }
    console.log(`üì¶ Stage 1: Split modules into ${chunks.length} chunks.`);

    // --- –≠–¢–ê–ü 2: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π –∏ —Å–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ---
    const promises = chunks.map((chunk) =>
      getRecommendationsForChunk(chunk, messages, alreadyShownModules),
    );
    const results = await Promise.all(promises);
    console.log(
      `üß† Stage 2: Received preliminary recommendations from all chunks.`,
    );

    const candidateModuleNumbers =
      results
        .join("\n")
        .match(/\[MODULE:(\d+)\]/g)
        ?.map((match) => parseInt(match.match(/(\d+)/)![0])) || [];

    if (candidateModuleNumbers.length === 0) {
      throw new Error("AI did not select any candidate modules.");
    }

    const uniqueCandidateNumbers = [...new Set(candidateModuleNumbers)];
    const candidateModules = allModules.filter((m) =>
      uniqueCandidateNumbers.includes(m.number),
    );
    const finalModuleDatabase = candidateModules
      .map((m) => `[MODULE:${m.number}] ${m.name} - ${m.description}`)
      .join("\n");

    console.log(
      `üéØ Stage 2: Aggregated ${candidateModules.length} unique candidate modules.`,
    );

    // --- –≠–¢–ê–ü 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–∏—Ö –∏–∑ –ª—É—á—à–∏—Ö –∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π ---
    const finalPrompt = `–¢—ã ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –¢—ã —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤—Å—é –±–∞–∑—É –º–æ–¥—É–ª–µ–π –∏ –æ—Ç–æ–±—Ä–∞–ª –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å 4-5 —Å–∞–º—ã—Ö –∏–¥–µ–∞–ª—å–Ω—ã—Ö –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–ª—è –Ω–∏—Ö –ø—Ä–æ–¥–∞—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è.

–°–ü–ò–°–û–ö –õ–£–ß–®–ò–• –ú–û–î–£–õ–ï–ô-–ö–ê–ù–î–ò–î–ê–¢–û–í:
---
${finalModuleDatabase}
---

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1.  –ò–∑—É—á–∏ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –µ—â–µ —Ä–∞–∑.
2.  –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ 4-5 –°–ê–ú–´–• –ª—É—á—à–∏—Ö –º–æ–¥—É–ª—è, –≤–∫–ª—é—á–∞—è –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç.
3.  –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (15-20 —Å–ª–æ–≤), –ø–æ–∫–∞–∑—ã–≤–∞—è, –∫–∞–∫ –º–æ–¥—É–ª—å —Ä–µ—à–∏—Ç –∑–∞–¥–∞—á—É –∫–ª–∏–µ–Ω—Ç–∞.

–°–ê–ú–´–ï –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
-   –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –¢–û–õ–¨–ö–û –∏–∑ —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ \`[MODULE:–ù–û–ú–ï–†] –¢–≤–æ–π –Ω–æ–≤—ã–π, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\`.
-   –û–ü–ò–°–ê–ù–ò–ï –í–°–ï–ì–î–ê –ò–î–ï–¢ –ü–û–°–õ–ï ID –ú–û–î–£–õ–Ø.
-   –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø—Ä–æ—â–∞–Ω–∏–π –∏–ª–∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.
`;

    console.log(
      "üöÄ Stage 3: Sending final request to AI for ranking and description generation...",
    );
    const finalResult = await model.generateContent(
      `${finalPrompt}\n\n–î–∏–∞–ª–æ–≥:\n${messages.map((msg) => `${msg.role === "user" ? "–ö–ª–∏–µ–Ω—Ç" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}: ${msg.content}`).join("\n")}`,
    );
    const aiContent = finalResult.response.text();
    console.log("‚úÖ Stage 3: Received final AI response.");

    const responseLines = aiContent
      .trim()
      .split("\n")
      .filter((line) => line.includes("[MODULE:"));
    if (responseLines.length === 0) {
      throw new Error("Final AI response did not contain valid module lines.");
    }

    const finalResponse = responseLines.join("\n");
    const recommendedModules = responseLines
      .map((line) => {
        const match = line.match(/\[MODULE:(\d+)\]/i);
        return match ? parseInt(match[1]) : 0;
      })
      .filter((id) => id > 0 && !alreadyShownModules.includes(id));

    return {
      response: finalResponse,
      recommendedModules: [...new Set(recommendedModules)].sort(
        (a, b) => a - b,
      ),
    };
  } catch (error) {
    console.error("AI Main Logic Error:", error);
    return {
      response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
      recommendedModules: [],
    };
  }
}

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –≤—Å—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ generateAIResponse.
// –û—Å—Ç–∞–≤–ª—è–µ–º –µ–µ –ø—É—Å—Ç–æ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≥–¥–µ-—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è.
export async function analyzeBusinessContext(messages: string[]): Promise<any> {
  return Promise.resolve({});
}
