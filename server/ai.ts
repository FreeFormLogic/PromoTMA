// –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini 2.5 Pro —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent";
const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

export interface BusinessAnalysis {
  industry: string;
  size: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
  persona: string;
}

export async function analyzeBusinessContext(
  messages: string[],
): Promise<BusinessAnalysis> {
  try {
    const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –∏–∑–≤–ª–µ–∫–∏ –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê - –ò–ó–£–ß–ò–¢–¨ –ù–ò–®–£ –ö–õ–ò–ï–ù–¢–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏ –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
2. –í—ã—è–≤–∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏  
3. –ü–æ–π–º–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
4. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏

–ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –õ–Æ–ë–û–ô –ù–ò–®–ò

–î–õ–Ø –ö–ê–ñ–î–û–ô –ù–ò–®–ò –ê–ù–ê–õ–ò–ó–ò–†–£–ô:
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ workflow
- –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞  
- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é

–í–µ—Ä–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π JSON:
- industry: —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏—à–∏
- size: —Ä–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ 
- challenges: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∏—à–∏
- goals: —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
- relevantCategories: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è —ç—Ç–æ–π –Ω–∏—à–∏
- keywords: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∏—à–∏
- persona: –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–†–∞–∑–≥–æ–≤–æ—Ä:
${messages.join("\n")}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    const response = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É. –ò–∑—É—á–∞–π –ª—é–±—É—é –Ω–∏—à—É –∏ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n${prompt}`,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: 1200,
          temperature: 0.1,
        },
      }),
    });

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (content) {
      let responseText = content.trim();

      // Remove markdown code blocks if present
      if (responseText.startsWith("```json")) {
        responseText = responseText
          .replace(/^```json\s*/, "")
          .replace(/\s*```$/, "");
      } else if (responseText.startsWith("```")) {
        responseText = responseText
          .replace(/^```\s*/, "")
          .replace(/\s*```$/, "");
      }

      return JSON.parse(responseText);
    }

    throw new Error("Invalid response format");
  } catch (error) {
    console.error("Error analyzing business context:", error);
    return {
      industry: "general",
      size: "medium",
      challenges: [],
      goals: [],
      relevantCategories: [],
      keywords: [],
      persona: "general business",
    };
  }
}

export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import("./storage");
    const allModules = await storage.getAllModules();
    console.log(`üîç AI processing ${allModules.length} modules`);

    const systemPrompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Telegram Mini Apps. –£ —Ç–µ–±—è ${allModules.length} –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á.

–ê–ù–ê–õ–ò–ó–ò–†–£–ô –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3-4 —Å–∞–º—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥—É–ª—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.

–£–ñ–ï –ü–û–ö–ê–ó–ê–ù–ù–´–ï: [${alreadyShownModules.join(", ")}] - –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π!

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
[MODULE:–ù–û–ú–ï–†] –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è.

–°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û:
- –ü–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π –ø–æ—Å–ª–µ [MODULE:X]
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **, * , ** - —Å–∏–º–≤–æ–ª—ã
- –ù–∞—á–∏–Ω–∞—Ç—å —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã

–ü–†–ê–í–ò–õ–¨–ù–û: "[MODULE:120] –ü–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ GoPay."
–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: "**[MODULE:120] –ù–∞–∑–≤–∞–Ω–∏–µ** - –æ–ø–∏—Å–∞–Ω–∏–µ"

–û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.`;

    const apiResponse = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `${systemPrompt}\n\n–î–∏–∞–ª–æ–≥:\n${messages.map((msg) => `${msg.role === "user" ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}: ${msg.content}`).join("\n")}`,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: 2048,
          temperature: 0.1,
        },
      }),
    });

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text();
      console.error("Gemini API Error:", apiResponse.status, errorText);
      throw new Error(`API failed: ${apiResponse.status} - ${errorText}`);
    }

    const apiData = await apiResponse.json();
    console.log("Full API Response:", JSON.stringify(apiData, null, 2));

    const aiContent = apiData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!aiContent) {
      console.error("No AI content found in response:", apiData);
      console.error("Candidates:", apiData.candidates);
      throw new Error("No AI response content");
    }

    console.log("AI Response Preview:", aiContent.substring(0, 100));

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    let cleanedContent = aiContent
      .replace(/\*\*\s*\[MODULE:(\d+)\]\s*([^*]+)\*\*\s*[:-]/gi, "[MODULE:$1]") // –£–±–∏—Ä–∞–µ–º **[MODULE:X] –ù–∞–∑–≤–∞–Ω–∏–µ** -
      .replace(/\*\s*\*\*\s*/g, "") // –£–±–∏—Ä–∞–µ–º * **
      .replace(/\*\*\s*-\s*/g, "") // –£–±–∏—Ä–∞–µ–º ** -
      .replace(/\*\*([^*]+)\*\*:/g, "$1:") // –ó–∞–º–µ–Ω—è–µ–º **–¢–µ–∫—Å—Ç**: –Ω–∞ –¢–µ–∫—Å—Ç:
      .replace(/\n\*\s*\*\*/g, "\n") // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å * **
      .trim();

    const moduleMatches = cleanedContent.match(/\[MODULE:(\d+)\]/gi) || [];
    const recommendedModules: number[] = [];

    for (const match of moduleMatches) {
      const numberMatch = match.match(/\[MODULE:(\d+)\]/i);
      if (numberMatch) {
        const moduleNumber = parseInt(numberMatch[1]);
        if (!alreadyShownModules.includes(moduleNumber)) {
          recommendedModules.push(moduleNumber);
        }
      }
    }

    return {
      response: cleanedContent,
      recommendedModules: Array.from(new Set(recommendedModules)).sort(
        (a, b) => a - b,
      ),
    };
  } catch (error) {
    console.error("AI Error:", error);
    return {
      response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
      recommendedModules: [],
    };
  }
}