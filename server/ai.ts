// –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini 2.5 Pro —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent";
const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ API –¥–ª—è –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞
async function getRecommendationsForChunk(
  chunk: string,
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[],
) {
  const systemPrompt = `
–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –ß–ê–°–¢–ò–ß–ù–´–ô –°–ü–ò–°–û–ö –º–æ–¥—É–ª–µ–π, –≤—ã–±—Ä–∞—Ç—å –∏–∑ –Ω–µ–≥–æ 2-3 –°–ê–ú–´–• –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ—à–µ–Ω–∏—è.

–ß–ê–°–¢–ò–ß–ù–´–ô –°–ü–ò–°–û–ö –ú–û–î–£–õ–ï–ô:
---
${chunk}
---

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1.  –ò–∑—É—á–∏ –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Å—É—Ç—å –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.
2.  –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ —Ç–æ–ª—å–∫–æ —Ç–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –ò–î–ï–ê–õ–¨–ù–´–ú –ø–æ–ø–∞–¥–∞–Ω–∏–µ–º –≤ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.
3.  –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (15-20 —Å–ª–æ–≤), –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Ü–µ–Ω–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.

–°–ê–ú–´–ï –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
-   –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –¢–û–õ–¨–ö–û –∏–∑ —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ \`[MODULE:–ù–û–ú–ï–†] –¢–≤–æ–π –Ω–æ–≤—ã–π, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\`.
-   **–û–ü–ò–°–ê–ù–ò–ï –í–°–ï–ì–î–ê –ò–î–ï–¢ –ü–û–°–õ–ï ID –ú–û–î–£–õ–Ø.**
-   –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π ("–í–æ—Ç, —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª..."), –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ—â–∞–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –º–æ–¥—É–ª—è–º–∏.
-   –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –º–æ–¥—É–ª–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö: [${alreadyShownModules.join(
    ", ",
  )}].

–ü—Ä–∏–º–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ "–ø–∏—Ü—Ü–µ—Ä–∏—è":
\`[MODULE:145] –û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑, —É–ø—Ä–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ—Ç –≥–æ—Ç–æ–≤–∫–∏ –¥–æ –≤—Ä—É—á–µ–Ω–∏—è.\`
\`[MODULE:5] –î–∞—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –æ–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π –∏–ª–∏ —á–µ—Ä–µ–∑ Telegram Pay.\`

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º.
`;

  const apiResponse = await fetch(GEMINI_API_URL, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "X-goog-api-key": GEMINI_API_KEY!,
    },
    body: JSON.stringify({
      contents: [
        {
          parts: [
            {
              text: `${systemPrompt}\n\n–î–∏–∞–ª–æ–≥:\n${messages
                .map(
                  (msg) =>
                    `${
                      msg.role === "user" ? "–ö–ª–∏–µ–Ω—Ç" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                    }: ${msg.content}`,
                )
                .join("\n")}`,
            },
          ],
        },
      ],
      generationConfig: {
        maxOutputTokens: 1024,
        temperature: 0.2,
      },
    }),
  });

  if (!apiResponse.ok) {
    const errorText = await apiResponse.text();
    console.error(
      "Gemini API Error (Chunk Processing):",
      apiResponse.status,
      errorText,
    );
    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
    return "";
  }

  const apiData = await apiResponse.json();
  return apiData.candidates?.[0]?.content?.parts?.[0]?.text || "";
}

export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import("./storage");
    const allModules = await storage.getAllModules();
    console.log(`ü§ñ AI processing ${allModules.length} total modules.`);

    // 1. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ —Å—Ç—Ä–æ–∫–∏
    const formattedModules = allModules.map(
      (m) => `[MODULE:${m.id}] ${m.title} - ${m.description}`,
    );

    // 2. –î–µ–ª–∏–º –Ω–∞ —á–∞–Ω–∫–∏ (–∫—É—Å–∫–∏) –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const CHUNK_SIZE = 80; // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã
    const chunks: string[] = [];
    for (let i = 0; i < formattedModules.length; i += CHUNK_SIZE) {
      chunks.push(formattedModules.slice(i, i + CHUNK_SIZE).join("\n"));
    }
    console.log(`üì¶ Split modules into ${chunks.length} chunks.`);

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
    const promises = chunks.map((chunk) =>
      getRecommendationsForChunk(chunk, messages, alreadyShownModules),
    );
    const results = await Promise.all(promises);
    console.log(`‚úÖ Received responses from all chunks.`);

    // 4. –°–æ–±–∏—Ä–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const combinedResponse = results.join("\n").trim();
    const finalLines = combinedResponse
      .split("\n")
      .filter((line) => line.startsWith("[MODULE:") && line.trim() !== "");

    if (finalLines.length === 0) {
      console.warn("AI did not return any valid module recommendations.");
      throw new Error("No modules recommended by AI.");
    }

    const response = finalLines.join("\n");

    const recommendedModules = finalLines
      .map((line) => {
        const match = line.match(/\[MODULE:(\d+)\]/);
        return match ? parseInt(match[1]) : null;
      })
      .filter(
        (id): id is number => id !== null && !alreadyShownModules.includes(id),
      );

    return {
      response,
      recommendedModules: [...new Set(recommendedModules)].sort(
        (a, b) => a - b,
      ),
    };
  } catch (error) {
    console.error("AI Main Logic Error:", error);
    return {
      response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
      recommendedModules: [],
    };
  }
}

// –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è analyzeBusinessContext, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –≤ generateAIResponse
export async function analyzeBusinessContext(messages: string[]): Promise<any> {
  return Promise.resolve({});
}
