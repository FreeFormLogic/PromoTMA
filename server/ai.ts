// –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini 2.5 Pro —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent";
const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

export interface BusinessAnalysis {
  industry: string;
  size: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
  persona: string;
}

export async function analyzeBusinessContext(
  messages: string[],
): Promise<BusinessAnalysis> {
  try {
    const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –∏–∑–≤–ª–µ–∫–∏ –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê - –ò–ó–£–ß–ò–¢–¨ –ù–ò–®–£ –ö–õ–ò–ï–ù–¢–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏ –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
2. –í—ã—è–≤–∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏  
3. –ü–æ–π–º–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
4. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏

–ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –õ–Æ–ë–û–ô –ù–ò–®–ò

–î–õ–Ø –ö–ê–ñ–î–û–ô –ù–ò–®–ò –ê–ù–ê–õ–ò–ó–ò–†–£–ô:
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ workflow
- –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞  
- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é

–í–µ—Ä–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π JSON:
- industry: —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏—à–∏
- size: —Ä–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ 
- challenges: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∏—à–∏
- goals: —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
- relevantCategories: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è —ç—Ç–æ–π –Ω–∏—à–∏
- keywords: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∏—à–∏
- persona: –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–†–∞–∑–≥–æ–≤–æ—Ä:
${messages.join("\n")}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    const response = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É. –ò–∑—É—á–∞–π –ª—é–±—É—é –Ω–∏—à—É –∏ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n${prompt}`,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: 1200,
          temperature: 0.1,
        },
      }),
    });

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (content) {
      let responseText = content.trim();

      // Remove markdown code blocks if present
      if (responseText.startsWith("```json")) {
        responseText = responseText
          .replace(/^```json\s*/, "")
          .replace(/\s*```$/, "");
      } else if (responseText.startsWith("```")) {
        responseText = responseText
          .replace(/^```\s*/, "")
          .replace(/\s*```$/, "");
      }

      return JSON.parse(responseText);
    }

    throw new Error("Invalid response format");
  } catch (error) {
    console.error("Error analyzing business context:", error);
    return {
      industry: "general",
      size: "medium",
      challenges: [],
      goals: [],
      relevantCategories: [],
      keywords: [],
      persona: "general business",
    };
  }
}

export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[]; moduleDescriptions?: Record<number, string> }> {
  try {
    const { storage } = await import("./storage");
    const allModules = await storage.getAllModules();
    console.log(`üîç AI processing ${allModules.length} modules`);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø—Ä–æ–º–ø—Ç
    const finalModuleDatabase = allModules
      .map((m) => `[MODULE:${m.number}] ${m.name} - ${m.description}`)
      .join("\n");

   const finalPrompt = `–¢—ã ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –£ —Ç–µ–±—è –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á.

–í–ê–ñ–ù–û: –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–µ —á–∞—Å—Ç–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
1) –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç ‚Äî –≤–≤–æ–¥–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∏ –∑–∞—Ç–µ–º –±–ª–æ–∫–∏ –º–æ–¥—É–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ
  [MODULE:–ù–û–ú–ï–†] –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è\n   –ö–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (15-25 —Å–ª–æ–≤)\n\n
2) –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤—å —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON, –ø–æ–º–µ—â—ë–Ω–Ω—ã–π –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏
  ###MODULE_JSON_START### –∏ ###MODULE_JSON_END### (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–æ–∫—Ä—É–≥).
  JSON –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≤–∏–¥:
  {
    "moduleDescriptions": {"<–Ω–æ–º–µ—Ä>": "<–ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ>", ...},
    "recommendedModules": [–Ω–æ–º–µ—Ä, ...]
  }
  JSON –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω: –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–π –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç "{}" –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –≤—ã—à–µ.

–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å markdown-–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞. –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–æ JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—å—Å—è.

–°–ü–ò–°–û–ö –í–°–ï–• –ú–û–î–£–õ–ï–ô (–∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–π –æ–ø–∏—Å–∞–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º):
---
${finalModuleDatabase}
---

–î–∏–∞–ª–æ–≥:
${messages.map((msg) => `${msg.role === "user" ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}: ${msg.content}`).join("\n")}`;

    console.log("üöÄ Stage 3: Sending final request to AI for ranking and description generation...");
    const apiResponse = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: finalPrompt,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: 2048,
          temperature: 0.2,
        },
      }),
    });

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text();
      console.error("Gemini API Error:", apiResponse.status, errorText);
      throw new Error(`API failed: ${apiResponse.status} - ${errorText}`);
    }

    const apiData = await apiResponse.json();
    const aiContent = apiData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!aiContent) {
      console.error("No AI content found in response:", apiData);
      throw new Error("No AI response content");
    }

    console.log("AI Response Preview:", aiContent.substring(0, 200));

    // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ—á—å –º–∞—à–∏–Ω–Ω–æ-—á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π JSON –º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
    let cleanedContentRaw = aiContent;
    let extractedJson: any = null;
    try {
      const jsonBlockMatch = aiContent.match(/###MODULE_JSON_START###+([\s\S]*?)###MODULE_JSON_END###/);
      if (jsonBlockMatch && jsonBlockMatch[1]) {
        const jsonText = jsonBlockMatch[1].trim();
        try {
          extractedJson = JSON.parse(jsonText);
          // Remove JSON block from human-readable content
          cleanedContentRaw = aiContent.replace(jsonBlockMatch[0], '').trim();
        } catch (jsonErr) {
          // If JSON parse failed, try to find any JSON object that contains moduleDescriptions
          const fallbackJsonMatch = aiContent.match(/(\{[\s\S]*?\})/);
          if (fallbackJsonMatch) {
            try {
              extractedJson = JSON.parse(fallbackJsonMatch[1]);
              cleanedContentRaw = aiContent.replace(fallbackJsonMatch[1], '').trim();
            } catch (e) {
              // leave extractedJson null and fallback to text parsing below
              extractedJson = null;
            }
          }
        }
      } else {
        // No explicit markers ‚Äî try to find any JSON object with moduleDescriptions key
        const anyJsonMatch = aiContent.match(/(\{[\s\S]*?"moduleDescriptions"[\s\S]*?\})/);
        if (anyJsonMatch) {
          try {
            extractedJson = JSON.parse(anyJsonMatch[1]);
            cleanedContentRaw = aiContent.replace(anyJsonMatch[1], '').trim();
          } catch (e) {
            extractedJson = null;
          }
        }
      }
    } catch (e) {
      console.warn('JSON extraction attempt failed:', e);
      extractedJson = null;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ markdown –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
    let cleanedContent = cleanedContentRaw
      .replace(/^```[\s\S]*?```$/gm, "")
      .replace(/\*\*/g, "")
      .replace(/\*+/g, "")
      .trim();

    // If JSON provided moduleDescriptions, use it directly and skip fragile parsing where possible
    const moduleDescriptionsFromAI: Record<number, string> | undefined = (() => {
      try {
        if (extractedJson && extractedJson.moduleDescriptions && typeof extractedJson.moduleDescriptions === 'object') {
          const map: Record<number, string> = {};
          for (const k of Object.keys(extractedJson.moduleDescriptions)) {
            const num = Number(k);
            if (!Number.isNaN(num)) map[num] = String(extractedJson.moduleDescriptions[k]);
          }
          return map;
        }
        // Also support older possible keys
        if (extractedJson && extractedJson.module_comments && typeof extractedJson.module_comments === 'object') {
          const map: Record<number, string> = {};
          for (const k of Object.keys(extractedJson.module_comments)) {
            const num = Number(k);
            if (!Number.isNaN(num)) map[num] = String(extractedJson.module_comments[k]);
          }
          return map;
        }
      } catch (e) {
        return undefined;
      }
      return undefined;
    })();

    // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–∞—Ä—ã: [MODULE:id] + –æ–ø–∏—Å–∞–Ω–∏–µ (—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞/–ø–∞—Ä–∞–≥—Ä–∞—Ñ)
    const pairs: { id: number; moduleLine: string; description: string }[] = [];

    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ —Å [MODULE:ID]
    const moduleLineRegex = /\[MODULE:(\d+)\][^\n\r]*/g;
    let m: RegExpExecArray | null;
    const modulePositions: { index: number; id: number; moduleLine: string }[] = [];
    while ((m = moduleLineRegex.exec(cleanedContent)) !== null) {
      const id = Number(m[1]);
      modulePositions.push({ index: m.index, id, moduleLine: (m[0] || '').trim() });
    }

    for (let i = 0; i < modulePositions.length; i++) {
      const start = modulePositions[i].index;
      const end = i + 1 < modulePositions.length ? modulePositions[i + 1].index : cleanedContent.length;
      const afterModule = cleanedContent.slice(start, end);
      const rest = afterModule.replace(modulePositions[i].moduleLine, "").trim();

      // –û–ø–∏—Å–∞–Ω–∏–µ - –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –∏–ª–∏ –ø–µ—Ä–≤–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å –º–æ–¥—É–ª–µ–º
      let description = "";
      if (rest) {
        const paragraphMatch = rest.match(/^[^\r\n]+(?:\r?\n(?!\r?\n)[^\r\n]+)*/);
        if (paragraphMatch) description = paragraphMatch[0].trim();
      }

      pairs.push({ id: modulePositions[i].id, moduleLine: modulePositions[i].moduleLine, description });
    }

    // Fallback: –µ—Å–ª–∏ –ø–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º (—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç, –µ—Å–ª–∏ AI –≤—ã–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ –º–µ—Ç–∫–∏)
    if (pairs.length === 0) {
      const paragraphs = cleanedContent.split(/\n\s*\n/).map((p: string) => p.trim()).filter((s: string) => Boolean(s));
      for (let i = 0; i < paragraphs.length; i++) {
        const ids = Array.from(paragraphs[i].matchAll(/\[MODULE:(\d+)\]/g)).map(x => Number((x as RegExpMatchArray)[1]));
        if (ids.length > 0) {
          let description = "";
          if (i + 1 < paragraphs.length && !/\[MODULE:(\d+)\]/.test(paragraphs[i + 1])) {
            description = paragraphs[i + 1];
          } else if (i - 1 >= 0 && !/\[MODULE:(\d+)\]/.test(paragraphs[i - 1])) {
            // –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∏–¥—Ç–∏ –ø–µ—Ä–µ–¥ –º–µ—Ç–∫–æ–π
            description = paragraphs[i - 1];
          }
          for (const id of ids) {
            const moduleLineMatch = paragraphs[i].match(/\[MODULE:\d+\][^\n]*/);
            pairs.push({ id, moduleLine: moduleLineMatch ? moduleLineMatch[0] : `[MODULE:${id}]`, description });
          }
        }
      }
    }

    if (pairs.length === 0) {
      throw new Error("Final AI response did not contain valid module lines.");
    }

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ id –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö
    const uniqueIds = Array.from(new Set(pairs.map(p => p.id)));
    const recommendedModules = uniqueIds.filter(id => !alreadyShownModules.includes(id)).sort((a, b) => a - b);
      // Build map of module descriptions from parsed pairs (prefer first occurrence)
      const moduleDescriptionsFromPairs: Record<number, string> = {};
      for (const p of pairs) {
        if (!moduleDescriptionsFromPairs[p.id] && p.description) {
          moduleDescriptionsFromPairs[p.id] = p.description;
        }
      }

      // If AI provided structured moduleDescriptions, prefer it (it may contain fuller descriptions)
      const moduleDescriptions: Record<number, string> = (moduleDescriptionsFromAI && Object.keys(moduleDescriptionsFromAI).length > 0)
        ? moduleDescriptionsFromAI
        : moduleDescriptionsFromPairs;

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞: –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (–¥–æ –ø–µ—Ä–≤–æ–π –º–µ—Ç–∫–∏), –∑–∞—Ç–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –º–æ–¥—É–ª—å + –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    const firstModuleIndex = cleanedContent.search(/\[MODULE:(\d+)\]/);
    let intro = "";
    if (firstModuleIndex > 0) {
      intro = cleanedContent.slice(0, firstModuleIndex).trim();
    }

    const rebuiltLines: string[] = [];
    if (intro) rebuiltLines.push(intro);

    for (const p of pairs) {
      rebuiltLines.push(p.moduleLine);
      if (p.description) rebuiltLines.push(p.description);
      rebuiltLines.push("");
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å –æ—Ç AI, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ; –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
    const tail = cleanedContent.slice(Math.max(...pairs.map(p => cleanedContent.lastIndexOf(p.moduleLine))) + 1).trim();
    if (tail && /\?$/.test(tail)) {
      rebuiltLines.push(tail);
    } else if (tail && !/\[MODULE:(\d+)\]/.test(tail)) {
      // –µ—Å–ª–∏ tail —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ—Ç–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ (–≤–¥—Ä—É–≥ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å)
      rebuiltLines.push(tail);
    } else {
      rebuiltLines.push("–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –º–æ–¥—É–ª–∏ –ø–æ –æ—Ç—Ä–∞—Å–ª–∏, –ø–æ —Ü–µ–Ω–µ –∏–ª–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É?");
    }

    const finalResponse = rebuiltLines.join("\n").trim();

    return {
      response: finalResponse,
      recommendedModules,
      moduleDescriptions,
    };
  } catch (error) {
    console.error("AI Error:", error);
    return {
      response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
      recommendedModules: [],
  moduleDescriptions: {},
    };
  }
}