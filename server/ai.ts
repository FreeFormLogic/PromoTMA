import { GoogleGenAI } from "@google/genai";

const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

if (!GEMINI_API_KEY) {
  console.error('GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY || '' });

export async function generateAIResponse(
  messages: { role: 'user' | 'assistant'; content: string }[], 
  alreadyShownModules: number[] = []
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import('./storage');
    const allModules = await storage.getAllModules();
    
    const userText = messages.filter(m => m.role === 'user').map(m => m.content).join(' ');
    
    // –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª—è—Ö –¥–ª—è Gemini
    const modulesList = allModules
      .filter(m => !alreadyShownModules.includes(m.number))
      .map(m => `#${m.number}: ${m.name} - ${m.description} (${m.category})`)
      .join('\n');
    
    const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π. –ù–∞–π–¥–∏ 4 –ª—É—á—à–∏—Ö –º–æ–¥—É–ª—è –¥–ª—è "${userText}". ${alreadyShownModules.length > 0 ? `–ò—Å–∫–ª—é—á–∏: ${alreadyShownModules.join(', ')}` : ''}

–ú–æ–¥—É–ª–∏:
${modulesList}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–¥–ª–æ–∂–∏ 4 –º–æ–¥—É–ª—è! –ê–¥–∞–ø—Ç–∏—Ä—É–π –∏—Ö –ø–æ–¥ –±–∏–∑–Ω–µ—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ.

–§–æ—Ä–º–∞—Ç (–ë–ï–ó —ç–º–æ–¥–∑–∏):
[MODULE:225] - –ö–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
[MODULE:230] - –ö–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
[MODULE:232] - –ö–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
[MODULE:238] - –ö–∞–∫ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞`;

    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-exp", 
      contents: prompt,
    });

    const aiText = response.text || '';
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [MODULE:—á–∏—Å–ª–æ]
    const moduleMatches = aiText.match(/\[MODULE:(\d+)\]/g) || [];
    const recommendedModuleNumbers = moduleMatches
      .map(match => parseInt(match.match(/\d+/)?.[0] || '0'))
      .filter(num => num > 0)
      .filter((num, index, arr) => arr.indexOf(num) === index) // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      .filter(num => !alreadyShownModules.includes(num)) // –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ
      .slice(0, 4);

    console.log(`üèÜ Gemini recommended modules:`, recommendedModuleNumbers);
    
    return {
      response: aiText,
      recommendedModules: recommendedModuleNumbers
    };
  } catch (error) {
    console.log('üö® –û—à–∏–±–∫–∞ Gemini:', (error as Error).message);
    // –ü—Ä–æ—Å—Ç–æ–π fallback –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
    return {
      response: 'üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:\n\n[MODULE:224] [MODULE:225] [MODULE:236] [MODULE:237]',
      recommendedModules: [224, 225, 236, 237]
    };
  }
}