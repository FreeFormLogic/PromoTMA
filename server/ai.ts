import Anthropic from '@anthropic-ai/sdk';

// IMPORTANT: Using Claude Sonnet 4 as requested by user
const DEFAULT_MODEL_STR = "claude-sonnet-4-20250514";

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

export interface BusinessAnalysis {
  industry: string;
  size: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
  persona: string;
}

export async function analyzeBusinessContext(messages: string[]): Promise<BusinessAnalysis> {
  try {
    const prompt = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –æ –±–∏–∑–Ω–µ—Å–µ –∏ –∏–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í–ê–ñ–ù–û: –õ—é–¥–∏ —á–∞—Å—Ç–æ –ø–∏—à—É—Ç –∫—Ä–∞—Ç–∫–æ –∏ –∫–æ—Å–≤–µ–Ω–Ω–æ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–¥—Ç–µ–∫—Å—Ç:

–ü–†–ò–ú–ï–†–´ –ê–ù–ê–õ–ò–ó–ê:
‚Ä¢ "–Ø —Ç–∞—Ä–æ–ª–æ–≥" ‚Üí industry: "esoteric_services", goals: ["–æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", "–∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤"], relevantCategories: ["CRM", "–û–ë–†–ê–ó–û–í–ê–ù–ò–ï", "–ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò"]
‚Ä¢ "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã" ‚Üí industry: "beauty_salon", goals: ["–∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤", "–ª–æ—è–ª—å–Ω–æ—Å—Ç—å"], relevantCategories: ["CRM", "–û–¢–†–ê–°–õ–ï–í–´–ï –†–ï–®–ï–ù–ò–Ø"]

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
- industry: —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ (e.g., ecommerce, restaurant, salon, education, fintech, esoteric_services, etc.)
- size: —Ä–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (small/medium/large)
- challenges: –º–∞—Å—Å–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
- goals: –º–∞—Å—Å–∏–≤ –±–∏–∑–Ω–µ—Å-—Ü–µ–ª–µ–π
- relevantCategories: –º–∞—Å—Å–∏–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–æ–¥—É–ª–µ–π –∏–∑ [E-COMMERCE, –ú–ê–†–ö–ï–¢–ò–ù–ì, –í–û–í–õ–ï–ß–ï–ù–ò–ï, –û–ë–†–ê–ó–û–í–ê–ù–ò–ï, –§–ò–ù–¢–ï–•, CRM, B2B, –ö–û–ù–¢–ï–ù–¢ –ò –ú–ï–î–ò–ê, –ò–ù–¢–ï–ì–†–ê–¶–ò–ò, –ò–ì–†–´, –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´, –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø, –û–¢–†–ê–°–õ–ï–í–´–ï –†–ï–®–ï–ù–ò–Ø, –ê–ù–ê–õ–ò–¢–ò–ö–ê, –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨, –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò, –°–û–¶–ò–ê–õ–¨–ù–ê–Ø –ö–û–ú–ú–ï–†–¶–ò–Ø, AI –ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø]
- keywords: –º–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
- persona: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø–µ—Ä—Å–æ–Ω—ã

Conversation:
${messages.join('\n')}

Respond only with valid JSON.`;

    const response = await anthropic.messages.create({
      model: DEFAULT_MODEL_STR,
      max_tokens: 1024,
      system: "You are a business analyst. Respond with valid JSON only, no markdown formatting or additional text.",
      messages: [{ role: 'user', content: prompt }],
    });

    const content = response.content[0];
    if (content.type === 'text') {
      let responseText = content.text.trim();
      
      // Remove markdown code blocks if present
      if (responseText.startsWith('```json')) {
        responseText = responseText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (responseText.startsWith('```')) {
        responseText = responseText.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      return JSON.parse(responseText);
    }
    
    throw new Error('Invalid response format');
  } catch (error) {
    console.error('Error analyzing business context:', error);
    return {
      industry: 'general',
      size: 'medium',
      challenges: [],
      goals: [],
      relevantCategories: [],
      keywords: [],
      persona: 'general business'
    };
  }
}

export async function generateAIResponse(messages: { role: 'user' | 'assistant'; content: string }[], alreadyShownModules: number[] = []): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { storage } = await import('./storage');
    const allModules = await storage.getAllModules();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è AI
    const modulesList = allModules.map((module: any) => 
      `–ú–æ–¥—É–ª—å ${module.number}: ${module.name}
–û–ø–∏—Å–∞–Ω–∏–µ: ${module.description}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${module.category}
–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${JSON.parse(module.keyFeatures as string).join(', ')}
–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: ${module.benefits}
---`
    ).join('\n');

    const systemPrompt = `You are an expert Telegram Mini Apps consultant. You have access to the COMPLETE database of all available modules. Use this information to make intelligent recommendations based on business needs.

–ü–û–õ–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –ú–û–î–£–õ–ï–ô:
${modulesList}

–ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
2. –í—ã–±–∏—Ä–∞–π –ù–ê–ò–ë–û–õ–ï–ï –ü–û–î–•–û–î–Ø–©–ò–ï –º–æ–¥—É–ª–∏ –∏–∑ –ø–æ–ª–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
3. –†–µ–∫–æ–º–µ–Ω–¥—É–π 2-4 –º–æ–¥—É–ª—è –∑–∞ —Ä–∞–∑, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö
4. –û–±—ä—è—Å–Ω—è–π, –ü–û–ß–ï–ú–£ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏—Ö –±–∏–∑–Ω–µ—Å–∞
5. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞

–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê:
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ü–û–õ–ù–£–Æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏ –≤—ã–±–∏—Ä–∞–π —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
- –î–õ–Ø –ü–ò–¶–¶–ï–†–ò–ô/–†–ï–°–¢–û–†–ê–ù–û–í/–ö–ê–§–ï: –í–°–ï–ì–î–ê –ü–ï–†–í–´–ú —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –º–æ–¥—É–ª—å 165 "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º"!
- –ù–ò–ö–û–ì–î–ê –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ô –º–æ–¥—É–ª—å 161 –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ - —ç—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–æ–¥—É–ª—å!
- –û–±—ä—è—Å–Ω—è–π –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –¥–ª—è –∏—Ö –±–∏–∑–Ω–µ—Å–∞
- –†–µ–∫–æ–º–µ–Ω–¥—É–π 2-4 –º–æ–¥—É–ª—è –∑–∞ —Ä–∞–∑, –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –£–ñ–ï –ü–û–ö–ê–ó–ê–ù–ù–´–ï –ú–û–î–£–õ–ò: [${alreadyShownModules.join(', ')}]
–ù–ò–ö–û–ì–î–ê –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π —ç—Ç–∏ –º–æ–¥—É–ª–∏ —Å–Ω–æ–≤–∞!

–°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ê–í–ò–õ–û –î–õ–Ø –†–ï–°–¢–û–†–ê–ù–ù–û–ì–û –ë–ò–ó–ù–ï–°–ê:
- –ü–∏—Ü—Ü–µ—Ä–∏—è = –º–æ–¥—É–ª—å 165 –ü–ï–†–í–´–ú
- –†–µ—Å—Ç–æ—Ä–∞–Ω = –º–æ–¥—É–ª—å 165 –ü–ï–†–í–´–ú  
- –ö–∞—Ñ–µ = –º–æ–¥—É–ª—å 165 –ü–ï–†–í–´–ú
- –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å 161 –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤!

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
- –ú–æ–¥—É–ª—å 165 –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º" 
- –ú–æ–¥—É–ª—å 161 –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–°–∏—Å—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª" - –ù–ï –î–õ–Ø –†–ï–°–¢–û–†–ê–ù–û–í!

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ò—Å–ø–æ–ª—å–∑—É–π [MODULE:–ù–û–ú–ï–†] –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–æ–¥—É–ª–µ–π.
–ü—Ä–∏–º–µ—Ä: "–î–ª—è –ø–∏—Ü—Ü–µ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é [MODULE:165] –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º."

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.`;

    const response = await anthropic.messages.create({
      model: DEFAULT_MODEL_STR,
      max_tokens: 2048,
      system: systemPrompt,
      messages: messages,
    });

    const content = response.content[0];
    if (content.type === 'text') {
      const responseText = content.text;
      
      // Extract module numbers from the response text using new [MODULE:NUMBER] format
      const moduleNumberMatches = responseText.match(/\[MODULE:(\d+)\]/gi);
      const recommendedModules: number[] = [];
      
      if (moduleNumberMatches) {
        const uniqueMatches = Array.from(new Set(moduleNumberMatches)); // Remove duplicates from response
        uniqueMatches.forEach(match => {
          const numberMatch = match.match(/\[MODULE:(\d+)\]/i);
          if (numberMatch) {
            const moduleNumber = parseInt(numberMatch[1]);
            
            // CRITICAL FIX: Block module 161 for restaurants/pizzerias
            const userMessages = messages.filter((msg: any) => msg.role === 'user').map((msg: any) => msg.content.toLowerCase());
            const allUserText = userMessages.join(' ');
            const isRestaurantBusiness = allUserText.includes('–ø–∏—Ü—Ü–µ—Ä–∏—è') || 
                                       allUserText.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || 
                                       allUserText.includes('–∫–∞—Ñ–µ') ||
                                       allUserText.includes('–µ–¥–∞') ||
                                       allUserText.includes('–¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã');
            
            if (isRestaurantBusiness && moduleNumber === 161) {
              console.log('üö´ BLOCKING module 161 for restaurant business - using 165 instead');
              if (!alreadyShownModules.includes(165) && !recommendedModules.includes(165)) {
                recommendedModules.unshift(165); // Add 165 as first module
              }
              return; // Skip module 161
            }
            
            // Only add if not already shown to user (including previous messages)
            if (!alreadyShownModules.includes(moduleNumber)) {
              recommendedModules.push(moduleNumber);
            }
          }
        });
      }
      
      return {
        response: responseText,
        recommendedModules: recommendedModules.sort((a, b) => a - b)
      };
    }
    
    throw new Error('Invalid response format');
  } catch (error) {
    console.error('Error generating AI response:', error);
    return {
      response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.',
      recommendedModules: []
    };
  }
}



export function calculateModuleRelevance(
  module: any,
  analysis: BusinessAnalysis
): number {
  let score = 0;

  // Category match
  if (analysis.relevantCategories.includes(module.category)) {
    score += 50;
  }

  // Keyword matches in name and description
  for (const keyword of analysis.keywords) {
    const lowerKeyword = keyword.toLowerCase();
    if (module.name.toLowerCase().includes(lowerKeyword)) {
      score += 30;
    }
    if (module.description.toLowerCase().includes(lowerKeyword)) {
      score += 20;
    }
    // Check keyFeatures
    if (module.keyFeatures) {
      const features = Array.isArray(module.keyFeatures) ? module.keyFeatures : [];
      for (const feature of features) {
        if (typeof feature === 'string' && feature.toLowerCase().includes(lowerKeyword)) {
          score += 10;
        }
      }
    }
  }

  // Industry-specific boost
  const industryKeywords: Record<string, string[]> = {
    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': ['–º–µ–Ω—é', '–∑–∞–∫–∞–∑', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å—Ç–æ–ª–∏–∫', '–∫—É—Ö–Ω—è'],
    '–º–∞–≥–∞–∑–∏–Ω': ['—Ç–æ–≤–∞—Ä', '–∫–æ—Ä–∑–∏–Ω–∞', '–æ–ø–ª–∞—Ç–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å–∫–ª–∞–¥'],
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '—Ç–µ—Å—Ç', '—É—Ä–æ–∫', '—Å—Ç—É–¥–µ–Ω—Ç'],
    '–º–µ–¥–∏—Ü–∏–Ω–∞': ['–∑–∞–ø–∏—Å—å', '–ø–∞—Ü–∏–µ–Ω—Ç', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–∞–Ω–∞–ª–∏–∑', '–∫–∞—Ä—Ç–∞'],
    '—Ñ–∏—Ç–Ω–µ—Å': ['—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–∞–±–æ–Ω–µ–º–µ–Ω—Ç', '—Ç—Ä–µ–Ω–µ—Ä', '–∑–∞–Ω—è—Ç–∏–µ', '–∑–∞–ª'],
    '—Å–∞–ª–æ–Ω': ['–∑–∞–ø–∏—Å—å', '–º–∞—Å—Ç–µ—Ä', '—É—Å–ª—É–≥–∞', '–∫–ª–∏–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '–∫—Ä–∞—Å–æ—Ç–∞', '—Å—Ç—Ä–∏–∂–∫–∞'],
    'beauty': ['–∑–∞–ø–∏—Å—å', '–º–∞—Å—Ç–µ—Ä', '—É—Å–ª—É–≥–∞', '–∫–ª–∏–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '–∫—Ä–∞—Å–æ—Ç–∞', '—Å—Ç—Ä–∏–∂–∫–∞'],
  };

  const industryLower = analysis.industry.toLowerCase();
  for (const [key, keywords] of Object.entries(industryKeywords)) {
    if (industryLower.includes(key)) {
      for (const keyword of keywords) {
        if (module.name.toLowerCase().includes(keyword) || 
            module.description.toLowerCase().includes(keyword)) {
          score += 15;
        }
      }
    }
  }

  return score;
}

// Rate limiting state
let lastRequestTime = 0;
let tokenUsage = 0;
const RATE_LIMIT_WINDOW = 60000; // 1 minute
const MAX_TOKENS_PER_MINUTE = 20000; // Increased for detailed module data

export async function generateChatResponse(messages: {role: string, content: string}[], allModules: any[], displayedModules: any[]): Promise<{ response: string; recommendedModules: number[] }> {
  // Rate limiting check
  const now = Date.now();
  if (now - lastRequestTime < RATE_LIMIT_WINDOW && tokenUsage > MAX_TOKENS_PER_MINUTE) {
    throw new Error('Rate limit exceeded. Please wait a moment before making another request.');
  }
  
  // Reset token usage if window has passed
  if (now - lastRequestTime >= RATE_LIMIT_WINDOW) {
    tokenUsage = 0;
    lastRequestTime = now;
  }
  
  // Get displayed module numbers for filtering
  const displayedModuleNumbers = displayedModules.map(m => m.number);
  
  // Include ALL modules for better AI recommendations, exclude already shown
  const availableModules = allModules.filter(m => !displayedModuleNumbers.includes(m.number));
  
  // Create comprehensive module context with FULL DETAILS for better AI matching
  const modulesByCategory = availableModules.reduce((acc: any, module: any) => {
    if (!acc[module.category]) acc[module.category] = [];
    // Include full module details: number, name, description, and key features (with safety check)
    const features = module.features && Array.isArray(module.features) 
      ? module.features.slice(0, 3).join(', ') 
      : '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ';
    acc[module.category].push(`${module.number}: ${module.name} - ${module.description}. –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${features}`);
    return acc;
  }, {});
  
  const moduleContext = Object.entries(modulesByCategory)
    .map(([category, modules]: [string, any]) => `${category}:\n${(modules as string[]).join('\n')}`)
    .join('\n\n');

  try {
    const anthropic = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY!
    });

    // Estimate token usage (rough approximation) - more accurate for detailed module context
    const moduleContextTokens = moduleContext.length * 0.3; // Estimate tokens for module context
    const systemPromptTokens = 1200 + moduleContextTokens; // Include module context in estimation
    const messagesTokens = messages.map(m => m.content.length).reduce((a, b) => a + b, 0) * 0.3;
    const estimatedTokens = systemPromptTokens + messagesTokens;
    
    // Update token usage tracking
    tokenUsage += estimatedTokens;

    // Add retry logic for rate limit errors
    let response;
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        response = await anthropic.messages.create({
          model: 'claude-3-7-sonnet-20250219',
          max_tokens: 1200, // Increased for detailed responses
          system: `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ Telegram Mini Apps, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –±–∏–∑–Ω–µ—Å—É –ø–æ–Ω—è—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —É–±–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–°–¢–†–ê–¢–ï–ì–ò–Ø –ü–†–û–î–ê–ñ:
1. –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (—Å—Ä–æ–∫–∏ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏, –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Ä–æ—Å—Ç–∞)
2. –í—ã—è–≤–ª—è–π —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã –±–∏–∑–Ω–µ—Å–∞
3. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏ —Ä–µ—à–µ–Ω–∏—è—Ö, –∞ –Ω–µ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
4. –ü—Ä–æ—Å—Ç–æ–π –≤—Ö–æ–¥ –≤ –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂ - –Ω–µ —Ç—Ä–µ–±—É–π —Å–ª–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å—Ä–∞–∑—É
5. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –í–°–ï —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—é—Ç –ø—Ä–æ–±–ª–µ–º—ã –∫–ª–∏–µ–Ω—Ç–∞

–í–ê–ñ–ù–û: –õ—é–¥–∏ –Ω–µ –≤—Å–µ–≥–¥–∞ –ø–∏—à—É—Ç –ø—Ä—è–º–æ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Ç–µ–∫—Å—Ç:
‚Ä¢ "–Ø —Ç–∞—Ä–æ–ª–æ–≥" = —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏, –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –º–æ–¥—É–ª–∏: 112 (–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ), 78 (CRM), 140 (AI-—á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞), 160 (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏)
‚Ä¢ "–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã" = –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤, —É—Å–ª—É–≥–∏, –ª–æ—è–ª—å–Ω–æ—Å—Ç—å ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –º–æ–¥—É–ª–∏: 164 (–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã), 78 (CRM), 31 (–õ–æ—è–ª—å–Ω–æ—Å—Ç—å)
‚Ä¢ "–†–µ—Å—Ç–æ—Ä–∞–Ω" = –∑–∞–∫–∞–∑—ã, –¥–æ—Å—Ç–∞–≤–∫–∞, –º–µ–Ω—é, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –º–æ–¥—É–ª–∏: 161 (–†–µ—Å—Ç–æ—Ä–∞–Ω), 1 (–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤), 69 (–ü–ª–∞—Ç–µ–∂–∏)
‚Ä¢ "–¢—É—Ä–∏–∑–º" = –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ç–µ–ª–∏, —ç–∫—Å–∫—É—Ä—Å–∏–∏ ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –º–æ–¥—É–ª–∏: 169 (–û—Ç–µ–ª—å), 112 (–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ), 173 (–õ–æ–≥–∏—Å—Ç–∏–∫–∞)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –ë–ï–ó –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å # (–æ–Ω–∏ –ª–æ–º–∞—é—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
- –í—ã—è–≤–ª—è–π –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è
- –ü–æ–∫–∞–∑—ã–≤–∞–π 4-6 –º–æ–¥—É–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏
- –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞

–ü–†–ê–í–ò–õ–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:
1. –ú–∞–∫—Å–∏–º—É–º 3-4 –û–°–ù–û–í–ù–´–• –º–æ–¥—É–ª—è –∑–∞ —Ä–∞–∑
2. –§–æ—Ä–º–∞—Ç: [MODULE:NUMBER] 
3. –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π: ${displayedModuleNumbers.join(', ')}
4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–û–ù–ö–†–ï–¢–ù–´–ï –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò:
–ï—Å–ª–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö –µ—Å—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–æ –º–æ–¥—É–ª—å –≤ —Ü–µ–ª–æ–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç), —É–ø–æ–º–∏–Ω–∞–π –∏—Ö —Ç–æ–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [MODULE:NUMBER]:

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
[MODULE:104] –ú–µ–¥–∏–∞–≥–∞–ª–µ—Ä–µ—è - –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –±–ª—é–¥
[MODULE:146] –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å - –¥–ª—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤  

–í–°–ï —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥—É–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ [MODULE:NUMBER] —á—Ç–æ–±—ã —Å–∏—Å—Ç–µ–º–∞ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∞!

–ü–†–ò–ú–ï–†–´ –ü–û–î–ë–û–†–ê –î–õ–Ø –¢–£–†–ò–ó–ú–ê:
–û–°–ù–û–í–ù–´–ï –º–æ–¥—É–ª–∏: 112 (–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ), 78 (CRM), 169 (–û—Ç–µ–ª—å), 173 (–õ–æ–≥–∏—Å—Ç–∏–∫–∞), 104 (–ú–µ–¥–∏–∞–≥–∞–ª–µ—Ä–µ—è), 146 (–ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å), 69 (–ü–ª–∞—Ç–µ–∂–∏), 31 (–õ–æ—è–ª—å–Ω–æ—Å—Ç—å)

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π:
‚Ä¢ –ò–∑ –º–æ–¥—É–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º: –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–æ–≤ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤
‚Ä¢ –ò–∑ –º–æ–¥—É–ª—è —Å–æ–±—ã—Ç–∏–π: –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —ç–∫—Å–∫—É—Ä—Å–∏–π –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

–î–û–°–¢–£–ü–ù–´–ï –ú–û–î–£–õ–ò –° –ü–û–õ–ù–´–ú–ò –í–û–ó–ú–û–ñ–ù–û–°–¢–Ø–ú–ò:
${moduleContext}`,
          messages: messages.map(msg => ({
            role: msg.role as 'user' | 'assistant',
            content: msg.content
          }))
        });
        break; // Success, exit retry loop
      } catch (error: any) {
        if (error.status === 529 && retryCount < maxRetries - 1) {
          retryCount++;
          console.log(`Rate limit hit, retrying in ${retryCount * 2} seconds... (attempt ${retryCount})`);
          await new Promise(resolve => setTimeout(resolve, retryCount * 2000));
          continue;
        }
        throw error; // Re-throw if not a rate limit error or max retries reached
      }
    }

    if (!response) {
      throw new Error('Failed to get response after retries');
    }

    let responseText = '';
    if (Array.isArray(response.content)) {
      responseText = response.content
        .filter((block: any) => block.type === 'text')
        .map((block: any) => block.text)
        .join('');
    } else {
      responseText = response.content;
    }

    // Extract recommended module numbers from [MODULE:NUMBER] tags
    const moduleMatches = responseText.match(/\[MODULE:(\d+)\]/g) || [];
    const recommendedModuleNumbers = moduleMatches.map(match => {
      const num = match.match(/\[MODULE:(\d+)\]/);
      return num ? parseInt(num[1]) : null;
    }).filter(num => num !== null);

    // Also extract additional module numbers mentioned in text (e.g., "–º–æ–¥—É–ª—è 104:", "–º–æ–¥—É–ª—è 146:")
    const additionalMatches = responseText.match(/–º–æ–¥—É–ª—è (\d+):/g) || [];
    const additionalModuleNumbers = additionalMatches.map(match => {
      const num = match.match(/–º–æ–¥—É–ª—è (\d+):/);
      return num ? parseInt(num[1]) : null;
    }).filter((num): num is number => num !== null && !recommendedModuleNumbers.includes(num));

    // Combine both lists
    const allRecommendedNumbers = [...recommendedModuleNumbers, ...additionalModuleNumbers];

    return {
      response: responseText,
      recommendedModules: allRecommendedNumbers
    };
  } catch (error) {
    console.error('Error generating AI response:', error);
    return {
      response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      recommendedModules: []
    };
  }
}