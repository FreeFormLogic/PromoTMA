// –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini 2.5 Pro —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
const GEMINI_API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent";
const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

export interface BusinessAnalysis {
  industry: string;
  size: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
  persona: string;
}

export async function analyzeBusinessContext(messages: string[]): Promise<BusinessAnalysis> {
  try {
    const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –∏–∑–≤–ª–µ–∫–∏ –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê - –ò–ó–£–ß–ò–¢–¨ –ù–ò–®–£ –ö–õ–ò–ï–ù–¢–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏ –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
2. –í—ã—è–≤–∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏  
3. –ü–æ–π–º–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
4. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏

–ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –õ–Æ–ë–û–ô –ù–ò–®–ò:
‚Ä¢ **–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å**: –∑–∞–∫–∞–∑—ã, –¥–æ—Å—Ç–∞–≤–∫–∞, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ–Ω—é, –∫—É—Ö–Ω—è, –ø–µ—Ä—Å–æ–Ω–∞–ª
‚Ä¢ **–°–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã**: –∑–∞–ø–∏—Å—å, –º–∞—Å—Ç–µ—Ä–∞, —É—Å–ª—É–≥–∏, –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞, –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ **–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ**: –∫—É—Ä—Å—ã, —Å—Ç—É–¥–µ–Ω—Ç—ã, –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
‚Ä¢ **–ú–µ–¥–∏—Ü–∏–Ω–∞**: –ø–∞—Ü–∏–µ–Ω—Ç—ã, –∑–∞–ø–∏—Å–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –∫–∞—Ä—Ç—ã, –∞–Ω–∞–ª–∏–∑—ã
‚Ä¢ **–¢–æ—Ä–≥–æ–≤–ª—è**: —Ç–æ–≤–∞—Ä—ã, —Å–∫–ª–∞–¥, –ø—Ä–æ–¥–∞–∂–∏, –∫–ª–∏–µ–Ω—Ç—ã, –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
‚Ä¢ **–£—Å–ª—É–≥–∏**: –∫–ª–∏–µ–Ω—Ç—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ–º–∞–Ω–¥–∞, –æ–ø–ª–∞—Ç–∞
‚Ä¢ **–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ**: –∑–∞–∫–∞–∑—ã, —Å–∫–ª–∞–¥, –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –∫–∞—á–µ—Å—Ç–≤–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ **IT**: –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ–º–∞–Ω–¥–∞, –∑–∞–¥–∞—á–∏, –∫–ª–∏–µ–Ω—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚Ä¢ **–§–∏–Ω–∞–Ω—Å—ã**: –∫–ª–∏–µ–Ω—Ç—ã, —Å–¥–µ–ª–∫–∏, —Ä–∏—Å–∫–∏, –æ—Ç—á–µ—Ç—ã, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

–î–õ–Ø –ö–ê–ñ–î–û–ô –ù–ò–®–ò –ê–ù–ê–õ–ò–ó–ò–†–£–ô:
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ workflow
- –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞  
- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é

–í–µ—Ä–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π JSON:
- industry: —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏—à–∏
- size: —Ä–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ 
- challenges: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∏—à–∏
- goals: —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
- relevantCategories: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è —ç—Ç–æ–π –Ω–∏—à–∏
- keywords: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∏—à–∏
- persona: –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–†–∞–∑–≥–æ–≤–æ—Ä:
${messages.join('\n')}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    const response = await fetch(GEMINI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-goog-api-key': GEMINI_API_KEY!
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É. –ò–∑—É—á–∞–π –ª—é–±—É—é –Ω–∏—à—É –∏ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n${prompt}`
          }]
        }],
        generationConfig: {
          maxOutputTokens: 1200,
          temperature: 0.1
        }
      })
    });

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (content) {
      let responseText = content.trim();
      
      // Remove markdown code blocks if present
      if (responseText.startsWith('```json')) {
        responseText = responseText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (responseText.startsWith('```')) {
        responseText = responseText.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      return JSON.parse(responseText);
    }
    
    throw new Error('Invalid response format');
  } catch (error) {
    console.error('Error analyzing business context:', error);
    return {
      industry: 'general',
      size: 'medium',
      challenges: [],
      goals: [],
      relevantCategories: [],
      keywords: [],
      persona: 'general business'
    };
  }
}

export async function generateAIResponse(messages: { role: 'user' | 'assistant'; content: string }[], alreadyShownModules: number[] = []): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import('./storage');
    const allModules = await storage.getAllModules();
    console.log(`üîç AI processing ${allModules.length} modules`)
    
    // –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–¥—É–ª—è—Ö –¥–ª—è AI
    const modulesList = allModules.map(m => 
      `${m.number}: ${m.name} - ${m.description} (${m.category})`
    ).join('\n');

    const systemPrompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Telegram Mini Apps —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ –∏–∑ 260 –º–æ–¥—É–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–π 3-4 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥—É–ª—è.

–î–û–°–¢–£–ü–ù–´–ï –ú–û–î–£–õ–ò:
${modulesList}

–£–ñ–ï –ü–û–ö–ê–ó–ê–ù–ù–´–ï: [${alreadyShownModules.join(', ')}] - –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π!

–ü–†–ò–ù–¶–ò–ü–´ –ê–ù–ê–õ–ò–ó–ê:
‚Ä¢ –ò–∑—É—á–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –±–∏–∑–Ω–µ—Å–∞ –∏ –µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å—ã
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏
‚Ä¢ –ù–∞–π–¥–∏ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ—à–∞—é—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π –≥–µ–æ–≥—Ä–∞—Ñ–∏—é (–¥–ª—è –ò–Ω–¥–æ–Ω–µ–∑–∏–∏/–ë–∞–ª–∏ - –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
[MODULE:–ù–û–ú–ï–†] –ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π –ø–æ—Å–ª–µ [MODULE:X]
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã **, *, ** - 
- –ù–∞—á–∏–Ω–∞–π –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã
- –û–±—ä—è—Å–Ω—è–π –∏–º–µ–Ω–Ω–æ –ø–æ–ª—å–∑—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–ü–†–ê–í–ò–õ–¨–ù–û: "[MODULE:120] –ü–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –≤ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏ —Å–∏—Å—Ç–µ–º—É GoPay."
–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: "**[MODULE:120] –ù–∞–∑–≤–∞–Ω–∏–µ** - –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"

–û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.`;

    const apiResponse = await fetch(GEMINI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-goog-api-key': GEMINI_API_KEY!
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `${systemPrompt}\n\n–î–∏–∞–ª–æ–≥:\n${messages.map(msg => `${msg.role === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: ${msg.content}`).join('\n')}`
          }]
        }],
        generationConfig: {
          maxOutputTokens: 2048,
          temperature: 0.1
        }
      })
    });

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text();
      console.error('Gemini API Error:', apiResponse.status, errorText);
      throw new Error(`API failed: ${apiResponse.status} - ${errorText}`);
    }

    const apiData = await apiResponse.json();
    console.log('Full API Response:', JSON.stringify(apiData, null, 2));
    
    const aiContent = apiData.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (!aiContent) {
      console.error('No AI content found in response:', apiData);
      console.error('Candidates:', apiData.candidates);
      throw new Error('No AI response content');
    }
    
    console.log('AI Response Preview:', aiContent.substring(0, 100));
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    let cleanedContent = aiContent
      .replace(/\*\*\s*\[MODULE:(\d+)\]\s*([^*]+)\*\*\s*[:-]/gi, '[MODULE:$1]') // –£–±–∏—Ä–∞–µ–º **[MODULE:X] –ù–∞–∑–≤–∞–Ω–∏–µ** -
      .replace(/\*\s*\*\*\s*/g, '') // –£–±–∏—Ä–∞–µ–º * **
      .replace(/\*\*\s*-\s*/g, '') // –£–±–∏—Ä–∞–µ–º ** - 
      .replace(/\*\*([^*]+)\*\*:/g, '$1:') // –ó–∞–º–µ–Ω—è–µ–º **–¢–µ–∫—Å—Ç**: –Ω–∞ –¢–µ–∫—Å—Ç:
      .replace(/\n\*\s*\*\*/g, '\n') // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å * **
      .trim();
    
    const moduleMatches = cleanedContent.match(/\[MODULE:(\d+)\]/gi) || [];
    const recommendedModules: number[] = [];
    
    for (const match of moduleMatches) {
      const numberMatch = match.match(/\[MODULE:(\d+)\]/i);
      if (numberMatch) {
        const moduleNumber = parseInt(numberMatch[1]);
        if (!alreadyShownModules.includes(moduleNumber)) {
          recommendedModules.push(moduleNumber);
        }
      }
    }
    
    return {
      response: cleanedContent,
      recommendedModules: Array.from(new Set(recommendedModules)).sort((a, b) => a - b)
    };
  } catch (error) {
    console.error('AI Error:', error);
    return {
      response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.',
      recommendedModules: []
    };
  }
}



export function calculateModuleRelevance(
  module: any,
  analysis: BusinessAnalysis
): number {
  let score = 0;

  // Category match
  if (analysis.relevantCategories.includes(module.category)) {
    score += 50;
  }

  // Keyword matches in name and description
  for (const keyword of analysis.keywords) {
    const lowerKeyword = keyword.toLowerCase();
    if (module.name.toLowerCase().includes(lowerKeyword)) {
      score += 30;
    }
    if (module.description.toLowerCase().includes(lowerKeyword)) {
      score += 20;
    }
    // Check keyFeatures
    if (module.keyFeatures) {
      const features = Array.isArray(module.keyFeatures) ? module.keyFeatures : [];
      for (const feature of features) {
        if (typeof feature === 'string' && feature.toLowerCase().includes(lowerKeyword)) {
          score += 10;
        }
      }
    }
  }

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Ä–∞—Å–ª–µ–π
  const industryPatterns: Record<string, {
    keywords: string[];
    processes: string[];
    painPoints: string[];
    solutions: string[];
  }> = {
    // –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    '–º–µ–¥–∏—Ü–∏–Ω–∞': {
      keywords: ['–≤—Ä–∞—á', '–ø–∞—Ü–∏–µ–Ω—Ç', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–∞–Ω–∞–ª–∏–∑', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–ª–µ—á–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∞', '–∑–∞–ø–∏—Å—å', '–∫–ª–∏–Ω–∏–∫–∞', '–±–æ–ª—å–Ω–∏—Ü–∞'],
      processes: ['–ø—Ä–∏–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤', '–≤–µ–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç', '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '–∞–Ω–∞–ª–∏–∑—ã', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'],
      painPoints: ['–æ—á–µ—Ä–µ–¥–∏', '–ø–æ—Ç–µ—Ä—è –∫–∞—Ä—Ç', '–∑–∞–±—ã—Ç—ã–µ –∑–∞–ø–∏—Å–∏', '–ø–ª–æ—Ö–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è'],
      solutions: ['—Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '—Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∞']
    },
    
    // –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å
    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': {
      keywords: ['–º–µ–Ω—é', '–∑–∞–∫–∞–∑', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å—Ç–æ–ª–∏–∫', '–∫—É—Ö–Ω—è', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç', '–±–ª—é–¥–æ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–µ–¥–∞'],
      processes: ['–ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤', '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–æ–ø–ª–∞—Ç–∞'],
      painPoints: ['–¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ', '–æ—à–∏–±–∫–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö', '–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ç–æ–ª–∏–∫–æ–≤', '—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π'],
      solutions: ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –º–µ–Ω—é', '—Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç—Ä–µ–∫–∏–Ω–≥ –¥–æ—Å—Ç–∞–≤–∫–∏']
    },
    
    // –°–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã
    '—Å–∞–ª–æ–Ω': {
      keywords: ['–º–∞—Å—Ç–µ—Ä', '—É—Å–ª—É–≥–∞', '–∫–ª–∏–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '–∫—Ä–∞—Å–æ—Ç–∞', '—Å—Ç—Ä–∏–∂–∫–∞', '–º–∞–Ω–∏–∫—é—Ä', '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è', '–∑–∞–ø–∏—Å—å'],
      processes: ['–∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤', '–æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥', '—É—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', '—Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π'],
      painPoints: ['–ø—É—Ç–∞–Ω–∏—Ü–∞ –≤ –∑–∞–ø–∏—Å—è—Ö', '–ø—Ä–æ—Å—Ç–æ–∏ –º–∞—Å—Ç–µ—Ä–æ–≤', '–∑–∞–±—ã—Ç—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', '—É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤'],
      solutions: ['—Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'CRM', '—Å–∫–ª–∞–¥—Å–∫–æ–π —É—á–µ—Ç']
    },
    
    // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': {
      keywords: ['–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '—Ç–µ—Å—Ç', '—É—Ä–æ–∫', '—Å—Ç—É–¥–µ–Ω—Ç', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–∑–Ω–∞–Ω–∏—è', '—ç–∫–∑–∞–º–µ–Ω', '—É—á–µ–±–∞'],
      processes: ['–æ–±—É—á–µ–Ω–∏–µ', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–≤—ã–¥–∞—á–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤', '–ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'],
      painPoints: ['–Ω–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å', '—Å–ª–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', '–±—É–º–∞–∂–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å'],
      solutions: ['–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞']
    },
    
    // –¢–æ—Ä–≥–æ–≤–ª—è –∏ e-commerce
    '—Ç–æ—Ä–≥–æ–≤–ª—è': {
      keywords: ['—Ç–æ–≤–∞—Ä', '–∫–æ—Ä–∑–∏–Ω–∞', '–æ–ø–ª–∞—Ç–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å–∫–ª–∞–¥', '–ø—Ä–æ–¥–∞–∂–∞', '–º–∞–≥–∞–∑–∏–Ω', '–∫–ª–∏–µ–Ω—Ç', '–∑–∞–∫–∞–∑'],
      processes: ['–ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π', '—Å–±–æ—Ä–∫–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤–æ–∑–≤—Ä–∞—Ç—ã'],
      painPoints: ['–±—Ä–æ—à–µ–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã', '–æ—à–∏–±–∫–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö', '–ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π', '–≤–æ–∑–≤—Ä–∞—Ç—ã'],
      solutions: ['—É–º–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤', '—Ç—Ä–µ–∫–∏–Ω–≥ –¥–æ—Å—Ç–∞–≤–∫–∏', '—Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤']
    },
    
    // –£—Å–ª—É–≥–∏ –∏ —Å–µ—Ä–≤–∏—Å
    '—É—Å–ª—É–≥–∏': {
      keywords: ['–∫–ª–∏–µ–Ω—Ç', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ø—Ä–æ–µ–∫—Ç', '–∫–æ–º–∞–Ω–¥–∞', '–æ–ø–ª–∞—Ç–∞', '–∑–∞–¥–∞—á–∞', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '—Å–µ—Ä–≤–∏—Å'],
      processes: ['–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤', '—Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏', '–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤', '–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å'],
      painPoints: ['—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º', '–ø–æ—Ç–µ—Ä—è –∫–ª–∏–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏'],
      solutions: ['CRM', '–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—á–µ—Ç–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞']
    },
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': {
      keywords: ['–∑–∞–∫–∞–∑', '—Å–∫–ª–∞–¥', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '–∫–∞—á–µ—Å—Ç–≤–æ', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–ø–æ—Å—Ç–∞–≤–∫–∞', '–º–∞—Ç–µ—Ä–∏–∞–ª'],
      processes: ['–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '–∑–∞–∫—É–ø–∫–∏', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞', '–æ—Ç–≥—Ä—É–∑–∫–∞'],
      painPoints: ['–ø—Ä–æ—Å—Ç–æ–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', '–Ω–µ—Ö–≤–∞—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', '–±—Ä–∞–∫', '—Å—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫'],
      solutions: ['–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º', '–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞']
    },
    
    // IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    'it': {
      keywords: ['–ø—Ä–æ–µ–∫—Ç', '–∫–æ–º–∞–Ω–¥–∞', '–∑–∞–¥–∞—á–∞', '–∫–ª–∏–µ–Ω—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      processes: ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥–µ–ø–ª–æ–π', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      painPoints: ['—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π', '–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã', '–±–∞–≥–∏', '—Ç–µ—Ö–¥–æ–ª–≥'],
      solutions: ['—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏', '—Ç—Ä–µ–∫–∏–Ω–≥ –±–∞–≥–æ–≤', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']
    },
    
    // –§–∏–Ω–∞–Ω—Å—ã
    '—Ñ–∏–Ω–∞–Ω—Å—ã': {
      keywords: ['–∫–ª–∏–µ–Ω—Ç', '—Å–¥–µ–ª–∫–∞', '—Ä–∏—Å–∫', '–æ—Ç—á–µ—Ç', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–±–∞–Ω–∫', '–∫—Ä–µ–¥–∏—Ç'],
      processes: ['–∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–æ–∫', '–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', '–∫–æ–º–ø–ª–∞–µ–Ω—Å'],
      painPoints: ['—Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', '—Ä–∏—Å–∫–∏', '—Å–ª–æ–∂–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', '–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ'],
      solutions: ['–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤', '–∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤', '–∞–Ω—Ç–∏—Ñ—Ä–æ–¥', '–∫–æ–º–ø–ª–∞–µ–Ω—Å']
    },
    
    // –¢—É—Ä–∏–∑–º –∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
    '—Ç—É—Ä–∏–∑–º': {
      keywords: ['—Ç—É—Ä', '–æ—Ç–µ–ª—å', '–±–∏–ª–µ—Ç', '—ç–∫—Å–∫—É—Ä—Å–∏—è', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '—Ç—É—Ä–≤–∏–∑–æ—Ä', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–≤–∏–∑–∞', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–≥–∏–¥', '—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      processes: ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–æ–≤', '–ø—Ä–æ–¥–∞–∂–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π', '—Ä–∞–±–æ—Ç–∞ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', '–ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π', '–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã'],
      painPoints: ['—Å–ª–æ–∂–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç—É—Ä–≤–∏–∑–æ—Ä', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', '–≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', '–¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è'],
      solutions: ['–∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '—Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫–≤–∞–π—Ä–∏–Ω–≥', 'CRM —Ç—É—Ä–∏—Å—Ç–æ–≤', '–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']
    },
    '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π': {
      keywords: ['—Ç—É—Ä', '–æ—Ç–µ–ª—å', '–±–∏–ª–µ—Ç', '—ç–∫—Å–∫—É—Ä—Å–∏—è', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '—Ç—É—Ä–≤–∏–∑–æ—Ä', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–≤–∏–∑–∞', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–≥–∏–¥', '—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      processes: ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–æ–≤', '–ø—Ä–æ–¥–∞–∂–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π', '—Ä–∞–±–æ—Ç–∞ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', '–ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π', '–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã'],
      painPoints: ['—Å–ª–æ–∂–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç—É—Ä–≤–∏–∑–æ—Ä', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', '–≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', '–¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è'],
      solutions: ['–∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '—Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫–≤–∞–π—Ä–∏–Ω–≥', 'CRM —Ç—É—Ä–∏—Å—Ç–æ–≤', '–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']
    },
    
    // –û—Ç–µ–ª–∏ –∏ –≥–æ—Å—Ç–∏–Ω–∏—á–Ω—ã–π –±–∏–∑–Ω–µ—Å
    '–æ—Ç–µ–ª—å': {
      keywords: ['–Ω–æ–º–µ—Ä', '–≥–æ—Å—Ç—å', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∑–∞–µ–∑–¥', '–≤—ã–µ–∑–¥', '—Ä–µ—Ü–µ–ø—Ü–∏—è', '–≥–æ—Ä–Ω–∏—á–Ω–∞—è', '–æ—Ç–µ–ª—å', '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ', '–∑–∞—Å–µ–ª–µ–Ω–∏–µ', '–∑–∞–≤—Ç—Ä–∞–∫', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', 'room service', 'housekeeping'],
      processes: ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤', '–∑–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–π', '—É–±–æ—Ä–∫–∞ –Ω–æ–º–µ—Ä–æ–≤', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–π', '–≤–µ–¥–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤', '—Ä–∞–±–æ—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', '—ç–∫—Å–∫—É—Ä—Å–∏–∏'],
      painPoints: ['overbooking', 'no-show –≥–æ—Å—Ç–∏', '–∂–∞–ª–æ–±—ã –≥–æ—Å—Ç–µ–π', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞', '—Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º'],
      solutions: ['—Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–Ω—ã–º —Ñ–æ–Ω–¥–æ–º', 'CRM –≥–æ—Å—Ç–µ–π', '–º–æ–±–∏–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è check-in/out', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º']
    },
    '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞': {
      keywords: ['–Ω–æ–º–µ—Ä', '–≥–æ—Å—Ç—å', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∑–∞–µ–∑–¥', '–≤—ã–µ–∑–¥', '—Ä–µ—Ü–µ–ø—Ü–∏—è', '–≥–æ—Ä–Ω–∏—á–Ω–∞—è', '–æ—Ç–µ–ª—å', '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞', '–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ', '–∑–∞—Å–µ–ª–µ–Ω–∏–µ', '–∑–∞–≤—Ç—Ä–∞–∫', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', 'room service', 'housekeeping'],
      processes: ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤', '–∑–∞—Å–µ–ª–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–π', '—É–±–æ—Ä–∫–∞ –Ω–æ–º–µ—Ä–æ–≤', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–π', '–≤–µ–¥–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤', '—Ä–∞–±–æ—Ç–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞', '—ç–∫—Å–∫—É—Ä—Å–∏–∏'],
      painPoints: ['overbooking', 'no-show –≥–æ—Å—Ç–∏', '–∂–∞–ª–æ–±—ã –≥–æ—Å—Ç–µ–π', '–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞', '—Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º'],
      solutions: ['—Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–Ω—ã–º —Ñ–æ–Ω–¥–æ–º', 'CRM –≥–æ—Å—Ç–µ–π', '–º–æ–±–∏–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è check-in/out', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º']
    }
  };

  const industryLower = analysis.industry.toLowerCase();
  
  // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç—Ä–∞—Å–ª–∏
  for (const [industryKey, industryData] of Object.entries(industryPatterns)) {
    if (industryLower.includes(industryKey)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Ä–∞—Å–ª–∏
      for (const keyword of industryData.keywords) {
        if (module.name.toLowerCase().includes(keyword) || 
            module.description.toLowerCase().includes(keyword)) {
          score += 20;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Ç—Ä–∞—Å–ª–∏
      for (const process of industryData.processes) {
        if (module.name.toLowerCase().includes(process) || 
            module.description.toLowerCase().includes(process)) {
          score += 25;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
      for (const solution of industryData.solutions) {
        if (module.name.toLowerCase().includes(solution) || 
            module.description.toLowerCase().includes(solution)) {
          score += 30;
        }
      }
    }
  }

  // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ú–û–î–£–õ–Ø –ù–ò–®–ï
  // –ì–ª—É–±–æ–∫–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –±–∏–∑–Ω–µ—Å–∞ vs –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è
  
  // 1. –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  const businessProcesses = analysis.keywords.concat(analysis.keywords); // Fixed: removed undefined painPoints
  const moduleCapabilities = [
    module.name.toLowerCase(),
    module.description.toLowerCase(),
    ...(module.features || []).map((f: any) => f.toLowerCase()),
    ...(module.benefits || '').toLowerCase().split(' ')
  ];
  
  // 2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  let processMatchScore = 0;
  for (const process of businessProcesses) {
    for (const capability of moduleCapabilities) {
      if (capability.includes(process.toLowerCase()) || 
          process.toLowerCase().includes(capability)) {
        processMatchScore += 15;
      }
    }
  }
  
  // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ—à–µ–Ω–∏—è –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
  let painPointScore = 0;
  for (const pain of analysis.keywords) { // Fixed: use keywords instead of non-existent painPoints
    for (const capability of moduleCapabilities) {
      if (capability.includes(pain.toLowerCase()) || 
          pain.toLowerCase().includes(capability)) {
        painPointScore += 25; // –ë–æ–ª—å—à–∏–π –≤–µ—Å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
      }
    }
  }
  
  // 4. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  let categoryScore = 0;
  const industryCategories = {
    '—Ç—É—Ä–∏–∑–º': ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'crm', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', '–ø–ª–∞—Ç–µ–∂–∏'],
    '–º–µ–¥–∏—Ü–∏–Ω–∞': ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'crm', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞'],
    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': ['e-commerce', '–ø–ª–∞—Ç–µ–∂–∏', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞'],
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–µ—Å—Å', '–∫–æ–Ω—Ç–µ–Ω—Ç'],
    '—Å–∞–ª–æ–Ω': ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'crm', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ª–æ—è–ª—å–Ω–æ—Å—Ç—å'],
    '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': ['–∑–∞–¥–∞—á–∏', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'],
    '—Ñ–∏–Ω–∞–Ω—Å—ã': ['–ø–ª–∞—Ç–µ–∂–∏', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏']
  };
  
  for (const [industry, relevantCategories] of Object.entries(industryCategories)) {
    if (industryLower.includes(industry)) {
      for (const category of relevantCategories) {
        if (module.category.toLowerCase().includes(category) ||
            module.name.toLowerCase().includes(category) ||
            module.description.toLowerCase().includes(category)) {
          categoryScore += 20;
        }
      }
    }
  }
  
  score += processMatchScore + painPointScore + categoryScore;

  return score;
}

// Rate limiting state
let lastRequestTime = 0;
let tokenUsage = 0;
const RATE_LIMIT_WINDOW = 60000; // 1 minute
const MAX_TOKENS_PER_MINUTE = 20000; // Increased for detailed module data

export async function generateChatResponse(messages: {role: string, content: string}[], allModules: any[], displayedModules: any[]): Promise<{ response: string; recommendedModules: number[] }> {
  // Rate limiting check
  const now = Date.now();
  if (now - lastRequestTime < RATE_LIMIT_WINDOW && tokenUsage > MAX_TOKENS_PER_MINUTE) {
    throw new Error('Rate limit exceeded. Please wait a moment before making another request.');
  }
  
  // Reset token usage if window has passed
  if (now - lastRequestTime >= RATE_LIMIT_WINDOW) {
    tokenUsage = 0;
    lastRequestTime = now;
  }
  
  // Get displayed module numbers for filtering
  const displayedModuleNumbers = displayedModules.map(m => m.number);
  
  // –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ú–û–î–£–õ–ï–ô –î–õ–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –ü–û–î–ë–û–†–ê
  const availableModules = allModules.filter(m => !displayedModuleNumbers.includes(m.number));
  
  // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥—É–ª–µ–π —Å –ü–û–õ–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è —É–º–Ω–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  const modulesByCategory = availableModules.reduce((acc: any, module: any) => {
    if (!acc[module.category]) acc[module.category] = [];
    
    // –í–∫–ª—é—á–∞–µ–º –í–°–ï –¥–µ—Ç–∞–ª–∏ –º–æ–¥—É–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    const features = Array.isArray(module.keyFeatures) 
      ? module.keyFeatures.slice(0, 4).join(' | ') 
      : Array.isArray(module.features)
      ? module.features.slice(0, 4).join(' | ')
      : module.keyFeatures || '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–∞–∑–µ';
    
    const benefits = module.benefits || '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É–∫–∞–∑–∞–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏';
    
    // –î–ï–¢–ê–õ–¨–ù–ê–Ø –ó–ê–ü–ò–°–¨ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –ò–ò
    acc[module.category].push(
      `#${module.number}: ${module.name}\n` +
      `–û–ø–∏—Å–∞–Ω–∏–µ: ${module.description}\n` +
      `–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${features}\n` +
      `–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: ${benefits}`
    );
    return acc;
  }, {});
  
  const moduleContext = Object.entries(modulesByCategory)
    .map(([category, modules]: [string, any]) => `${category}:\n${(modules as string[]).join('\n')}`)
    .join('\n\n');

  try {

    // Estimate token usage (rough approximation) - more accurate for detailed module context
    const moduleContextTokens = moduleContext.length * 0.3; // Estimate tokens for module context
    const systemPromptTokens = 1200 + moduleContextTokens; // Include module context in estimation
    const messagesTokens = messages.map(m => m.content.length).reduce((a, b) => a + b, 0) * 0.3;
    const estimatedTokens = systemPromptTokens + messagesTokens;
    
    // Update token usage tracking
    tokenUsage += estimatedTokens;

    // Add retry logic for rate limit errors
    let response;
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        const geminiResponse = await fetch(GEMINI_API_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-goog-api-key': GEMINI_API_KEY!
          },
          body: JSON.stringify({
            contents: [{
              parts: [{
                text: `–¢—ã ‚Äî –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –≠–ö–°–ü–ï–†–¢-–ê–ù–ê–õ–ò–¢–ò–ö –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –õ–Æ–ë–û–ô –Ω–∏—à–∏ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –∏–∑ 260+ –º–æ–¥—É–ª–µ–π.

üß† –¢–í–û–Ø –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:

1. **–ì–õ–£–ë–û–ö–û–ï –ò–ó–£–ß–ï–ù–ò–ï –ù–ò–®–ò –ö–õ–ò–ï–ù–¢–ê**:
   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç—Ä–∞—Å–ª–µ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
   - –í—ã—è–≤–ª—è—é –∫–ª—é—á–µ–≤—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å  
   - –û–ø—Ä–µ–¥–µ–ª—è—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
   - –ü–æ–Ω–∏–º–∞—é –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é –∏ –º–æ–¥–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞
   - –ò–∑—É—á–∞—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏

2. **–î–ï–¢–ê–õ–¨–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ú–û–î–£–õ–ï–ô**:
   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–∂–¥—ã–π –∏–∑ 260+ –º–æ–¥—É–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   - –ò–∑—É—á–∞—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
   - –ü–æ–Ω–∏–º–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   - –û—Ü–µ–Ω–∏–≤–∞—é –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∫ —Ä–∞–∑–Ω—ã–º –Ω–∏—à–∞–º
   - –í—ã—è–≤–ª—è—é —Å–∏–Ω–µ—Ä–≥–∏–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏

3. **–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï**:
   - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã ‚Üî —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
   - –†–µ—à–µ–Ω–∏–µ –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫: –ø—Ä–æ–±–ª–µ–º—ã ‚Üî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π  
   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: –æ—Ç—Ä–∞—Å–ª—å ‚Üî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
   - –°–∏–Ω–µ—Ä–≥–∏—è –º–æ–¥—É–ª–µ–π: –∫–∞–∫ –æ–Ω–∏ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
   - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∏—à–∏

4. **–°–¢–†–ê–¢–ï–ì–ò–Ø –ö–û–ù–°–£–õ–¨–¢–ò–†–û–í–ê–ù–ò–Ø**:
   - –ò–∑—É—á–∞—é –Ω–∏—à—É –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   - –ù–∞—Ö–æ–∂—É 3-5 –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –æ—Ç—Ä–∞—Å–ª–∏  
   - –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–æ–¥—É–ª–∏ –∏–∑ –±–∞–∑—ã
   - –ü–æ–∫–∞–∑—ã–≤–∞—é –±–∏–∑–Ω–µ—Å-—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏
   - –ì–æ–≤–æ—Ä—é –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —è–∑—ã–∫–µ –Ω–∏—à–∏

5. **–ü–†–ê–í–ò–õ–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô**:
   - –ú–∞–∫—Å–∏–º—É–º 4 –û–°–ù–û–í–ù–´–• –º–æ–¥—É–ª—è –∑–∞ —Ä–∞–∑
   - –§–æ—Ä–º–∞—Ç: [MODULE:NUMBER]
   - –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π: ${displayedModuleNumbers.join(', ')}
   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è

5. **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–Ø**:
   - –ë–ï–ó –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ # (–ª–æ–º–∞—é—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
   - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∏—à–∏
   - –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –±–∏–∑–Ω–µ—Å-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
   - –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö

üéØ **–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ü–û–î–ë–û–†–ê**:

1Ô∏è‚É£ **–ò–ó–£–ß–ê–Æ –í–ê–®–£ –ù–ò–®–£**: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –æ—Ç—Ä–∞—Å–ª–∏, –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏
2Ô∏è‚É£ **–°–ö–ê–ù–ò–†–£–Æ –í–°–ï 260+ –ú–û–î–£–õ–ï–ô**: –î–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∞—é —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö  
3Ô∏è‚É£ **–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï**: –ù–∞—Ö–æ–∂—É –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏–π
4Ô∏è‚É£ **–†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ü–û –í–ê–ñ–ù–û–°–¢–ò**: –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É—é –º–æ–¥—É–ª–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

**–ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨ –ü–û–î –õ–Æ–ë–£–Æ –ù–ò–®–£**:
- üè• **–ú–µ–¥–∏—Ü–∏–Ω–∞**: –∑–∞–ø–∏—Å–∏ ‚Üí –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∞—Ü–∏–µ–Ω—Ç—ã ‚Üí CRM, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Üí —á–∞—Ç
- üçï **HoReCa**: –∑–∞–∫–∞–∑—ã ‚Üí –∫–∞—Ç–∞–ª–æ–≥, –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Üí –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –∫–ª–∏–µ–Ω—Ç—ã ‚Üí –ª–æ—è–ª—å–Ω–æ—Å—Ç—å  
- üèñÔ∏è **–¢—É—Ä–∏–∑–º**: —Ç—É—Ä—ã ‚Üí –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç—É—Ä–≤–∏–∑–æ—Ä ‚Üí –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, —Ç—É—Ä–∏—Å—Ç—ã ‚Üí CRM
- üéì **–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ**: –∫—É—Ä—Å—ã ‚Üí –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —Å—Ç—É–¥–µ–Ω—Ç—ã ‚Üí –ø—Ä–æ–≥—Ä–µ—Å—Å, –∑–Ω–∞–Ω–∏—è ‚Üí —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- üíº **B2B**: –ø—Ä–æ–µ–∫—Ç—ã ‚Üí –∑–∞–¥–∞—á–∏, –∫–æ–º–∞–Ω–¥–∞ ‚Üí –ø–æ—Ä—Ç–∞–ª, –∫–ª–∏–µ–Ω—Ç—ã ‚Üí –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- üè≠ **–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ**: –∑–∞–∫–∞–∑—ã ‚Üí –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∫–ª–∞–¥ ‚Üí –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –∫–∞—á–µ—Å—Ç–≤–æ ‚Üí –∫–æ–Ω—Ç—Ä–æ–ª—å

**–ì–õ–£–ë–ò–ù–ê –ê–ù–ê–õ–ò–ó–ê**: –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ 15+ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º

**–ê–î–ê–ü–¢–ò–†–£–ô–°–Ø –ö –õ–Æ–ë–û–ô –ù–ò–®–ï**:
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∏–∑ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–π –æ—Ç—Ä–∞—Å–ª–∏ - –±—ã—Å—Ç—Ä–æ –∏–∑—É—á–∏ –µ–µ:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
2. –ù–∞–π–¥–∏ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∏—à–∏
3. –ü–æ–¥–±–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
4. –ì–æ–≤–æ—Ä–∏ –Ω–∞ —è–∑—ã–∫–µ –æ—Ç—Ä–∞—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
5. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö

–í–°–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [MODULE:NUMBER] –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!

–î–û–°–¢–£–ü–ù–´–ï –ú–û–î–£–õ–ò:
${moduleContext}

–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
${messages.map(msg => `${msg.role === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}: ${msg.content}`).join('\n')}`
              }]
            }],
            generationConfig: {
              maxOutputTokens: 2000,
              temperature: 0.3
            }
          })
        });
        
        const geminiData = await geminiResponse.json();
        response = geminiData;
        break; // Success, exit retry loop
      } catch (error: any) {
        if (error.status === 429 && retryCount < maxRetries - 1) {
          retryCount++;
          console.log(`Rate limit hit, retrying in ${retryCount * 2} seconds... (attempt ${retryCount})`);
          await new Promise(resolve => setTimeout(resolve, retryCount * 2000));
          continue;
        }
        throw error; // Re-throw if not a rate limit error or max retries reached
      }
    }

    if (!response) {
      throw new Error('Failed to get response after retries');
    }

    const responseText = response.candidates?.[0]?.content?.parts?.[0]?.text || '';

    // Extract recommended module numbers from [MODULE:NUMBER] tags
    const moduleMatches = responseText.match(/\[MODULE:(\d+)\]/g) || [];
    const recommendedModuleNumbers = moduleMatches.map((match: string) => {
      const num = match.match(/\[MODULE:(\d+)\]/);
      return num ? parseInt(num[1]) : null;
    }).filter((num: number | null): num is number => num !== null);

    // Also extract additional module numbers mentioned in text (e.g., "–º–æ–¥—É–ª—è 104:", "–º–æ–¥—É–ª—è 146:")
    const additionalMatches = responseText.match(/–º–æ–¥—É–ª—è (\d+):/g) || [];
    const additionalModuleNumbers = additionalMatches.map((match: string) => {
      const num = match.match(/–º–æ–¥—É–ª—è (\d+):/);
      return num ? parseInt(num[1]) : null;
    }).filter((num: number | null): num is number => num !== null && !recommendedModuleNumbers.includes(num));

    // Combine both lists
    const allRecommendedNumbers = [...recommendedModuleNumbers, ...additionalModuleNumbers];

    return {
      response: responseText,
      recommendedModules: allRecommendedNumbers
    };
  } catch (error) {
    console.error('Error generating AI response:', error);
    return {
      response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      recommendedModules: []
    };
  }
}