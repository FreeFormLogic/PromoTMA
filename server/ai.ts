// –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini 2.5 Pro —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent";
const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

export interface BusinessAnalysis {
  industry: string;
  size: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
  persona: string;
}

export async function analyzeBusinessContext(
  messages: string[],
): Promise<BusinessAnalysis> {
  try {
    const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –∏–∑–≤–ª–µ–∫–∏ –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê - –ò–ó–£–ß–ò–¢–¨ –ù–ò–®–£ –ö–õ–ò–ï–ù–¢–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏ –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
2. –í—ã—è–≤–∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
3. –ü–æ–π–º–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
4. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏

–ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –õ–Æ–ë–û–ô –ù–ò–®–ò

–î–õ–Ø –ö–ê–ñ–î–û–ô –ù–ò–®–ò –ê–ù–ê–õ–ò–ó–ò–†–£–ô:
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ workflow
- –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é

–í–µ—Ä–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π JSON:
- industry: —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏—à–∏
- size: —Ä–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞
- challenges: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∏—à–∏
- goals: —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
- relevantCategories: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è —ç—Ç–æ–π –Ω–∏—à–∏
- keywords: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∏—à–∏
- persona: –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–†–∞–∑–≥–æ–≤–æ—Ä:
${messages.join("\n")}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    const response = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É. –ò–∑—É—á–∞–π –ª—é–±—É—é –Ω–∏—à—É –∏ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n${prompt}`,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: 1200,
          temperature: 0.1,
        },
      }),
    });

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (content) {
      let responseText = content.trim();

      // Remove markdown code blocks if present
      if (responseText.startsWith("```json")) {
        responseText = responseText
          .replace(/^```json\s*/, "")
          .replace(/\s*```$/, "");
      } else if (responseText.startsWith("```")) {
        responseText = responseText
          .replace(/^```\s*/, "")
          .replace(/\s*```$/, "");
      }

      return JSON.parse(responseText);
    }

    throw new Error("Invalid response format");
  } catch (error) {
    console.error("Error analyzing business context:", error);
    return {
      industry: "general",
      size: "medium",
      challenges: [],
      goals: [],
      relevantCategories: [],
      keywords: [],
      persona: "general business",
    };
  }
}

export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import("./storage");
    const allModules = await storage.getAllModules();
    console.log(`üîç AI processing ${allModules.length} modules`);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø—Ä–æ–º–ø—Ç
    const modulesDatabase = allModules
      .map(
        (m) =>
          `Module ${m.id}: ${m.title} - ${m.features.join(" ")} - ${
            m.description
          }`,
      )
      .join("\n");

    const systemPrompt = `
–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ–∫–ª–∞—Å—Å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –±–∞–∑—É –º–æ–¥—É–ª–µ–π, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–º—É —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—à–µ–Ω–∏—è.

**–ë–ê–ó–ê –î–û–°–¢–£–ü–ù–´–• –ú–û–î–£–õ–ï–ô:**
---
${modulesDatabase}
---

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:**

1.  **–ò–∑—É—á–∏ –¥–∏–∞–ª–æ–≥:** –ü–æ–π–º–∏ —Å—É—Ç—å –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞, –µ–≥–æ —Ü–µ–ª–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã.
2.  **–í—ã–±–µ—Ä–∏ –ª—É—á—à–µ–µ:** –ò–∑ –ë–ê–ó–´ –ú–û–î–£–õ–ï–ô –≤—ã—à–µ –≤—ã–±–µ—Ä–∏ 3-5 —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –º–æ–¥—É–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.
3.  **–ü–µ—Ä–µ–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ:** –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (–¥–æ 20 —Å–ª–æ–≤), –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –±–∏–∑–Ω–µ—Å—É –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ—à–∏—Ç –µ–≥–æ –∑–∞–¥–∞—á—É.

**–°–ê–ú–´–ï –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:**

-   –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å **–¢–û–õ–¨–ö–û** –∏–∑ —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ \`[MODULE:–ù–û–ú–ï–†] –¢–≤–æ–π –Ω–æ–≤—ã–π, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\`.
-   **–û–ü–ò–°–ê–ù–ò–ï –í–°–ï–ì–î–ê –ò–î–ï–¢ –ü–û–°–õ–ï ID –ú–û–î–£–õ–Ø.**
-   –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π ("–í–æ—Ç, —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª..."), –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ—â–∞–Ω–∏–π, –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤. –¢–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å –º–æ–¥—É–ª—è–º–∏.
-   –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –º–æ–¥—É–ª–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö: [${alreadyShownModules.join(
      ", ",
    )}].

**–ü—Ä–∏–º–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ "—Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ":**
\`[MODULE:28] –ü–æ–∑–≤–æ–ª–∏—Ç –≤–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä—ã –æ–Ω–ª–∞–π–Ω –≤ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –Ω–∏—Ö –≤—Ä–µ–º—è, –±–µ–∑ –∑–≤–æ–Ω–∫–æ–≤ –∏ –æ–∂–∏–¥–∞–Ω–∏—è.\`
\`[MODULE:1] –°–æ–∑–¥–∞—Å—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –≤–∏—Ç—Ä–∏–Ω—É —Å –≤–∞—à–∏–º–∏ –ª—É—á—à–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ –æ—Ç–µ–ª—è–º –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º.\`
\`[MODULE:152] –ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –ø–æ–µ–∑–¥–∫–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–µ.\`
\`[MODULE:5] –î–∞—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É –∑–∞ –ø—É—Ç–µ–≤–∫–∏ –ø—Ä—è–º–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\`

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º.
`;

    const apiResponse = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `${systemPrompt}\n\n–î–∏–∞–ª–æ–≥:\n${messages
                  .map(
                    (msg) =>
                      `${
                        msg.role === "user" ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                      }: ${msg.content}`,
                  )
                  .join("\n")}`,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: 2048,
          temperature: 0.2,
        },
      }),
    });

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text();
      console.error("Gemini API Error:", apiResponse.status, errorText);
      throw new Error(`API failed: ${apiResponse.status} - ${errorText}`);
    }

    const apiData = await apiResponse.json();
    console.log("Full API Response:", JSON.stringify(apiData, null, 2));

    const aiContent = apiData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!aiContent) {
      console.error("No AI content found in response:", apiData);
      console.error("Candidates:", apiData.candidates);
      throw new Error("No AI response content");
    }

    console.log("AI Response Preview:", aiContent.substring(0, 200));

    // –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, —Ö–æ—Ç—è –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö.
    let cleanedContent = aiContent.trim();

    const moduleMatches = cleanedContent.match(/\[MODULE:(\d+)\]/gi) || [];
    const recommendedModules: number[] = [];

    for (const match of moduleMatches) {
      const numberMatch = match.match(/\[MODULE:(\d+)\]/i);
      if (numberMatch) {
        const moduleNumber = parseInt(numberMatch[1]);
        if (!alreadyShownModules.includes(moduleNumber)) {
          recommendedModules.push(moduleNumber);
        }
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ [MODULE:X]
    const responseLines = cleanedContent
      .split("\n")
      .filter((line) => line.includes("[MODULE:"))
      .join("\n");

    return {
      response: responseLines,
      recommendedModules: Array.from(new Set(recommendedModules)).sort(
        (a, b) => a - b,
      ),
    };
  } catch (error) {
    console.error("AI Error:", error);
    return {
      response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
      recommendedModules: [],
    };
  }
}
