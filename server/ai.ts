import { GoogleGenAI } from "@google/genai";

const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

if (!GEMINI_API_KEY) {
  console.error('GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY || '' });

export async function generateAIResponse(
  messages: { role: 'user' | 'assistant'; content: string }[], 
  alreadyShownModules: number[] = []
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import('./storage');
    const allModules = await storage.getAllModules();
    
    const userText = messages.filter(m => m.role === 'user').map(m => m.content).join(' ');
    
    // –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª—è—Ö –¥–ª—è Gemini
    const modulesList = allModules
      .filter(m => !alreadyShownModules.includes(m.number))
      .map(m => `#${m.number}: ${m.name} - ${m.description} (${m.category})`)
      .join('\n');
    
    const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Telegram Mini App –º–æ–¥—É–ª–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userText}"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
${modulesList}

–ó–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –í—ã–±–µ—Ä–∏ 4 —Å–∞–º—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥—É–ª—è –ø–æ –Ω–æ–º–µ—Ä–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
3. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [MODULE:–Ω–æ–º–µ—Ä] –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
4. –î–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä—ã —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø–∞–º –±–∏–∑–Ω–µ—Å–∞:
üçΩÔ∏è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, üöó —Ç–∞–∫—Å–∏/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, üíÑ –∫—Ä–∞—Å–æ—Ç–∞, üè• –º–µ–¥–∏—Ü–∏–Ω–∞, ‚úàÔ∏è —Ç—É—Ä–∏–∑–º, üß† –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, ‚öñÔ∏è —é—Ä–∏—Å—Ç—ã, üß∂ —Ä—É–∫–æ–¥–µ–ª–∏–µ, üõçÔ∏è –º–∞–≥–∞–∑–∏–Ω—ã

–î–ª—è —Ç–∞–∫—Å–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–¥—Ö–æ–¥—è—Ç: –º–æ–¥—É–ª–∏ —Å GPS, –ø–ª–∞—Ç–µ–∂–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, CRM –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.
–î–ª—è —Ä—É–∫–æ–¥–µ–ª–∏—è: e-commerce –º–æ–¥—É–ª–∏, –ø–ª–∞—Ç–µ–∂–∏, –∫–∞—Ç–∞–ª–æ–≥–∏, –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã.
–î–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–æ–≤: –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º, CRM, –ø–ª–∞—Ç–µ–∂–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞–º–∏ –º–æ–¥—É–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [MODULE:—á–∏—Å–ª–æ] –∏ –∫—Ä–∞—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —Å —ç–º–æ–¥–∑–∏.`;

    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-exp",
      contents: prompt,
    });

    const aiText = response.text || '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –º–æ–¥—É–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini
    const moduleMatches = aiText.match(/\[MODULE:(\d+)\]/g) || [];
    const recommendedModuleNumbers = moduleMatches
      .map(match => parseInt(match.match(/\d+/)?.[0] || '0'))
      .filter(num => num > 0)
      .slice(0, 4);

    console.log(`üèÜ Gemini recommended modules:`, recommendedModuleNumbers);
    
    return {
      response: aiText,
      recommendedModules: recommendedModuleNumbers
    };
  } catch (error) {
    console.log('üö® –û—à–∏–±–∫–∞ Gemini:', (error as Error).message);
    // –ü—Ä–æ—Å—Ç–æ–π fallback –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
    return {
      response: 'üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:\n\n[MODULE:224] [MODULE:225] [MODULE:236] [MODULE:237]',
      recommendedModules: [224, 225, 236, 237]
    };
  }
}