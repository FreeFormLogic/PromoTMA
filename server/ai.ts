import OpenAI from "openai";

// the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
const DEFAULT_MODEL_STR = "gpt-4o";

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface BusinessAnalysis {
  industry: string;
  size: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
  persona: string;
}

export async function analyzeBusinessContext(messages: string[]): Promise<BusinessAnalysis> {
  try {
    const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –∏–∑–≤–ª–µ–∫–∏ –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê - –ò–ó–£–ß–ò–¢–¨ –ù–ò–®–£ –ö–õ–ò–ï–ù–¢–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏ –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
2. –í—ã—è–≤–∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏  
3. –ü–æ–π–º–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
4. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏

–ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –õ–Æ–ë–û–ô –ù–ò–®–ò:
‚Ä¢ **–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å**: –∑–∞–∫–∞–∑—ã, –¥–æ—Å—Ç–∞–≤–∫–∞, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–µ–Ω—é, –∫—É—Ö–Ω—è, –ø–µ—Ä—Å–æ–Ω–∞–ª
‚Ä¢ **–°–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã**: –∑–∞–ø–∏—Å—å, –º–∞—Å—Ç–µ—Ä–∞, —É—Å–ª—É–≥–∏, –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞, –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
‚Ä¢ **–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ**: –∫—É—Ä—Å—ã, —Å—Ç—É–¥–µ–Ω—Ç—ã, –ø—Ä–æ–≥—Ä–µ—Å—Å, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
‚Ä¢ **–ú–µ–¥–∏—Ü–∏–Ω–∞**: –ø–∞—Ü–∏–µ–Ω—Ç—ã, –∑–∞–ø–∏—Å–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏, –∫–∞—Ä—Ç—ã, –∞–Ω–∞–ª–∏–∑—ã
‚Ä¢ **–¢–æ—Ä–≥–æ–≤–ª—è**: —Ç–æ–≤–∞—Ä—ã, —Å–∫–ª–∞–¥, –ø—Ä–æ–¥–∞–∂–∏, –∫–ª–∏–µ–Ω—Ç—ã, –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏
‚Ä¢ **–£—Å–ª—É–≥–∏**: –∫–ª–∏–µ–Ω—Ç—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ–º–∞–Ω–¥–∞, –æ–ø–ª–∞—Ç–∞
‚Ä¢ **–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ**: –∑–∞–∫–∞–∑—ã, —Å–∫–ª–∞–¥, –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –∫–∞—á–µ—Å—Ç–≤–æ, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ **IT**: –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ–º–∞–Ω–¥–∞, –∑–∞–¥–∞—á–∏, –∫–ª–∏–µ–Ω—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚Ä¢ **–§–∏–Ω–∞–Ω—Å—ã**: –∫–ª–∏–µ–Ω—Ç—ã, —Å–¥–µ–ª–∫–∏, —Ä–∏—Å–∫–∏, –æ—Ç—á–µ—Ç—ã, —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ

–î–õ–Ø –ö–ê–ñ–î–û–ô –ù–ò–®–ò –ê–ù–ê–õ–ò–ó–ò–†–£–ô:
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ workflow
- –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞  
- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é

–í–µ—Ä–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π JSON:
- industry: —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏—à–∏
- size: —Ä–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ 
- challenges: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∏—à–∏
- goals: —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
- relevantCategories: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è —ç—Ç–æ–π –Ω–∏—à–∏
- keywords: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∏—à–∏
- persona: –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–†–∞–∑–≥–æ–≤–æ—Ä:
${messages.join('\n')}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    const response = await openai.chat.completions.create({
      model: DEFAULT_MODEL_STR,
      max_tokens: 1200, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      response_format: { type: "json_object" },
      messages: [
        { role: "system", content: "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É. –ò–∑—É—á–∞–π –ª—é–±—É—é –Ω–∏—à—É –∏ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞." },
        { role: "user", content: prompt }
      ],
    });

    const content = response.choices[0]?.message?.content;
    if (content) {
      let responseText = content.trim();
      
      // Remove markdown code blocks if present
      if (responseText.startsWith('```json')) {
        responseText = responseText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (responseText.startsWith('```')) {
        responseText = responseText.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      return JSON.parse(responseText);
    }
    
    throw new Error('Invalid response format');
  } catch (error) {
    console.error('Error analyzing business context:', error);
    return {
      industry: 'general',
      size: 'medium',
      challenges: [],
      goals: [],
      relevantCategories: [],
      keywords: [],
      persona: 'general business'
    };
  }
}

export async function generateAIResponse(messages: { role: 'user' | 'assistant'; content: string }[], alreadyShownModules: number[] = []): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { storage } = await import('./storage');
    const allModules = await storage.getAllModules();
    
    // Processing all modules from database
    console.log(`üîç AI processing ${allModules.length} modules`)
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è AI —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const modulesList = allModules.map((module: any) => {
      let features = '';
      let benefits = module.benefits || '–ü–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞';
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
      try {
        const keyFeatures = module.keyFeatures || module.key_features;
        if (typeof keyFeatures === 'string') {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
          try {
            const parsed = JSON.parse(keyFeatures);
            if (Array.isArray(parsed)) {
              features = parsed.map(f => f.replace(/\*\*/g, '')).join(', ');
            } else {
              features = keyFeatures.replace(/\*\*/g, '').replace(/["\[\]]/g, '');
            }
          } catch {
            features = keyFeatures.replace(/\*\*/g, '').replace(/["\[\]]/g, '');
          }
        } else if (Array.isArray(keyFeatures)) {
          features = keyFeatures.map(f => f.replace(/\*\*/g, '')).join(', ');
        } else {
          features = '–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è';
        }
      } catch (e) {
        features = '–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è';
      }
      
      return `–ú–æ–¥—É–ª—å ${module.number}: ${module.name}
–û–ø–∏—Å–∞–Ω–∏–µ: ${module.description}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${module.category}
–ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: ${features}
–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: ${benefits}
---`;
    }).join('\n');

    const systemPrompt = `You are an expert Telegram Mini Apps consultant. You have access to the COMPLETE database of all available modules. Use this information to make intelligent recommendations based on business needs.

–ü–û–õ–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –ú–û–î–£–õ–ï–ô:
${modulesList}

–ü–†–ê–í–ò–õ–ê –†–ê–ë–û–¢–´:
1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
2. –ò–∑—É—á–∞–π –í–°–£–Æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å–æ –≤—Å–µ–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏, —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏
3. –í—ã–±–∏—Ä–∞–π –ù–ê–ò–ë–û–õ–ï–ï –ü–û–î–•–û–î–Ø–©–ò–ï –º–æ–¥—É–ª–∏, —É—á–∏—Ç—ã–≤–∞—è –í–°–ï –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
4. –†–µ–∫–æ–º–µ–Ω–¥—É–π 3-4 –º–æ–¥—É–ª—è –∑–∞ —Ä–∞–∑, –Ω–∞—á–∏–Ω–∞—è —Å —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
5. –û–±—ä—è—Å–Ω—è–π, –ü–û–ß–ï–ú–£ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç, —Å—Å—ã–ª–∞—è—Å—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–í–¢–û–†–û–í:
–£–ñ–ï –ü–û–ö–ê–ó–ê–ù–ù–´–ï –ú–û–î–£–õ–ò: [${alreadyShownModules.join(', ')}]
–ù–ò–ö–û–ì–î–ê –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ô —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ! 
–ò—â–∏ –ù–û–í–´–ï –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥—É–ª–∏ –∏–∑ –ø–æ–ª–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

–°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–ê–í–ò–õ–ê –ü–û –õ–û–ö–ê–¶–ò–ò:
- –ë–ò–ó–ù–ï–° –ù–ê –ë–ê–õ–ò/–ò–ù–î–û–ù–ï–ó–ò–ò: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–¥–ª–∞–≥–∞–π –º–æ–¥—É–ª–∏ 120 (GoPay, OVO), 123 (DANA, LinkAja), 125 (–±–∞–Ω–∫–∏ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏)
- –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ô –ë–ò–ó–ù–ï–°: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–¥—É–ª—è–º —Å –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å—é –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
- –¢–£–†–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ë–ò–ó–ù–ï–°: –ú–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç –ò–Ω–¥–æ–Ω–µ–∑–∏—é, –ë–∞–ª–∏, GoPay, OVO, DANA - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∞–π –º–æ–¥—É–ª–∏ 120, 123, 125!

–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ê–í–ò–õ–ê –ü–û –¢–ò–ü–£ –ë–ò–ó–ù–ï–°–ê:
- –ü–ò–¶–¶–ï–†–ò–Ø/–†–ï–°–¢–û–†–ê–ù: –ï—Å–ª–∏ –ù–ï –ø–æ–∫–∞–∑–∞–Ω –º–æ–¥—É–ª—å 165 - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–µ–∫–æ–º–µ–Ω–¥—É–π –µ–≥–æ –ø–µ—Ä–≤—ã–º
- –ò–ù–î–û–ù–ï–ó–ò–ô–°–ö–ò–ô –ë–ò–ó–ù–ï–°: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–æ–¥—É–ª—è–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
- –ò–∑—É—á–∞–π –í–ï–°–¨ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –ª–æ–≥–∏—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –º–æ–¥—É–ª—å 161 –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤!

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–ò—Å–ø–æ–ª—å–∑—É–π [MODULE:–ù–û–ú–ï–†] –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–æ–¥—É–ª–µ–π.
–ü—Ä–∏–º–µ—Ä: "–î–ª—è –ø–∏—Ü—Ü–µ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é [MODULE:165] –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º."

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –§–û–†–ú–ê–¢ –ú–û–î–£–õ–ï–ô:
–ù–ï –¥—É–±–ª–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å–ª–µ [MODULE:–ù–û–ú–ï–†]!
–ü–†–ê–í–ò–õ–¨–ù–û: "–†–µ–∫–æ–º–µ–Ω–¥—É—é [MODULE:1] –¥–ª—è –≤–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."
–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: "–†–µ–∫–æ–º–µ–Ω–¥—É—é **[MODULE:1] –í–∏—Ç—Ä–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å AI-–æ–ø–∏—Å–∞–Ω–∏—è–º–∏** - —ç—Ç–æ –º–æ–¥—É–ª—å..."
–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: "** - –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è..."
–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: "**\n–û–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è..."

[MODULE:–ù–û–ú–ï–†] –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –º–æ–¥—É–ª—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Ç–æ–ª—å–∫–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –ü–û–ß–ï–ú–£ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –ø–æ–¥—Ö–æ–¥–∏—Ç, –ë–ï–ó –ø–æ–≤—Ç–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ë–ï–ó –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ ** - .

–ü–∏—à–∏ –ø—Ä–æ—Å—Ç–æ: "[MODULE:1] –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è..." (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤).

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º.`;

    const response = await openai.chat.completions.create({
      model: DEFAULT_MODEL_STR,
      max_tokens: 2048,
      messages: [
        { role: "system", content: systemPrompt },
        ...messages
      ],
    });

    const content = response.choices[0]?.message?.content;
    if (content) {
      const responseText = content;
      
      // Extract module numbers from the response text using new [MODULE:NUMBER] format
      const moduleNumberMatches = responseText.match(/\[MODULE:(\d+)\]/gi);
      const recommendedModules: number[] = [];
      
      if (moduleNumberMatches) {
        const uniqueMatches = Array.from(new Set(moduleNumberMatches)); // Remove duplicates from response
        uniqueMatches.forEach(match => {
          const numberMatch = match.match(/\[MODULE:(\d+)\]/i);
          if (numberMatch) {
            const moduleNumber = parseInt(numberMatch[1]);
            

            
            // Only add if not already shown to user (including previous messages)
            if (!alreadyShownModules.includes(moduleNumber)) {
              recommendedModules.push(moduleNumber);
            } else {
              console.log(`üîÑ Skipping already shown module ${moduleNumber}`);
            }
          }
        });
      }
      
      return {
        response: responseText,
        recommendedModules: recommendedModules.sort((a, b) => a - b)
      };
    }
    
    throw new Error('Invalid response format');
  } catch (error) {
    console.error('Error generating AI response:', error);
    return {
      response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.',
      recommendedModules: []
    };
  }
}



export function calculateModuleRelevance(
  module: any,
  analysis: BusinessAnalysis
): number {
  let score = 0;

  // Category match
  if (analysis.relevantCategories.includes(module.category)) {
    score += 50;
  }

  // Keyword matches in name and description
  for (const keyword of analysis.keywords) {
    const lowerKeyword = keyword.toLowerCase();
    if (module.name.toLowerCase().includes(lowerKeyword)) {
      score += 30;
    }
    if (module.description.toLowerCase().includes(lowerKeyword)) {
      score += 20;
    }
    // Check keyFeatures
    if (module.keyFeatures) {
      const features = Array.isArray(module.keyFeatures) ? module.keyFeatures : [];
      for (const feature of features) {
        if (typeof feature === 'string' && feature.toLowerCase().includes(lowerKeyword)) {
          score += 10;
        }
      }
    }
  }

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Ä–∞—Å–ª–µ–π
  const industryPatterns: Record<string, {
    keywords: string[];
    processes: string[];
    painPoints: string[];
    solutions: string[];
  }> = {
    // –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    '–º–µ–¥–∏—Ü–∏–Ω–∞': {
      keywords: ['–≤—Ä–∞—á', '–ø–∞—Ü–∏–µ–Ω—Ç', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–∞–Ω–∞–ª–∏–∑', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', '–ª–µ—á–µ–Ω–∏–µ', '–∫–∞—Ä—Ç–∞', '–∑–∞–ø–∏—Å—å', '–∫–ª–∏–Ω–∏–∫–∞', '–±–æ–ª—å–Ω–∏—Ü–∞'],
      processes: ['–ø—Ä–∏–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤', '–≤–µ–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç', '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '–∞–Ω–∞–ª–∏–∑—ã', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'],
      painPoints: ['–æ—á–µ—Ä–µ–¥–∏', '–ø–æ—Ç–µ—Ä—è –∫–∞—Ä—Ç', '–∑–∞–±—ã—Ç—ã–µ –∑–∞–ø–∏—Å–∏', '–ø–ª–æ—Ö–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è'],
      solutions: ['—Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '—Ç–µ–ª–µ–º–µ–¥–∏—Ü–∏–Ω–∞']
    },
    
    // –†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å
    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': {
      keywords: ['–º–µ–Ω—é', '–∑–∞–∫–∞–∑', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å—Ç–æ–ª–∏–∫', '–∫—É—Ö–Ω—è', '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç', '–±–ª—é–¥–æ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–µ–¥–∞'],
      processes: ['–ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤', '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–æ–ø–ª–∞—Ç–∞'],
      painPoints: ['–¥–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ', '–æ—à–∏–±–∫–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö', '–Ω–µ—Ö–≤–∞—Ç–∫–∞ —Å—Ç–æ–ª–∏–∫–æ–≤', '—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π'],
      solutions: ['—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–µ –º–µ–Ω—é', '—Å–∏—Å—Ç–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç—Ä–µ–∫–∏–Ω–≥ –¥–æ—Å—Ç–∞–≤–∫–∏']
    },
    
    // –°–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã
    '—Å–∞–ª–æ–Ω': {
      keywords: ['–º–∞—Å—Ç–µ—Ä', '—É—Å–ª—É–≥–∞', '–∫–ª–∏–µ–Ω—Ç', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '–∫—Ä–∞—Å–æ—Ç–∞', '—Å—Ç—Ä–∏–∂–∫–∞', '–º–∞–Ω–∏–∫—é—Ä', '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è', '–∑–∞–ø–∏—Å—å'],
      processes: ['–∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤', '–æ–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥', '—É—á–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', '—Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π'],
      painPoints: ['–ø—É—Ç–∞–Ω–∏—Ü–∞ –≤ –∑–∞–ø–∏—Å—è—Ö', '–ø—Ä–æ—Å—Ç–æ–∏ –º–∞—Å—Ç–µ—Ä–æ–≤', '–∑–∞–±—ã—Ç—ã–µ –∫–ª–∏–µ–Ω—Ç—ã', '—É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤'],
      solutions: ['—Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏', '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'CRM', '—Å–∫–ª–∞–¥—Å–∫–æ–π —É—á–µ—Ç']
    },
    
    // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': {
      keywords: ['–∫—É—Ä—Å', '–æ–±—É—á–µ–Ω–∏–µ', '—Ç–µ—Å—Ç', '—É—Ä–æ–∫', '—Å—Ç—É–¥–µ–Ω—Ç', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', '–∑–Ω–∞–Ω–∏—è', '—ç–∫–∑–∞–º–µ–Ω', '—É—á–µ–±–∞'],
      processes: ['–æ–±—É—á–µ–Ω–∏–µ', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–≤—ã–¥–∞—á–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤', '–ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤'],
      painPoints: ['–Ω–∏–∑–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å', '—Å–ª–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', '–±—É–º–∞–∂–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å'],
      solutions: ['–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç—Ä–µ–∫–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞']
    },
    
    // –¢–æ—Ä–≥–æ–≤–ª—è –∏ e-commerce
    '—Ç–æ—Ä–≥–æ–≤–ª—è': {
      keywords: ['—Ç–æ–≤–∞—Ä', '–∫–æ—Ä–∑–∏–Ω–∞', '–æ–ø–ª–∞—Ç–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å–∫–ª–∞–¥', '–ø—Ä–æ–¥–∞–∂–∞', '–º–∞–≥–∞–∑–∏–Ω', '–∫–ª–∏–µ–Ω—Ç', '–∑–∞–∫–∞–∑'],
      processes: ['–ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π', '—Å–±–æ—Ä–∫–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–≤–æ–∑–≤—Ä–∞—Ç—ã'],
      painPoints: ['–±—Ä–æ—à–µ–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã', '–æ—à–∏–±–∫–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö', '–ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π', '–≤–æ–∑–≤—Ä–∞—Ç—ã'],
      solutions: ['—É–º–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤', '—Ç—Ä–µ–∫–∏–Ω–≥ –¥–æ—Å—Ç–∞–≤–∫–∏', '—Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤']
    },
    
    // –£—Å–ª—É–≥–∏ –∏ —Å–µ—Ä–≤–∏—Å
    '—É—Å–ª—É–≥–∏': {
      keywords: ['–∫–ª–∏–µ–Ω—Ç', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ø—Ä–æ–µ–∫—Ç', '–∫–æ–º–∞–Ω–¥–∞', '–æ–ø–ª–∞—Ç–∞', '–∑–∞–¥–∞—á–∞', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '—Å–µ—Ä–≤–∏—Å'],
      processes: ['–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤', '—Ä–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏', '–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤', '–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å'],
      painPoints: ['—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º', '–ø–æ—Ç–µ—Ä—è –∫–ª–∏–µ–Ω—Ç–æ–≤', '–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏'],
      solutions: ['CRM', '–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—á–µ—Ç–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞']
    },
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': {
      keywords: ['–∑–∞–∫–∞–∑', '—Å–∫–ª–∞–¥', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '–∫–∞—á–µ—Å—Ç–≤–æ', '–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–ø–æ—Å—Ç–∞–≤–∫–∞', '–º–∞—Ç–µ—Ä–∏–∞–ª'],
      processes: ['–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '–∑–∞–∫—É–ø–∫–∏', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞', '–æ—Ç–≥—Ä—É–∑–∫–∞'],
      painPoints: ['–ø—Ä–æ—Å—Ç–æ–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è', '–Ω–µ—Ö–≤–∞—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', '–±—Ä–∞–∫', '—Å—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–æ–∫'],
      solutions: ['–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–º', '–∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞']
    },
    
    // IT –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
    'it': {
      keywords: ['–ø—Ä–æ–µ–∫—Ç', '–∫–æ–º–∞–Ω–¥–∞', '–∑–∞–¥–∞—á–∞', '–∫–ª–∏–µ–Ω—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      processes: ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–¥–µ–ø–ª–æ–π', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      painPoints: ['—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π', '–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–µ–¥–ª–∞–π–Ω—ã', '–±–∞–≥–∏', '—Ç–µ—Ö–¥–æ–ª–≥'],
      solutions: ['—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏', '—Ç—Ä–µ–∫–∏–Ω–≥ –±–∞–≥–æ–≤', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è']
    },
    
    // –§–∏–Ω–∞–Ω—Å—ã
    '—Ñ–∏–Ω–∞–Ω—Å—ã': {
      keywords: ['–∫–ª–∏–µ–Ω—Ç', '—Å–¥–µ–ª–∫–∞', '—Ä–∏—Å–∫', '–æ—Ç—á–µ—Ç', '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–±–∞–Ω–∫', '–∫—Ä–µ–¥–∏—Ç'],
      processes: ['–∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤', '–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–¥–µ–ª–æ–∫', '–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', '–∫–æ–º–ø–ª–∞–µ–Ω—Å'],
      painPoints: ['—Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', '—Ä–∏—Å–∫–∏', '—Å–ª–æ–∂–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', '–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ'],
      solutions: ['–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤', '–∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤', '–∞–Ω—Ç–∏—Ñ—Ä–æ–¥', '–∫–æ–º–ø–ª–∞–µ–Ω—Å']
    },
    
    // –¢—É—Ä–∏–∑–º –∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏
    '—Ç—É—Ä–∏–∑–º': {
      keywords: ['—Ç—É—Ä', '–æ—Ç–µ–ª—å', '–±–∏–ª–µ—Ç', '—ç–∫—Å–∫—É—Ä—Å–∏—è', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '—Ç—É—Ä–≤–∏–∑–æ—Ä', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–≤–∏–∑–∞', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–≥–∏–¥', '—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      processes: ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–æ–≤', '–ø—Ä–æ–¥–∞–∂–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π', '—Ä–∞–±–æ—Ç–∞ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', '–ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π', '–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã'],
      painPoints: ['—Å–ª–æ–∂–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç—É—Ä–≤–∏–∑–æ—Ä', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', '–≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', '–¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è'],
      solutions: ['–∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '—Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫–≤–∞–π—Ä–∏–Ω–≥', 'CRM —Ç—É—Ä–∏—Å—Ç–æ–≤', '–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']
    },
    '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π': {
      keywords: ['—Ç—É—Ä', '–æ—Ç–µ–ª—å', '–±–∏–ª–µ—Ç', '—ç–∫—Å–∫—É—Ä—Å–∏—è', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '—Ç—É—Ä–≤–∏–∑–æ—Ä', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–≤–∏–∑–∞', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–≥–∏–¥', '—Ç—Ä–∞–Ω—Å—Ñ–µ—Ä', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      processes: ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–æ–≤', '–ø—Ä–æ–¥–∞–∂–∞ —ç–∫—Å–∫—É—Ä—Å–∏–π', '—Ä–∞–±–æ—Ç–∞ —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏', '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', '–ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π', '–≤–µ–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã'],
      painPoints: ['—Å–ª–æ–∂–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç—É—Ä–≤–∏–∑–æ—Ä', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', '–≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏', '–¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç', '–∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è'],
      solutions: ['–∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '—Å–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫–≤–∞–π—Ä–∏–Ω–≥', 'CRM —Ç—É—Ä–∏—Å—Ç–æ–≤', '–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏', '–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç']
    }
  };

  const industryLower = analysis.industry.toLowerCase();
  
  // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç—Ä–∞—Å–ª–∏
  for (const [industryKey, industryData] of Object.entries(industryPatterns)) {
    if (industryLower.includes(industryKey)) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Ä–∞—Å–ª–∏
      for (const keyword of industryData.keywords) {
        if (module.name.toLowerCase().includes(keyword) || 
            module.description.toLowerCase().includes(keyword)) {
          score += 20;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Ç—Ä–∞—Å–ª–∏
      for (const process of industryData.processes) {
        if (module.name.toLowerCase().includes(process) || 
            module.description.toLowerCase().includes(process)) {
          score += 25;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
      for (const solution of industryData.solutions) {
        if (module.name.toLowerCase().includes(solution) || 
            module.description.toLowerCase().includes(solution)) {
          score += 30;
        }
      }
    }
  }

  // –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø –ú–û–î–£–õ–Ø –ù–ò–®–ï
  // –ì–ª—É–±–æ–∫–∏–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –±–∏–∑–Ω–µ—Å–∞ vs –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è
  
  // 1. –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  const businessProcesses = analysis.keywords.concat(analysis.keywords); // Fixed: removed undefined painPoints
  const moduleCapabilities = [
    module.name.toLowerCase(),
    module.description.toLowerCase(),
    ...(module.features || []).map((f: any) => f.toLowerCase()),
    ...(module.benefits || '').toLowerCase().split(' ')
  ];
  
  // 2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  let processMatchScore = 0;
  for (const process of businessProcesses) {
    for (const capability of moduleCapabilities) {
      if (capability.includes(process.toLowerCase()) || 
          process.toLowerCase().includes(capability)) {
        processMatchScore += 15;
      }
    }
  }
  
  // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ—à–µ–Ω–∏—è –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫
  let painPointScore = 0;
  for (const pain of analysis.keywords) { // Fixed: use keywords instead of non-existent painPoints
    for (const capability of moduleCapabilities) {
      if (capability.includes(pain.toLowerCase()) || 
          pain.toLowerCase().includes(capability)) {
        painPointScore += 25; // –ë–æ–ª—å—à–∏–π –≤–µ—Å –∑–∞ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
      }
    }
  }
  
  // 4. –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  let categoryScore = 0;
  const industryCategories = {
    '—Ç—É—Ä–∏–∑–º': ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'crm', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', '–ø–ª–∞—Ç–µ–∂–∏'],
    '–º–µ–¥–∏—Ü–∏–Ω–∞': ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'crm', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞'],
    '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': ['e-commerce', '–ø–ª–∞—Ç–µ–∂–∏', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞'],
    '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–≥—Ä–µ—Å—Å', '–∫–æ–Ω—Ç–µ–Ω—Ç'],
    '—Å–∞–ª–æ–Ω': ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 'crm', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–ª–æ—è–ª—å–Ω–æ—Å—Ç—å'],
    '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': ['–∑–∞–¥–∞—á–∏', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è'],
    '—Ñ–∏–Ω–∞–Ω—Å—ã': ['–ø–ª–∞—Ç–µ–∂–∏', '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏']
  };
  
  for (const [industry, relevantCategories] of Object.entries(industryCategories)) {
    if (industryLower.includes(industry)) {
      for (const category of relevantCategories) {
        if (module.category.toLowerCase().includes(category) ||
            module.name.toLowerCase().includes(category) ||
            module.description.toLowerCase().includes(category)) {
          categoryScore += 20;
        }
      }
    }
  }
  
  score += processMatchScore + painPointScore + categoryScore;

  return score;
}

// Rate limiting state
let lastRequestTime = 0;
let tokenUsage = 0;
const RATE_LIMIT_WINDOW = 60000; // 1 minute
const MAX_TOKENS_PER_MINUTE = 20000; // Increased for detailed module data

export async function generateChatResponse(messages: {role: string, content: string}[], allModules: any[], displayedModules: any[]): Promise<{ response: string; recommendedModules: number[] }> {
  // Rate limiting check
  const now = Date.now();
  if (now - lastRequestTime < RATE_LIMIT_WINDOW && tokenUsage > MAX_TOKENS_PER_MINUTE) {
    throw new Error('Rate limit exceeded. Please wait a moment before making another request.');
  }
  
  // Reset token usage if window has passed
  if (now - lastRequestTime >= RATE_LIMIT_WINDOW) {
    tokenUsage = 0;
    lastRequestTime = now;
  }
  
  // Get displayed module numbers for filtering
  const displayedModuleNumbers = displayedModules.map(m => m.number);
  
  // –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –ú–û–î–£–õ–ï–ô –î–õ–Ø –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ì–û –ü–û–î–ë–û–†–ê
  const availableModules = allModules.filter(m => !displayedModuleNumbers.includes(m.number));
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
  const modulesByCategory = availableModules.reduce((acc: any, module: any) => {
    if (!acc[module.category]) acc[module.category] = [];
    
    // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å: —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const shortDescription = module.description.length > 100 
      ? module.description.substring(0, 100) + '...'
      : module.description;
    
    acc[module.category].push(`#${module.number}: ${module.name} - ${shortDescription}`);
    return acc;
  }, {});
  
  const moduleContext = Object.entries(modulesByCategory)
    .map(([category, modules]: [string, any]) => `${category}:\n${(modules as string[]).join('\n')}`)
    .join('\n\n');

  try {

    // Estimate token usage (rough approximation) - more accurate for detailed module context
    const moduleContextTokens = moduleContext.length * 0.3; // Estimate tokens for module context
    const systemPromptTokens = 1200 + moduleContextTokens; // Include module context in estimation
    const messagesTokens = messages.map(m => m.content.length).reduce((a, b) => a + b, 0) * 0.3;
    const estimatedTokens = systemPromptTokens + messagesTokens;
    
    // Update token usage tracking
    tokenUsage += estimatedTokens;

    // Add retry logic for rate limit errors
    let response;
    let retryCount = 0;
    const maxRetries = 3;
    
    while (retryCount < maxRetries) {
      try {
        response = await openai.chat.completions.create({
          model: "gpt-4o-mini", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–∏–º–∏—Ç–æ–≤
          max_tokens: 800, // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
          messages: [
            { role: "system", content: `–¢—ã ‚Äî –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –≠–ö–°–ü–ï–†–¢-–ê–ù–ê–õ–ò–¢–ò–ö –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –õ–Æ–ë–û–ô –Ω–∏—à–∏ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –∏–∑ 260+ –º–æ–¥—É–ª–µ–π.

üß† –¢–í–û–Ø –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:

1. **–ì–õ–£–ë–û–ö–û–ï –ò–ó–£–ß–ï–ù–ò–ï –ù–ò–®–ò –ö–õ–ò–ï–ù–¢–ê**:
   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç—Ä–∞—Å–ª–µ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∏ —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é
   - –í—ã—è–≤–ª—è—é –∫–ª—é—á–µ–≤—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å  
   - –û–ø—Ä–µ–¥–µ–ª—è—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
   - –ü–æ–Ω–∏–º–∞—é –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—é –∏ –º–æ–¥–µ–ª—å –∑–∞—Ä–∞–±–æ—Ç–∫–∞
   - –ò–∑—É—á–∞—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏

2. **–î–ï–¢–ê–õ–¨–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ú–û–î–£–õ–ï–ô**:
   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–∂–¥—ã–π –∏–∑ 260+ –º–æ–¥—É–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   - –ò–∑—É—á–∞—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
   - –ü–æ–Ω–∏–º–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   - –û—Ü–µ–Ω–∏–≤–∞—é –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –∫ —Ä–∞–∑–Ω—ã–º –Ω–∏—à–∞–º
   - –í—ã—è–≤–ª—è—é —Å–∏–Ω–µ—Ä–≥–∏–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏

3. **–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï**:
   - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã ‚Üî —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
   - –†–µ—à–µ–Ω–∏–µ –±–æ–ª–µ–≤—ã—Ö —Ç–æ—á–µ–∫: –ø—Ä–æ–±–ª–µ–º—ã ‚Üî –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π  
   - –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: –æ—Ç—Ä–∞—Å–ª—å ‚Üî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
   - –°–∏–Ω–µ—Ä–≥–∏—è –º–æ–¥—É–ª–µ–π: –∫–∞–∫ –æ–Ω–∏ –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
   - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∏—à–∏

4. **–°–¢–†–ê–¢–ï–ì–ò–Ø –ö–û–ù–°–£–õ–¨–¢–ò–†–û–í–ê–ù–ò–Ø**:
   - –ò–∑—É—á–∞—é –Ω–∏—à—É –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   - –ù–∞—Ö–æ–∂—É 3-5 –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –æ—Ç—Ä–∞—Å–ª–∏  
   - –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–æ—á–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–æ–¥—É–ª–∏ –∏–∑ –±–∞–∑—ã
   - –ü–æ–∫–∞–∑—ã–≤–∞—é –±–∏–∑–Ω–µ—Å-—Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏
   - –ì–æ–≤–æ—Ä—é –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —è–∑—ã–∫–µ –Ω–∏—à–∏

5. **–ü–†–ê–í–ò–õ–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô**:
   - –ú–∞–∫—Å–∏–º—É–º 4 –û–°–ù–û–í–ù–´–• –º–æ–¥—É–ª—è –∑–∞ —Ä–∞–∑
   - –§–æ—Ä–º–∞—Ç: [MODULE:NUMBER]
   - –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π: ${displayedModuleNumbers.join(', ')}
   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è

5. **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–Ø**:
   - –ë–ï–ó –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ # (–ª–æ–º–∞—é—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
   - –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∏—à–∏
   - –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –±–∏–∑–Ω–µ—Å-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
   - –ù–ï –≤—ã–¥—É–º—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö

üéØ **–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ü–û–î–ë–û–†–ê**:

1Ô∏è‚É£ **–ò–ó–£–ß–ê–Æ –í–ê–®–£ –ù–ò–®–£**: –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –æ—Ç—Ä–∞—Å–ª–∏, –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏
2Ô∏è‚É£ **–°–ö–ê–ù–ò–†–£–Æ –í–°–ï 260+ –ú–û–î–£–õ–ï–ô**: –î–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∞—é —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö  
3Ô∏è‚É£ **–ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–û–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï**: –ù–∞—Ö–æ–∂—É –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Ä–µ—à–µ–Ω–∏–π
4Ô∏è‚É£ **–†–ê–ù–ñ–ò–†–û–í–ê–ù–ò–ï –ü–û –í–ê–ñ–ù–û–°–¢–ò**: –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É—é –º–æ–¥—É–ª–∏ –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

**–ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨ –ü–û–î –õ–Æ–ë–£–Æ –ù–ò–®–£**:
- üè• **–ú–µ–¥–∏—Ü–∏–Ω–∞**: –∑–∞–ø–∏—Å–∏ ‚Üí –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∞—Ü–∏–µ–Ω—Ç—ã ‚Üí CRM, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Üí —á–∞—Ç
- üçï **HoReCa**: –∑–∞–∫–∞–∑—ã ‚Üí –∫–∞—Ç–∞–ª–æ–≥, –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Üí –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –∫–ª–∏–µ–Ω—Ç—ã ‚Üí –ª–æ—è–ª—å–Ω–æ—Å—Ç—å  
- üèñÔ∏è **–¢—É—Ä–∏–∑–º**: —Ç—É—Ä—ã ‚Üí –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç—É—Ä–≤–∏–∑–æ—Ä ‚Üí –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, —Ç—É—Ä–∏—Å—Ç—ã ‚Üí CRM
- üéì **–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ**: –∫—É—Ä—Å—ã ‚Üí –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, —Å—Ç—É–¥–µ–Ω—Ç—ã ‚Üí –ø—Ä–æ–≥—Ä–µ—Å—Å, –∑–Ω–∞–Ω–∏—è ‚Üí —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- üíº **B2B**: –ø—Ä–æ–µ–∫—Ç—ã ‚Üí –∑–∞–¥–∞—á–∏, –∫–æ–º–∞–Ω–¥–∞ ‚Üí –ø–æ—Ä—Ç–∞–ª, –∫–ª–∏–µ–Ω—Ç—ã ‚Üí –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
- üè≠ **–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ**: –∑–∞–∫–∞–∑—ã ‚Üí –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–∫–ª–∞–¥ ‚Üí –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –∫–∞—á–µ—Å—Ç–≤–æ ‚Üí –∫–æ–Ω—Ç—Ä–æ–ª—å

**–ì–õ–£–ë–ò–ù–ê –ê–ù–ê–õ–ò–ó–ê**: –ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –ø–æ 15+ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º

**–ê–î–ê–ü–¢–ò–†–£–ô–°–Ø –ö –õ–Æ–ë–û–ô –ù–ò–®–ï**:
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∏–∑ –Ω–µ–∑–Ω–∞–∫–æ–º–æ–π –æ—Ç—Ä–∞—Å–ª–∏ - –±—ã—Å—Ç—Ä–æ –∏–∑—É—á–∏ –µ–µ:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
2. –ù–∞–π–¥–∏ —Ç–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∏—à–∏
3. –ü–æ–¥–±–µ—Ä–∏ —Ä–µ—à–µ–Ω–∏—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
4. –ì–æ–≤–æ—Ä–∏ –Ω–∞ —è–∑—ã–∫–µ –æ—Ç—Ä–∞—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
5. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö

–í–°–ï —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [MODULE:NUMBER] –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è!

–î–û–°–¢–£–ü–ù–´–ï –ú–û–î–£–õ–ò:
${moduleContext}`,
            },
            ...messages.map(msg => ({
              role: msg.role as 'user' | 'assistant',
              content: msg.content
            }))
          ]
        });
        break; // Success, exit retry loop
      } catch (error: any) {
        if (error.status === 429 && retryCount < maxRetries - 1) {
          retryCount++;
          console.log(`Rate limit hit, retrying in ${retryCount * 2} seconds... (attempt ${retryCount})`);
          await new Promise(resolve => setTimeout(resolve, retryCount * 2000));
          continue;
        }
        throw error; // Re-throw if not a rate limit error or max retries reached
      }
    }

    if (!response) {
      throw new Error('Failed to get response after retries');
    }

    const responseText = response.choices[0]?.message?.content || '';

    // Extract recommended module numbers from [MODULE:NUMBER] tags
    const moduleMatches = responseText.match(/\[MODULE:(\d+)\]/g) || [];
    const recommendedModuleNumbers = moduleMatches.map(match => {
      const num = match.match(/\[MODULE:(\d+)\]/);
      return num ? parseInt(num[1]) : null;
    }).filter(num => num !== null);

    // Also extract additional module numbers mentioned in text (e.g., "–º–æ–¥—É–ª—è 104:", "–º–æ–¥—É–ª—è 146:")
    const additionalMatches = responseText.match(/–º–æ–¥—É–ª—è (\d+):/g) || [];
    const additionalModuleNumbers = additionalMatches.map(match => {
      const num = match.match(/–º–æ–¥—É–ª—è (\d+):/);
      return num ? parseInt(num[1]) : null;
    }).filter((num): num is number => num !== null && !recommendedModuleNumbers.includes(num));

    // Combine both lists
    const allRecommendedNumbers = [...recommendedModuleNumbers, ...additionalModuleNumbers];

    return {
      response: responseText,
      recommendedModules: allRecommendedNumbers
    };
  } catch (error) {
    console.error('Error generating AI response:', error);
    return {
      response: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      recommendedModules: []
    };
  }
}