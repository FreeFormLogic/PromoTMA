import { GoogleGenAI } from "@google/genai";

const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

if (!GEMINI_API_KEY) {
  console.error('GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

const ai = new GoogleGenAI({ apiKey: GEMINI_API_KEY || '' });

interface BusinessAnalysis {
  industry: string;
  size: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
  persona: string;
}

// AI-powered –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞ —á–µ—Ä–µ–∑ Gemini
async function analyzeBusinessFromText(text: string): Promise<BusinessAnalysis> {
  try {
    const prompt = `You are analyzing a business type for a Telegram Mini App module recommendation system. 

Business: "${text}"

Available industry-specific modules in our database:
- Module 261: Tourism Agency Management (for travel/tourism)
- Module 239: Medical Clinic Management (for healthcare/medical)
- Module 240: Beauty Salon Management (for beauty/spa)
- Universal modules: payments, CRM, booking systems, e-commerce, marketing

Return ONLY valid JSON:
{
  "industry": "classification from list below",
  "size": "medium",
  "challenges": ["business challenges"],
  "goals": ["business goals"], 
  "relevantCategories": ["module categories"],
  "keywords": ["key terms"],
  "persona": "brief business description"
}

Industry classifications:
- restaurant: —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –∫–∞—Ñ–µ, –ø–∏—Ü—Ü–∞, —Å—É—à–∏, –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã ‚Üí relevantCategories=["–û–¢–†–ê–°–õ–ï–í–´–ï –†–ï–®–ï–ù–ò–Ø", "E-COMMERCE"]
- tourism: —Ç—É—Ä–∏–∑–º, —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –æ—Ç–µ–ª–∏ ‚Üí relevantCategories=["–û–¢–†–ê–°–õ–ï–í–´–ï –†–ï–®–ï–ù–ò–Ø", "CRM"]
- beauty: —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –±–∞—Ä–±–µ—Ä—à–æ–ø, —Å–ø–∞, –º–∞–Ω–∏–∫—é—Ä ‚Üí relevantCategories=["–û–¢–†–ê–°–õ–ï–í–´–ï –†–ï–®–ï–ù–ò–Ø", "CRM"]
- medical: –∫–ª–∏–Ω–∏–∫–∞, –≤—Ä–∞—á, –º–µ–¥–∏—Ü–∏–Ω–∞, –∑–¥–æ—Ä–æ–≤—å–µ ‚Üí relevantCategories=["–û–¢–†–ê–°–õ–ï–í–´–ï –†–ï–®–ï–ù–ò–Ø", "CRM"]
- transport: —Ç–∞–∫—Å–∏, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –ª–æ–≥–∏—Å—Ç–∏–∫–∞, –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Üí relevantCategories=["CRM", "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´"]
- services: –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—É—á, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ‚Üí relevantCategories=["CRM", "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´"]
- professional: —é—Ä–∏—Å—Ç, –±—É—Ö–≥–∞–ª—Ç–µ—Ä, –∞–¥–≤–æ–∫–∞—Ç ‚Üí relevantCategories=["CRM", "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´"]
- handmade: —Ä—É–∫–æ–¥–µ–ª–∏–µ, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —Ö–µ–Ω–¥–º–µ–π–¥ ‚Üí relevantCategories=["E-COMMERCE", "MARKETING"]
- retail: –º–∞–≥–∞–∑–∏–Ω, —Ç–æ–≤–∞—Ä—ã, –ø—Ä–æ–¥–∞–∂–∏ ‚Üí relevantCategories=["E-COMMERCE", "MARKETING", "CRM"]
- universal: –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Üí relevantCategories=["E-COMMERCE", "MARKETING", "CRM"]`;

    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-exp",
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: "object",
          properties: {
            industry: { type: "string" },
            size: { type: "string" },
            challenges: { type: "array", items: { type: "string" } },
            goals: { type: "array", items: { type: "string" } },
            relevantCategories: { type: "array", items: { type: "string" } },
            keywords: { type: "array", items: { type: "string" } },
            persona: { type: "string" }
          }
        }
      },
      contents: prompt,
    });

    const result = JSON.parse(response.text || '{}');
    console.log('‚úÖ Gemini business analysis result:', result);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    return {
      industry: result.industry || 'universal',
      size: result.size || 'medium',
      challenges: result.challenges || [],
      goals: result.goals || [],
      relevantCategories: result.relevantCategories || ['E-COMMERCE', 'MARKETING', 'CRM'],
      keywords: result.keywords || text.split(/\s+/).filter(word => word.length > 2),
      persona: result.persona || text.slice(0, 50)
    };
  } catch (error) {
    console.log('üö® Gemini analysis failed, using fallback:', error.message);
    // –ü—Ä–æ—Å—Ç–æ–π fallback –µ—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    const keywords = text.split(/\s+/).filter(word => word.length > 2);
    return {
      industry: 'universal',
      size: 'medium',
      challenges: [],
      goals: [],
      relevantCategories: ['E-COMMERCE', 'MARKETING', 'CRM'],
      keywords,
      persona: text.slice(0, 50)
    };
  }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
function calculateModuleRelevance(module: any, analysis: BusinessAnalysis, originalText: string): number {
  let score = 0;
  const userText = originalText.toLowerCase();
  const moduleText = `${module.name} ${module.description} ${module.benefits}`.toLowerCase();
  
  // 1. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const userWords = userText.split(/\s+/).filter(word => word.length > 2);
  userWords.forEach(word => {
    if (moduleText.includes(word)) {
      score += 30; // –ë–∞–∑–æ–≤—ã–µ –±–∞–ª–ª—ã –∑–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      // –î–≤–æ–π–Ω—ã–µ –±–∞–ª–ª—ã –µ—Å–ª–∏ —Å–ª–æ–≤–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –º–æ–¥—É–ª—è
      if (module.name.toLowerCase().includes(word)) {
        score += 30;
      }
    }
  });
  
  // 2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
  if (analysis.relevantCategories.includes(module.category)) {
    // –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±—ã—á–Ω–æ –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è)
    const categoryIndex = analysis.relevantCategories.indexOf(module.category);
    score += (100 - categoryIndex * 20);
  }
  
  // 3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–Ω–¥—É—Å—Ç—Ä–∏–π
  if (module.category === '–û–¢–†–ê–°–õ–ï–í–´–ï –†–ï–®–ï–ù–ò–Ø') {
    if (analysis.industry === 'tourism' && module.number === 261) {
      score += 500; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç—É—Ä–∏–∑–º–∞
    } else if (analysis.industry === 'restaurant' && [236, 237, 238].includes(module.number)) {
      score += 400; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
    } else if (analysis.industry === 'beauty' && module.number === 240) {
      score += 400; // –î–ª—è —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã
    } else if (analysis.industry === 'medical' && module.number === 239) {
      score += 400; // –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∫–ª–∏–Ω–∏–∫
    }
  }
  
  // 4. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞
  if (analysis.industry === 'services' || analysis.industry === 'professional') {
    // –î–ª—è —É—Å–ª—É–≥ (–ø—Å–∏—Ö–æ–ª–æ–≥–∏, —é—Ä–∏—Å—Ç—ã, –∫–æ—É—á–∏) –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∫–ª–∏–Ω–∏–∫—É (–µ—Å—Ç—å –∑–∞–ø–∏—Å—å), –ø–ª–∞—Ç–µ–∂–∏
    const serviceModules = [239, 240, 224]; // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞ (–∑–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á–∞–º), —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã (–∑–∞–ø–∏—Å—å –∫ –º–∞—Å—Ç–µ—Ä–∞–º), –ø–ª–∞—Ç–µ–∂–∏
    if (serviceModules.includes(module.number)) {
      score += 120; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –º–æ–¥—É–ª–µ–π —Å –∑–∞–ø–∏—Å—å—é
    }
    // –ú–µ–Ω—å—à–µ –±–∞–ª–ª–æ–≤ –∑–∞ e-commerce –º–æ–¥—É–ª–∏ –∫—Ä–æ–º–µ –ø–ª–∞—Ç–µ–∂–µ–π
    if (module.category === 'E-COMMERCE' && module.number !== 224) {
      score -= 60;
    }
    // –ú–æ–¥—É–ª–∏ —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º/–∑–∞–ø–∏—Å—å—é –ø–æ–ª—É—á–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
    if (moduleText.includes('–∑–∞–ø–∏—Å—å') || moduleText.includes('–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω') || moduleText.includes('—Ä–∞—Å–ø–∏—Å–∞–Ω')) {
      score += 100;
    }
  } else if (analysis.industry === 'handmade') {
    // –î–ª—è —Ä—É–∫–æ–¥–µ–ª–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ e-commerce, –Ω–æ —Å —É–ø–æ—Ä–æ–º –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
    const handmadeModules = [224, 232, 230]; // –ü–ª–∞—Ç–µ–∂–∏, –ø—Ä–µ–¥–∑–∞–∫–∞–∑—ã, –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if (handmadeModules.includes(module.number)) {
      score += 70;
    }
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –º–æ–¥—É–ª–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    if (moduleText.includes('–ø—Ä–µ–¥–∑–∞–∫–∞–∑') || moduleText.includes('—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤') || 
        moduleText.includes('–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ') || moduleText.includes('–≥–∞–ª–µ—Ä–µ—è')) {
      score += 50;
    }
  } else {
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤ –±–∞–∑–æ–≤—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
    const universalModules = [224, 225]; // –ü–ª–∞—Ç–µ–∂–∏, —Ç—Ä–µ–∫–∏–Ω–≥
    if (universalModules.includes(module.number)) {
      score += 50;
    }
  }
  
  // 5. –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ (–ò–Ω–¥–æ–Ω–µ–∑–∏—è/–ë–∞–ª–∏)
  if (userText.includes('–±–∞–ª–∏') || userText.includes('–∏–Ω–¥–æ–Ω–µ–∑–∏')) {
    if (module.number === 197) score += 200; // GoPay/OVO
    if (module.number === 198) score += 150; // Dana
    if (module.number === 199) score += 150; // LinkAja
  }
  
  // 6. –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø—É –±–∏–∑–Ω–µ—Å–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  if (userText.includes('–¥–æ—Å—Ç–∞–≤–∫')) {
    if (module.number === 237 || module.number === 225) score += 100; // –î–æ—Å—Ç–∞–≤–∫–∞ –∏ —Ç—Ä–µ–∫–∏–Ω–≥
  }
  if (userText.includes('–æ–Ω–ª–∞–π–Ω') || userText.includes('–∏–Ω—Ç–µ—Ä–Ω–µ—Ç')) {
    if (module.category === 'E-COMMERCE') score += 50;
  }
  if (userText.includes('–∫–ª–∏–µ–Ω—Ç') || userText.includes('crm')) {
    if (module.category === 'CRM') score += 60;
  }
  if (userText.includes('–∑–∞–ø–∏—Å—å') || userText.includes('–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω') || userText.includes('–≤—Å—Ç—Ä–µ—á')) {
    if (module.number === 239 || module.number === 240) score += 120; // –ú–æ–¥—É–ª–∏ —Å –∑–∞–ø–∏—Å—å—é
  }
  if (userText.includes('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏') || userText.includes('—Å–µ–∞–Ω—Å') || userText.includes('—É—Å–ª—É–≥')) {
    if (module.category === 'CRM' || module.category === '–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´') score += 60;
  }
  
  // 7. –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
  if (module.category === '–ò–ì–†–´' && !userText.includes('–∏–≥—Ä') && !userText.includes('—Ä–∞–∑–≤–ª–µ—á')) {
    score -= 100;
  }
  
  return Math.max(0, score); // –ù–µ –¥–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
}

export async function analyzeBusinessContext(messages: { role: 'user' | 'assistant'; content: string }[]): Promise<BusinessAnalysis> {
  const userMessages = messages.filter(m => m.role === 'user').map(m => m.content).join(' ');
  return await analyzeBusinessFromText(userMessages);
}

export async function generateAIResponse(messages: { role: 'user' | 'assistant'; content: string }[], alreadyShownModules: number[] = []): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import('./storage');
    const allModules = await storage.getAllModules();
    
    const userText = messages.filter(m => m.role === 'user').map(m => m.content).join(' ');
    
    // –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª—è—Ö –¥–ª—è Gemini
    const modulesList = allModules
      .filter(m => !alreadyShownModules.includes(m.number))
      .map(m => `#${m.number}: ${m.name} - ${m.description} (${m.category})`)
      .join('\n');
    
    const prompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Telegram Mini App –º–æ–¥—É–ª–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${userText}"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:
${modulesList}

–ó–∞–¥–∞—á–∞:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –í—ã–±–µ—Ä–∏ 4 —Å–∞–º—ã—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥—É–ª—è –ø–æ –Ω–æ–º–µ—Ä–∞–º
3. –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [MODULE:–Ω–æ–º–µ—Ä] –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
4. –î–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä—ã —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø–∞–º –±–∏–∑–Ω–µ—Å–∞:
üçΩÔ∏è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, üöó —Ç–∞–∫—Å–∏/—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, üíÑ –∫—Ä–∞—Å–æ—Ç–∞, üè• –º–µ–¥–∏—Ü–∏–Ω–∞, ‚úàÔ∏è —Ç—É—Ä–∏–∑–º, üß† –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, ‚öñÔ∏è —é—Ä–∏—Å—Ç—ã, üß∂ —Ä—É–∫–æ–¥–µ–ª–∏–µ, üõçÔ∏è –º–∞–≥–∞–∑–∏–Ω—ã

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞–º–∏ –º–æ–¥—É–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [MODULE:—á–∏—Å–ª–æ] –∏ –∫—Ä–∞—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —Å —ç–º–æ–¥–∑–∏.`;

    const response = await ai.models.generateContent({
      model: "gemini-2.0-flash-exp",
      contents: prompt,
    });

    const aiText = response.text || '';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä–∞ –º–æ–¥—É–ª–µ–π –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini
    const moduleMatches = aiText.match(/\[MODULE:(\d+)\]/g) || [];
    const recommendedModuleNumbers = moduleMatches
      .map(match => parseInt(match.match(/\d+/)?.[0] || '0'))
      .filter(num => num > 0)
      .slice(0, 4);

    console.log(`üèÜ Gemini recommended modules:`, recommendedModuleNumbers);
    
    return {
      response: aiText,
      recommendedModules: recommendedModuleNumbers
    };
  } catch (error) {
    console.log('üö® –û—à–∏–±–∫–∞ Gemini:', error);
    // –ü—Ä–æ—Å—Ç–æ–π fallback –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
    const availableModules = allModules.filter(m => !alreadyShownModules.includes(m.number));
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
    const scoredModules = availableModules.map(module => ({
      ...module,
      relevanceScore: calculateModuleRelevance(module, analysis, lastUserMessage)
    }));
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-4
    const recommendedModules = scoredModules
      .sort((a, b) => b.relevanceScore - a.relevanceScore)
      .slice(0, 4)
      .map(m => m.number);
    
    console.log(`üèÜ –¢–æ–ø-4 –º–æ–¥—É–ª—è –¥–ª—è ${analysis.persona}:`, recommendedModules);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å –º–æ–¥—É–ª—è–º–∏ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏–π (–æ–Ω–∏ –±—É–¥—É—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö)
    const moduleReferences = recommendedModules.map(num => `[MODULE:${num}]`).join(' ');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞
    let businessTypeEmoji = 'üöÄ';
    switch (analysis.industry) {
      case 'restaurant': businessTypeEmoji = 'üçï'; break;
      case 'tourism': businessTypeEmoji = '‚úàÔ∏è'; break;
      case 'beauty': businessTypeEmoji = 'üíÑ'; break;
      case 'medical': businessTypeEmoji = 'üè•'; break;
      case 'services': businessTypeEmoji = 'üß†'; break;
      case 'professional': businessTypeEmoji = '‚öñÔ∏è'; break;
      case 'handmade': businessTypeEmoji = 'üß∂'; break;
      case 'retail': businessTypeEmoji = 'üõçÔ∏è'; break;
      case 'nonprofit': businessTypeEmoji = '‚ù§Ô∏è'; break;
      default: businessTypeEmoji = 'üöÄ'; break;
    }
    
    const cleanResponse = `${businessTypeEmoji} –î–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –∏ —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å:\n\n${moduleReferences}`;
    
    return {
      response: cleanResponse,
      recommendedModules
    };
    
  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ AI:', error);
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏
    const basicModules = [224, 225, 15, 13]; // –ü–ª–∞—Ç–µ–∂–∏, —Ç—Ä–µ–∫–∏–Ω–≥, –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
    
    const moduleReferences = basicModules
      .filter(num => !alreadyShownModules.includes(num))
      .map(num => `[MODULE:${num}]`)
      .join(' ');
    
    return {
      response: `üöÄ –†–µ–∫–æ–º–µ–Ω–¥—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:\n\n${moduleReferences}`,
      recommendedModules: basicModules.filter(num => !alreadyShownModules.includes(num))
    };
  }
}