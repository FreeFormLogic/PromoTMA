// Smart module recommendation system without external AI dependency
export interface BusinessAnalysis {
  industry: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
}

// Business patterns for intelligent module matching
const BUSINESS_PATTERNS = {
  restaurant: {
    keywords: ["—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–ø–∏—Ü—Ü–µ—Ä–∏—è", "–∫–∞—Ñ–µ", "–µ–¥–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞", "–∑–∞–∫–∞–∑", "–º–µ–Ω—é", "–æ—Ñ–∏—Ü–∏–∞–Ω—Ç"],
    categories: ["E-COMMERCE", "–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï", "–ú–ê–†–ö–ï–¢–ò–ù–ì", "CRM"],
    recommendedModules: [145, 5, 55, 56, 165] // –ó–∞–∫–∞–∑—ã, –ø–ª–∞—Ç–µ–∂–∏, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, CRM, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
  },
  retail: {
    keywords: ["–º–∞–≥–∞–∑–∏–Ω", "—Ç–æ–≤–∞—Ä", "–ø—Ä–æ–¥–∞–∂–∏", "—Å–∫–ª–∞–¥", "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "–ø–æ–∫—É–ø–∞—Ç–µ–ª—å"],
    categories: ["E-COMMERCE", "–ú–ê–†–ö–ï–¢–ò–ù–ì", "CRM", "–õ–û–ì–ò–°–¢–ò–ö–ê"],
    recommendedModules: [1, 2, 3, 5, 21, 46] // –í–∏—Ç—Ä–∏–Ω–∞, –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ä–∑–∏–Ω–∞, –ø–ª–∞—Ç–µ–∂–∏
  },
  hotel: {
    keywords: ["–æ—Ç–µ–ª—å", "–≥–æ—Å—Ç–∏–Ω–∏—Ü", "–Ω–æ–º–µ—Ä", "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∑–∞—Å–µ–ª–µ–Ω–∏–µ", "—Ç—É—Ä–∏–∑–º"],
    categories: ["–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï", "CRM", "–ú–ê–†–ö–ï–¢–ò–ù–ì", "–§–ò–ù–¢–ï–•"],
    recommendedModules: [55, 56, 57, 18, 108] // –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–∞–ª–µ–Ω–¥–∞—Ä—å, CRM
  },
  fitness: {
    keywords: ["—Ñ–∏—Ç–Ω–µ—Å", "—Å–ø–æ—Ä—Ç–∑–∞–ª", "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", "–∞–±–æ–Ω–µ–º–µ–Ω—Ç", "–∑–∞–ª", "—Ç—Ä–µ–Ω–µ—Ä"],
    categories: ["–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï", "CRM", "–ú–ê–†–ö–ï–¢–ò–ù–ì", "–§–ò–¢–ù–ï–°"],
    recommendedModules: [221, 56, 57, 108, 224] // –§–∏—Ç–Ω–µ—Å —Ü–µ–Ω—Ç—Ä, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  },
  beauty: {
    keywords: ["—Å–∞–ª–æ–Ω", "–∫—Ä–∞—Å–æ—Ç–∞", "—Å—Ç—Ä–∏–∂–∫–∞", "–º–∞–Ω–∏–∫—é—Ä", "—É—Å–ª—É–≥–∞", "–º–∞—Å—Ç–µ—Ä"],
    categories: ["–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï", "CRM", "–ú–ê–†–ö–ï–¢–ò–ù–ì"],
    recommendedModules: [222, 56, 57, 18, 108] // –°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  },
  medical: {
    keywords: ["–∫–ª–∏–Ω–∏–∫–∞", "–≤—Ä–∞—á", "–ø—Ä–∏–µ–º", "–ø–∞—Ü–∏–µ–Ω—Ç", "–º–µ–¥–∏—Ü–∏–Ω–∞", "–ª–µ—á–µ–Ω–∏–µ"],
    categories: ["–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï", "CRM", "–ú–ï–î–ò–¶–ò–ù–ê"],
    recommendedModules: [219, 56, 57, 18] // –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–ª–∏–Ω–∏–∫–∞, –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º
  },
  education: {
    keywords: ["—à–∫–æ–ª–∞", "–∫—É—Ä—Å—ã", "–æ–±—É—á–µ–Ω–∏–µ", "—Å—Ç—É–¥–µ–Ω—Ç", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "—É—Ä–æ–∫"],
    categories: ["–û–ë–†–ê–ó–û–í–ê–ù–ò–ï", "CRM", "–ú–ê–†–ö–ï–¢–ò–ù–ì"],
    recommendedModules: [229, 56, 18, 108] // –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä, CRM
  },
  auto: {
    keywords: ["–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å", "—Ä–µ–º–æ–Ω—Ç", "–º–∞—à–∏–Ω–∞", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ"],
    categories: ["–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï", "CRM", "–ê–í–¢–û–°–ï–†–í–ò–°"],
    recommendedModules: [223, 56, 18, 108] // –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  }
};

export async function analyzeBusinessContext(messages: string[]): Promise<BusinessAnalysis> {
  console.log("üöÄ Stage 1: Starting smart business analysis...");
  
  const messageText = messages.join(" ").toLowerCase();
  let detectedBusiness = null;
  
  // Smart pattern matching
  for (const [businessType, pattern] of Object.entries(BUSINESS_PATTERNS)) {
    const matchCount = pattern.keywords.filter(keyword => 
      messageText.includes(keyword)
    ).length;
    
    if (matchCount > 0) {
      detectedBusiness = { type: businessType, ...pattern, score: matchCount };
      break;
    }
  }
  
  // Fallback to general business
  if (!detectedBusiness) {
    detectedBusiness = {
      type: "general",
      categories: ["E-COMMERCE", "–ú–ê–†–ö–ï–¢–ò–ù–ì", "CRM"],
      recommendedModules: [1, 5, 18, 46]
    };
  }
  
  console.log(`‚úÖ Stage 1: Detected business type: ${detectedBusiness.type}`);
  
  return {
    industry: detectedBusiness.type,
    challenges: [],
    goals: [],
    relevantCategories: detectedBusiness.categories,
    keywords: []
  };
}

export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import("./storage");
    const allModules = await storage.getAllModules();
    console.log(`ü§ñ AI processing ${allModules.length} total modules.`);

    // Stage 1: Smart business analysis
    const messageTexts = messages.map(m => `${m.role}: ${m.content}`);
    const analysis = await analyzeBusinessContext(messageTexts);
    
    console.log(`üß† Stage 2: Business type detected as: ${analysis.industry}`);
    
    // Stage 2: Get business pattern recommendations
    const businessPattern = BUSINESS_PATTERNS[analysis.industry as keyof typeof BUSINESS_PATTERNS];
    let recommendedModuleNumbers: number[] = [];
    
    if (businessPattern) {
      recommendedModuleNumbers = businessPattern.recommendedModules
        .filter(num => !alreadyShownModules.includes(num))
        .slice(0, 3); // –ú–∞–∫—Å–∏–º—É–º 3 –º–æ–¥—É–ª—è –∑–∞ —Ä–∞–∑
    } else {
      // Fallback –¥–ª—è –æ–±—â–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤
      recommendedModuleNumbers = [1, 5, 18].filter(num => !alreadyShownModules.includes(num));
    }
    
    console.log(`üéØ Stage 3: Selected modules: ${recommendedModuleNumbers}`);
    
    // Stage 3: Get actual module data and create descriptions
    const recommendedModules = allModules.filter(module => 
      recommendedModuleNumbers.includes(module.number)
    );
    
    // Create smart, contextual descriptions
    const responseLines = recommendedModules.map(module => {
      let contextualDescription = "";
      
      // Create business-specific descriptions
      switch (analysis.industry) {
        case "restaurant":
          if (module.number === 145) contextualDescription = "–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑, —É–ø—Ä–∞–≤–ª—è—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –æ—Ç –≥–æ—Ç–æ–≤–∫–∏ –¥–æ –≤—Ä—É—á–µ–Ω–∏—è.";
          else if (module.number === 5) contextualDescription = "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞–º –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –æ–Ω–ª–∞–π–Ω –∫–∞—Ä—Ç–æ–π –∏–ª–∏ —á–µ—Ä–µ–∑ Telegram Pay.";
          else if (module.number === 165) contextualDescription = "–ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º: –º–µ–Ω—é, –∑–∞–∫–∞–∑—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.";
          else if (module.number === 55) contextualDescription = "–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π.";
          break;
          
        case "retail":
          if (module.number === 1) contextualDescription = "–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –≤–∏—Ç—Ä–∏–Ω—É —Ç–æ–≤–∞—Ä–æ–≤ —Å —É–º–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º.";
          else if (module.number === 2) contextualDescription = "–î–µ—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.";
          else if (module.number === 3) contextualDescription = "–£–º–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –±—ã—Å—Ç—Ä—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–æ–≤.";
          break;
          
        case "hotel":
          if (module.number === 55) contextualDescription = "–°–∏—Å—Ç–µ–º–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏.";
          else if (module.number === 56) contextualDescription = "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –Ω–æ–º–µ—Ä–æ–≤.";
          break;
          
        default:
          contextualDescription = module.description.length > 100 ? 
            module.description.substring(0, 97) + "..." : module.description;
      }
      
      if (!contextualDescription) {
        contextualDescription = module.description.length > 80 ? 
          module.description.substring(0, 77) + "..." : module.description;
      }
      
      return `[MODULE:${module.number}] ${contextualDescription}`;
    });
    
    console.log("‚úÖ Stage 4: Generated contextual recommendations");
    
    return {
      response: responseLines.join("\n"),
      recommendedModules: recommendedModuleNumbers,
    };

  } catch (error) {
    console.error("AI Main Logic Error:", error);
    return {
      response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
      recommendedModules: [],
    };
  }
}