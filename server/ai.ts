// –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini 2.5 Pro —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent";
const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

export interface BusinessAnalysis {
  industry: string;
  size: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
  persona: string;
}

export async function analyzeBusinessContext(
  messages: string[],
): Promise<BusinessAnalysis> {
  try {
    const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –∏–∑–≤–ª–µ–∫–∏ –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê - –ò–ó–£–ß–ò–¢–¨ –ù–ò–®–£ –ö–õ–ò–ï–ù–¢–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –∏ –µ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É
2. –í—ã—è–≤–∏ –±–æ–ª–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
3. –ü–æ–π–º–∏ –±–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
4. –ù–∞–π–¥–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏

–ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –õ–Æ–ë–û–ô –ù–ò–®–ò

–î–õ–Ø –ö–ê–ñ–î–û–ô –ù–ò–®–ò –ê–ù–ê–õ–ò–ó–ò–†–£–ô:
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ workflow
- –¢–∏–ø–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É–∑–∫–∏–µ –º–µ—Å—Ç–∞
- –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—é

–í–µ—Ä–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π JSON:
- industry: —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∏—à–∏
- size: —Ä–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞
- challenges: –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–∏—à–∏
- goals: —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
- relevantCategories: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è —ç—Ç–æ–π –Ω–∏—à–∏
- keywords: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –Ω–∏—à–∏
- persona: –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –µ–≥–æ –±–∏–∑–Ω–µ—Å–∞

–†–∞–∑–≥–æ–≤–æ—Ä:
${messages.join("\n")}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    const response = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É. –ò–∑—É—á–∞–π –ª—é–±—É—é –Ω–∏—à—É –∏ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n${prompt}`,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: 1200,
          temperature: 0.1,
        },
      }),
    });

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (content) {
      let responseText = content.trim();

      // Remove markdown code blocks if present
      if (responseText.startsWith("```json")) {
        responseText = responseText
          .replace(/^```json\s*/, "")
          .replace(/\s*```$/, "");
      } else if (responseText.startsWith("```")) {
        responseText = responseText
          .replace(/^```\s*/, "")
          .replace(/\s*```$/, "");
      }

      return JSON.parse(responseText);
    }

    throw new Error("Invalid response format");
  } catch (error) {
    console.error("Error analyzing business context:", error);
    return {
      industry: "general",
      size: "medium",
      challenges: [],
      goals: [],
      relevantCategories: [],
      keywords: [],
      persona: "general business",
    };
  }
}

export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import("./storage");
    const allModules = await storage.getAllModules();
    console.log(`üîç AI processing ${allModules.length} modules`);

    const systemPrompt = `
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä IT-—Ä–µ—à–µ–Ω–∏–π. –¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –æ–±—â–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É, —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É –ø—Ä–æ—Ç–æ—Ç–∏–ø—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Telegram Mini App. –¢—ã –¥–æ–ª–∂–µ–Ω –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Å—Ç—Ä–∞—Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—É—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞.

**–¢–í–û–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –î–ò–ê–õ–û–ì–ê:**

1.  **–°–õ–£–®–ê–ô –ò –ê–ù–ê–õ–ò–ó–ò–†–£–ô:** –ì–ª—É–±–æ–∫–æ –≤–Ω–∏–∫–∞–π –≤ –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∫–ª–∏–µ–Ω—Ç–∞. –¢–≤–æ—è –ø–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ç–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –µ–≥–æ –±–∏–∑–Ω–µ—Å–µ: —á—Ç–æ –æ–Ω –ø—Ä–æ–¥–∞–µ—Ç (—Ç–æ–≤–∞—Ä –∏–ª–∏ —É—Å–ª—É–≥—É), –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç—ã –µ–≥–æ –Ω–∞—Ö–æ–¥—è—Ç, –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–ø–ª–∞—Ç–∞, —Å –∫–∞–∫–∏–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –æ–Ω —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è.

2.  **–ù–ê–ß–ù–ò –° –ì–õ–ê–í–ù–û–ì–û:** –í —Å–≤–æ–µ–º –ø–µ—Ä–≤–æ–º –æ—Ç–≤–µ—Ç–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–∞–º—ã–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ –æ—á–µ–≤–∏–¥–Ω—ã–µ –º–æ–¥—É–ª–∏. –ï—Å–ª–∏ —ç—Ç–æ –º–∞–≥–∞–∑–∏–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–∞—Ç–∞–ª–æ–≥ –∏ –ø—Ä–∏–µ–º –ø–ª–∞—Ç–µ–∂–µ–π. –ï—Å–ª–∏ —ç—Ç–æ —É—Å–ª—É–≥–∏ ‚Äî –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —Ç—ã –µ–≥–æ –ø–æ–Ω–∏–º–∞–µ—à—å.

3.  **–ó–ê–î–ê–í–ê–ô –£–¢–û–ß–ù–Ø–Æ–©–ò–ï –í–û–ü–†–û–°–´:** –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, —Å—Ç–∏–º—É–ª–∏—Ä—É–π –¥–∏–∞–ª–æ–≥. –ó–∞–¥–∞–≤–∞–π –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –≥–ª—É–±–∂–µ –ø–æ–Ω—è—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: "–û—Ç–ª–∏—á–Ω–æ, —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –æ–ø–ª–∞—Ç–æ–π —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å. –ê –∫–∞–∫ –≤—ã —Å–µ–π—á–∞—Å –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤? –í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞–º —Å—Ç–æ–∏—Ç –ø–æ–¥—É–º–∞—Ç—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?" –∏–ª–∏ "–í–∏–∂—É, —á—Ç–æ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å –¥–ª—è –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Ç–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –≤–∏–∑–∏—Ç–µ?".

4.  **–ê–î–ê–ü–¢–ò–†–£–ô–°–Ø –ò –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–£–ô:** –ö–∞–∂–¥–æ–µ —Ç–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ "—è–∑—ã–∫–æ–º –∫–ª–∏–µ–Ω—Ç–∞". –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã. –ü—Ä–∏–≤—è–∑—ã–≤–∞–π –ø–æ–ª—å–∑—É –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–¥–∞—á–∞–º –∏ –ø—Ä–æ–±–ª–µ–º–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –æ–∑–≤—É—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

**–ü–†–ê–í–ò–õ–ê –û–§–û–†–ú–õ–ï–ù–ò–Ø:**

-   **–§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ:** \`[MODULE:–ù–û–ú–ï–†] –ö—Ä–∞—Ç–∫–æ–µ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.\`
-   **–ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ:** –ù–µ –¥—É–±–ª–∏—Ä—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –≤ —Ç–µ–∫—Å—Ç–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown-—Å–∏–º–≤–æ–ª—ã (\`, *, -).
-   **–ß–∏—Å—Ç–æ—Ç–∞ –∏ –ø–æ—Ä—è–¥–æ–∫:** –ù–∞—á–∏–Ω–∞–π –∫–∞–∂–¥–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.
-   **–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:** –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –º–æ–¥—É–ª–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: [${alreadyShownModules.join(
      ", ",
    )}].

**–ü—Ä–∏–º–µ—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏:**
* *–ö–ª–∏–µ–Ω—Ç:* "–£ –º–µ–Ω—è –∫–æ—Ñ–µ–π–Ω—è".
* *–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç (–±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏):*
    \`[MODULE:1] –ü–æ–∑–≤–æ–ª–∏—Ç –≤–∞—à–∏–º –≥–æ—Å—Ç—è–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é –∏ —Ü–µ–Ω–∞–º–∏ –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ.\`
    \`[MODULE:5] –î–∞—Å—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—É –∑–∞ –∑–∞–∫–∞–∑—ã "—Å —Å–æ–±–æ–π", —É–º–µ–Ω—å—à–∞—è –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∫–∞—Å—Å–µ.\`
    \`[MODULE:12] –£–ø—Ä–æ—Å—Ç–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: –∫–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –∫–æ–ø–∏—Ç—å –±–æ–Ω—É—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å —Å–∫–∏–¥–∫–∏, —á—Ç–æ –±—É–¥–µ—Ç –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –∫ –≤–∞–º.\`
* *–¢–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ (—É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å):* "–≠—Ç–æ –æ—Å–Ω–æ–≤–∞. –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–¥—É–º–∞–µ–º, –∫–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫. –í—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –∫–æ–º–±–æ-–Ω–∞–±–æ—Ä—ã –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É?"

–¢–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –¥–∞–π —Å–≤–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
`;

    const apiResponse = await fetch(GEMINI_API_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `${systemPrompt}\n\n–î–∏–∞–ª–æ–≥:\n${messages
                  .map(
                    (msg) =>
                      `${
                        msg.role === "user" ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                      }: ${msg.content}`,
                  )
                  .join("\n")}`,
              },
            ],
          },
        ],
        generationConfig: {
          maxOutputTokens: 2048,
          temperature: 0.2, // –°–ª–µ–≥–∫–∞ –ø–æ–≤—ã—Å–∏–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ –∂–∏–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        },
      }),
    });

    if (!apiResponse.ok) {
      const errorText = await apiResponse.text();
      console.error("Gemini API Error:", apiResponse.status, errorText);
      throw new Error(`API failed: ${apiResponse.status} - ${errorText}`);
    }

    const apiData = await apiResponse.json();
    console.log("Full API Response:", JSON.stringify(apiData, null, 2));

    const aiContent = apiData.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!aiContent) {
      console.error("No AI content found in response:", apiData);
      console.error("Candidates:", apiData.candidates);
      throw new Error("No AI response content");
    }

    console.log("AI Response Preview:", aiContent.substring(0, 100));

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    let cleanedContent = aiContent
      .replace(/\*\*\s*\[MODULE:(\d+)\]\s*([^*]+)\*\*\s*[:-]/gi, "[MODULE:$1]") // –£–±–∏—Ä–∞–µ–º **[MODULE:X] –ù–∞–∑–≤–∞–Ω–∏–µ** -
      .replace(/\*\s*\*\*\s*/g, "") // –£–±–∏—Ä–∞–µ–º * **
      .replace(/\*\*\s*-\s*/g, "") // –£–±–∏—Ä–∞–µ–º ** -
      .replace(/\*\*([^*]+)\*\*:/g, "$1:") // –ó–∞–º–µ–Ω—è–µ–º **–¢–µ–∫—Å—Ç**: –Ω–∞ –¢–µ–∫—Å—Ç:
      .replace(/\n\*\s*\*\*/g, "\n") // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å * **
      .trim();

    const moduleMatches = cleanedContent.match(/\[MODULE:(\d+)\]/gi) || [];
    const recommendedModules: number[] = [];

    for (const match of moduleMatches) {
      const numberMatch = match.match(/\[MODULE:(\d+)\]/i);
      if (numberMatch) {
        const moduleNumber = parseInt(numberMatch[1]);
        if (!alreadyShownModules.includes(moduleNumber)) {
          recommendedModules.push(moduleNumber);
        }
      }
    }

    return {
      response: cleanedContent,
      recommendedModules: Array.from(new Set(recommendedModules)).sort(
        (a, b) => a - b,
      ),
    };
  } catch (error) {
    console.error("AI Error:", error);
    return {
      response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
      recommendedModules: [],
    };
  }
}
