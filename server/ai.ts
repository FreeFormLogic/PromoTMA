// PromoTMA/server/ai.ts
import { GoogleGenerativeAI } from "@google/generative-ai";
import { storage } from "./storage";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI —Å –≤–∞—à–∏–º –∫–ª—é—á–æ–º
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å

export interface BusinessAnalysis {
  industry: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
}

/**
 * –≠–¢–ê–ü 1: AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—É—Ç—å –±–∏–∑–Ω–µ—Å–∞.
 */
export async function analyzeBusinessContext(
  messages: string[],
): Promise<BusinessAnalysis> {
  console.log("üöÄ Stage 1: Starting business analysis with Gemini...");
  const conversationText = messages.join("\n");

  const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—É—Ç—å –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞. –ò—Å–ø—Ä–∞–≤—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∏—à—É –±–∏–∑–Ω–µ—Å–∞ (industry).
2. –í—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (challenges) –∏ —Ü–µ–ª–∏ (goals).
3. –û–ø—Ä–µ–¥–µ–ª–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π (relevantCategories), –Ω–∞–ø—Ä–∏–º–µ—Ä: E-COMMERCE, –ú–ê–†–ö–ï–¢–ò–ù–ì, –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï, CRM, –¢–£–†–ò–ó–ú.
4. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (keywords), –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —ç—Ç–æ—Ç –±–∏–∑–Ω–µ—Å.

–î–ò–ê–õ–û–ì:
${conversationText}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü—Ä–∏–º–µ—Ä –¥–ª—è "—Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ":
{
  "industry": "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ",
  "challenges": ["–ü–æ–¥–±–æ—Ä —Ç—É—Ä–æ–≤", "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏", "–ü—Ä–∏–µ–º –æ–ø–ª–∞—Ç"],
  "goals": ["–£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ —Ç—É—Ä–æ–≤", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"],
  "relevantCategories": ["–ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï", "CRM", "–§–ò–ù–¢–ï–•", "E-COMMERCE"],
  "keywords": ["—Ç—É—Ä—ã", "–æ—Ç–µ–ª–∏", "–ø—É—Ç–µ–≤–∫–∏", "–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–ª–∏–µ–Ω—Ç—ã", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"]
}`;

  try {
    const result = await model.generateContent(prompt, {
        responseMimeType: "application/json",
    });
    const responseText = result.response.text();
    const analysis = JSON.parse(responseText);
    console.log("‚úÖ Stage 1: Analysis complete:", analysis);
    return analysis;
  } catch (error) {
    console.error("‚ùå Gemini analysis failed:", error);
    // –í —Å–ª—É—á–∞–µ —Å–±–æ—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
    return {
      industry: "general business",
      challenges: [],
      goals: [],
      relevantCategories: ["E-COMMERCE", "–ú–ê–†–ö–ï–¢–ò–ù–ì"],
      keywords: [],
    };
  }
}

/**
 * –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ AI.
 */
function calculateModuleRelevance(module: any, analysis: BusinessAnalysis): number {
  let score = 0;
  const searchText = `${module.name} ${module.description} ${module.category}`.toLowerCase();

  if (analysis.relevantCategories.some(cat => searchText.includes(cat.toLowerCase()))) {
    score += 50;
  }
  for (const keyword of analysis.keywords) {
    if (searchText.includes(keyword.toLowerCase())) {
      score += 20;
    }
  }
  return score;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è —á–∞—Ç–∞.
 */
export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const userMessages = messages.map((m) => m.content);

    // --- –≠–¢–ê–ü 1: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ ---
    const analysis = await analyzeBusinessContext(userMessages);

    // --- –≠–¢–ê–ü 2: –õ–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä —Å–∞–º—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –í–°–ï–ô –±–∞–∑—ã ---
    const allModules = await storage.getAllModules();
    console.log(`üß† Stage 2: Filtering all ${allModules.length} modules based on AI analysis...`);

    const scoredModules = allModules
      .map(module => ({
        ...module,
        relevanceScore: calculateModuleRelevance(module, analysis),
      }))
      .filter(module => !alreadyShownModules.includes(module.number) && module.relevanceScore > 0);

    scoredModules.sort((a, b) => b.relevanceScore - a.relevanceScore);
    const topModules = scoredModules.slice(0, 40); // –ë–µ—Ä–µ–º —Ç–æ–ø-40 –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    if (topModules.length === 0) {
      console.warn("‚ö†Ô∏è No relevant modules found after local filtering.");
      return {
        response: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥—É–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
        recommendedModules: [],
      };
    }

    const modulesDatabase = topModules.map(m => `[MODULE:${m.number}] ${m.name} - ${m.description}`).join("\n");
    console.log(`üéØ Stage 2: Selected ${topModules.length} most relevant modules for final recommendation.`);

    // --- –≠–¢–ê–ü 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π ---
    const systemPrompt = `–¢—ã ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑—É—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –°–ü–ò–°–û–ö –õ–£–ß–®–ò–• –ú–û–î–£–õ–ï–ô –∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –Ω–µ–≥–æ 4-5 —Å–∞–º—ã—Ö –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.

–°–ü–ò–°–û–ö –õ–£–ß–®–ò–• –ú–û–î–£–õ–ï–ô (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏):
---
${modulesDatabase}
---

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1.  –ò–∑—É—á–∏ –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –±–∏–∑–Ω–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (${analysis.industry}). –ï–≥–æ —Ü–µ–ª–∏: ${analysis.goals.join(", ")}.
2.  –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ 4-5 –°–ê–ú–´–• –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥—É–ª—è.
3.  –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (15-20 —Å–ª–æ–≤), –ø–æ–∫–∞–∑—ã–≤–∞—è, –∫–∞–∫ –º–æ–¥—É–ª—å —Ä–µ—à–∏—Ç –∑–∞–¥–∞—á—É –∫–ª–∏–µ–Ω—Ç–∞.

–°–ê–ú–´–ï –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
-   –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –¢–û–õ–¨–ö–û –∏–∑ —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ \`[MODULE:–ù–û–ú–ï–†] –¢–≤–æ–π –Ω–æ–≤—ã–π, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\`.
-   –û–ü–ò–°–ê–ù–ò–ï –í–°–ï–ì–î–ê –ò–î–ï–¢ –ü–û–°–õ–ï ID –ú–û–î–£–õ–Ø.
-   –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø—Ä–æ—â–∞–Ω–∏–π –∏–ª–∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
`;

    console.log("üöÄ Stage 3: Sending final recommendation request to AI...");
    const result = await model.generateContent(`${systemPrompt}\n\n–î–∏–∞–ª–æ–≥:\n${messages.map(msg => `${msg.role === "user" ? "–ö–ª–∏–µ–Ω—Ç" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}: ${msg.content}`).join("\n")}`);
    const aiContent = result.response.text();

    console.log("‚úÖ Stage 3: Received AI response.");

    const responseLines = aiContent.trim().split("\n").filter(line => line.includes("[MODULE:"));
    if (responseLines.length === 0) {
      console.warn("AI returned content, but no valid module lines found.");
      return { response: "–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ.", recommendedModules: [] };
    }

    const finalResponse = responseLines.join("\n");
    const recommendedModules = responseLines.map(line => {
        const match = line.match(/\[MODULE:(\d+)\]/i);
        return match ? parseInt(match[1]) : 0;
    }).filter(id => id > 0 && !alreadyShownModules.includes(id));

    return {
      response: finalResponse,
      recommendedModules: [...new Set(recommendedModules)].sort((a, b) => a - b),
    };
  } catch (error) {
    console.error("AI Main Logic Error:", error);
    return {
      response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
      recommendedModules: [],
    };
  }
}