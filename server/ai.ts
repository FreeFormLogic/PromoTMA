// PromoTMA/server/ai.ts

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini 2.5 Pro —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
const GEMINI_API_URL =
  "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent";
const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;

export interface BusinessAnalysis {
  industry: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Å–±–æ—è—Ö.
 */
async function fetchWithRetry(
  url: string,
  options: RequestInit,
  maxRetries = 3,
): Promise<any> {
  for (let i = 0; i < maxRetries; i++) {
    try {
      const response = await fetch(url, options);

      if (response.ok) {
        return await response.json();
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ (rate limiting)
      if (response.status === 429 && i < maxRetries - 1) {
        const delay = Math.pow(2, i) * 1000 + Math.random() * 1000; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        console.warn(
          `Rate limit hit. Retrying in ${Math.round(delay / 1000)}s... (Attempt ${i + 1}/${maxRetries})`,
        );
        await new Promise((res) => setTimeout(res, delay));
        continue; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ
      }

      // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
      const errorText = await response.text();
      console.error(
        `API call failed with status ${response.status}:`,
        errorText,
      );
      throw new Error(`API call failed with status ${response.status}`);
    } catch (error) {
      console.error(`Fetch attempt ${i + 1} failed:`, error);
      if (i === maxRetries - 1) throw error; // –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
    }
  }
  throw new Error("API call failed after multiple retries.");
}

export async function analyzeBusinessContext(
  messages: string[],
): Promise<BusinessAnalysis> {
  const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å—É—Ç—å –±–∏–∑–Ω–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∏—à—É –±–∏–∑–Ω–µ—Å–∞ (industry).
2. –í—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (challenges) –∏ —Ü–µ–ª–∏ (goals).
3. –û–ø—Ä–µ–¥–µ–ª–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π (relevantCategories), –Ω–∞–ø—Ä–∏–º–µ—Ä: E-COMMERCE, –ú–ê–†–ö–ï–¢–ò–ù–ì, –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï, CRM.
4. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (keywords), –æ–ø–∏—Å—ã–≤–∞—é—â–∏–µ —ç—Ç–æ—Ç –±–∏–∑–Ω–µ—Å.

–î–ò–ê–õ–û–ì:
${messages.join("\n")}

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü—Ä–∏–º–µ—Ä:
{
  "industry": "–ü–∏—Ü—Ü–µ—Ä–∏—è –Ω–∞ –ë–∞–ª–∏",
  "challenges": ["–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–æ–≤", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"],
  "goals": ["–£–≤–µ–ª–∏—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑—ã", "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"],
  "relevantCategories": ["E-COMMERCE", "–ú–ê–†–ö–ï–¢–ò–ù–ì", "–õ–û–ì–ò–°–¢–ò–ö–ê"],
  "keywords": ["–ø–∏—Ü—Ü–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞", "–º–µ–Ω—é", "–æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑", "–ë–∞–ª–∏", "—Ç—É—Ä–∏—Å—Ç—ã"]
}`;

  try {
    const options = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [{ parts: [{ text: prompt }] }],
        generationConfig: {
          maxOutputTokens: 1024,
          temperature: 0.1,
          responseMimeType: "application/json",
        },
      }),
    };

    const data = await fetchWithRetry(GEMINI_API_URL, options);
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!content) {
      console.error(
        "No content in analysis response:",
        JSON.stringify(data, null, 2),
      );
      throw new Error("No content in analysis response");
    }
    return JSON.parse(content);
  } catch (error) {
    console.error("Failed to analyze business context:", error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
    return {
      industry: "general business",
      challenges: [],
      goals: [],
      relevantCategories: ["E-COMMERCE", "–ú–ê–†–ö–ï–¢–ò–ù–ì"],
      keywords: [],
    };
  }
}

function calculateModuleRelevance(
  module: any,
  analysis: BusinessAnalysis,
): number {
  let score = 0;
  const searchText =
    `${module.title} ${module.description} ${module.category}`.toLowerCase();

  if (
    analysis.relevantCategories.some((cat) =>
      searchText.includes(cat.toLowerCase()),
    )
  ) {
    score += 50;
  }
  for (const keyword of analysis.keywords) {
    if (searchText.includes(keyword.toLowerCase())) {
      score += 20;
    }
  }
  return score;
}

export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const userMessages = messages.map((m) => m.content);

    // --- –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞ ---
    console.log("üöÄ Stage 1: Starting business analysis...");
    const analysis = await analyzeBusinessContext(userMessages);
    console.log("‚úÖ Stage 1: Analysis complete:", analysis);

    // --- –≠–¢–ê–ü 2: –õ–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–±–æ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π ---
    const { storage } = await import("./storage");
    const allModules = await storage.getAllModules();

    const scoredModules = allModules
      .map((module) => ({
        ...module,
        relevanceScore: calculateModuleRelevance(module, analysis),
      }))
      .filter(
        (module) =>
          !alreadyShownModules.includes(module.id) && module.relevanceScore > 0,
      );

    scoredModules.sort((a, b) => b.relevanceScore - a.relevanceScore);
    const topModules = scoredModules.slice(0, 40);

    if (topModules.length === 0) {
      console.warn("‚ö†Ô∏è No relevant modules found after local filtering.");
      return {
        response:
          "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥—É–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
        recommendedModules: [],
      };
    }

    const modulesDatabase = topModules
      .map((m) => `[MODULE:${m.id}] ${m.title} - ${m.description}`)
      .join("\n");
    console.log(
      `üß† Stage 2: Selected ${topModules.length} relevant modules to send for final recommendation.`,
    );

    // --- –≠–¢–ê–ü 3: –§–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini —Å –ª—É—á—à–∏–º–∏ –º–æ–¥—É–ª—è–º–∏ ---
    const systemPrompt = `–¢—ã ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑—É—á–∏—Ç—å –¥–∏–∞–ª–æ–≥, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –°–ü–ò–°–û–ö –õ–£–ß–®–ò–• –ú–û–î–£–õ–ï–ô –∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –Ω–µ–≥–æ 4-5 —Å–∞–º—ã—Ö –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.

–°–ü–ò–°–û–ö –õ–£–ß–®–ò–• –ú–û–î–£–õ–ï–ô (—É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏):
---
${modulesDatabase}
---

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1.  –ò–∑—É—á–∏ –¥–∏–∞–ª–æ–≥, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –±–∏–∑–Ω–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (${analysis.industry}). –ï–≥–æ —Ü–µ–ª–∏: ${analysis.goals.join(", ")}.
2.  –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ 4-5 –°–ê–ú–´–• –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥—É–ª—è.
3.  –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–æ–µ, –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ (15-20 —Å–ª–æ–≤), –ø–æ–∫–∞–∑—ã–≤–∞—è, –∫–∞–∫ –º–æ–¥—É–ª—å —Ä–µ—à–∏—Ç –∑–∞–¥–∞—á—É –∫–ª–∏–µ–Ω—Ç–∞.

–°–ê–ú–´–ï –°–¢–†–û–ì–ò–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
-   –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –¢–û–õ–¨–ö–û –∏–∑ —Å—Ç—Ä–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∞ \`[MODULE:–ù–û–ú–ï–†] –¢–≤–æ–π –Ω–æ–≤—ã–π, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\`.
-   –û–ü–ò–°–ê–ù–ò–ï –í–°–ï–ì–î–ê –ò–î–ï–¢ –ü–û–°–õ–ï ID –ú–û–î–£–õ–Ø.
-   –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø—Ä–æ—â–∞–Ω–∏–π –∏–ª–∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
`;

    const options = {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-goog-api-key": GEMINI_API_KEY!,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: `${systemPrompt}\n\n–î–∏–∞–ª–æ–≥:\n${messages.map((msg) => `${msg.role === "user" ? "–ö–ª–∏–µ–Ω—Ç" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"}: ${msg.content}`).join("\n")}`,
              },
            ],
          },
        ],
        generationConfig: { maxOutputTokens: 2048, temperature: 0.25 },
      }),
    };

    console.log("üöÄ Stage 3: Sending final recommendation request to AI...");
    const data = await fetchWithRetry(GEMINI_API_URL, options);

    const candidate = data.candidates?.[0];
    if (!candidate) {
      const blockReason = data.promptFeedback?.blockReason;
      if (blockReason) {
        console.error(
          `Request blocked by safety filters. Reason: ${blockReason}`,
        );
        throw new Error(`Safety filters blocked the request: ${blockReason}`);
      }
      throw new Error("No candidates in final recommendation response.");
    }

    if (candidate.finishReason === "SAFETY") {
      console.error(
        "Response stopped due to safety filters. Check module descriptions for problematic content.",
      );
      throw new Error("Response stopped by safety filters.");
    }

    const aiContent = candidate.content?.parts?.[0]?.text;
    if (!aiContent) {
      console.error(
        "No AI content text found in final recommendation response:",
        JSON.stringify(data, null, 2),
      );
      throw new Error("No AI response content text found");
    }

    console.log("‚úÖ Stage 3: Received AI response.");

    const responseLines = aiContent
      .trim()
      .split("\n")
      .filter((line) => line.includes("[MODULE:"));
    if (responseLines.length === 0) {
      console.warn("AI returned content, but no valid module lines found.");
      return {
        response:
          "–ú–Ω–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–æ—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ.",
        recommendedModules: [],
      };
    }

    const finalResponse = responseLines.join("\n");
    const recommendedModules = responseLines
      .map((line) => {
        const match = line.match(/\[MODULE:(\d+)\]/i);
        return match ? parseInt(match[1]) : 0;
      })
      .filter((id) => id > 0 && !alreadyShownModules.includes(id));

    return {
      response: finalResponse,
      recommendedModules: [...new Set(recommendedModules)].sort(
        (a, b) => a - b,
      ),
    };
  } catch (error) {
    console.error("AI Main Logic Error:", error);
    return {
      response: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
      recommendedModules: [],
    };
  }
}
