const GEMINI_API_KEY = process.env.GOOGLE_API_KEY;
const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent`;

if (!GEMINI_API_KEY) {
  console.error('GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
}

interface BusinessAnalysis {
  industry: string;
  size: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
  persona: string;
}

export async function analyzeBusinessContext(messages: { role: 'user' | 'assistant'; content: string }[]): Promise<BusinessAnalysis> {
  try {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–∏–∑–Ω–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ –∏ –≤–µ—Ä–Ω–∏ JSON:
    
–î–∏–∞–ª–æ–≥: ${messages.map(m => `${m.role}: ${m.content}`).join('\n')}

–í–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "industry": "–æ—Ç—Ä–∞—Å–ª—å",
  "size": "small|medium|large", 
  "challenges": ["–≤—ã–∑–æ–≤1", "–≤—ã–∑–æ–≤2"],
  "goals": ["—Ü–µ–ª—å1", "—Ü–µ–ª—å2"],
  "relevantCategories": ["–∫–∞—Ç–µ–≥–æ—Ä–∏—è1", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è2"],
  "keywords": ["–∫–ª—é—á–µ–≤–æ–µ1", "–∫–ª—é—á–µ–≤–æ–µ2"],
  "persona": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞"
}`;

    const response = await fetch(GEMINI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-goog-api-key': GEMINI_API_KEY!
      },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É. –ò–∑—É—á–∞–π –ª—é–±—É—é –Ω–∏—à—É –∏ –æ—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n\n${prompt}`
          }]
        }],
        generationConfig: {
          maxOutputTokens: 1200,
          temperature: 0.1
        }
      })
    });

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
    if (content) {
      let responseText = content.trim();
      
      // Remove markdown code blocks if present
      if (responseText.startsWith('```json')) {
        responseText = responseText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (responseText.startsWith('```')) {
        responseText = responseText.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      return JSON.parse(responseText);
    }
    
    throw new Error('Invalid response format');
  } catch (error) {
    console.error('Error analyzing business context:', error);
    return {
      industry: 'general',
      size: 'medium',
      challenges: [],
      goals: [],
      relevantCategories: [],
      keywords: [],
      persona: 'general business'
    };
  }
}

export async function generateAIResponse(messages: { role: 'user' | 'assistant'; content: string }[], alreadyShownModules: number[] = []): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import('./storage');
    const allModules = await storage.getAllModules();
    console.log(`ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï ${allModules.length} –º–æ–¥—É–ª–µ–π –≤ AI –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    // Get conversation context
    const conversationText = messages.map(m => `${m.role}: ${m.content}`).join('\n');
    const lastUserMessage = messages.filter(m => m.role === 'user').pop()?.content || '';
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏
    const availableModules = allModules.filter(m => !alreadyShownModules.includes(m.number));
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è AI
    const modulesForAI = availableModules.map(module => ({
      number: module.number,
      name: module.name,
      description: module.description,
      category: module.category,
      keyFeatures: Array.isArray(module.keyFeatures) ? module.keyFeatures : [module.keyFeatures || ''],
      benefits: module.benefits
    }));
    
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI: ${modulesForAI.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI —Å –ü–û–õ–ù–´–ú —Å–ø–∏—Å–∫–æ–º –º–æ–¥—É–ª–µ–π
    const prompt = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É –∏ –ø–æ–¥–±–æ—Ä—É IT-—Ä–µ—à–µ–Ω–∏–π. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª —Å–≤–æ–π –±–∏–∑–Ω–µ—Å: "${lastUserMessage}"

–¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ò–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏ 4 –°–ê–ú–´–• –ü–û–î–•–û–î–Ø–©–ò–• –º–æ–¥—É–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞
3. –û–±—ä—è—Å–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ, –ü–û–ß–ï–ú–£ –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –ø–æ–º–æ–∂–µ—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–æ–º—É –±–∏–∑–Ω–µ—Å—É

–°–ü–ò–°–û–ö –í–°–ï–• –î–û–°–¢–£–ü–ù–´–• –ú–û–î–£–õ–ï–ô:
${modulesForAI.map(m => `${m.number}. ${m.name} - ${m.description} (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${m.category})`).join('\n')}

–û–ß–ï–ù–¨ –í–ê–ñ–ù–û:
- –î–ª—è –ü–ò–¶–¶–ï–†–ò–ò/–†–ï–°–¢–û–†–ê–ù–ê –≤—ã–±–∏—Ä–∞–π –º–æ–¥—É–ª–∏ 236, 237, 238 (–æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –¥–ª—è –µ–¥—ã)
- –î–ª—è –°–ê–õ–û–ù–ê –ö–†–ê–°–û–¢–´ –≤—ã–±–∏—Ä–∞–π –º–æ–¥—É–ª—å 240 (–æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã) 
- –î–ª—è –ú–ï–î–ò–¶–ò–ù–°–ö–û–ô –ö–õ–ò–ù–ò–ö–ò –≤—ã–±–∏—Ä–∞–π –º–æ–¥—É–ª—å 239 (–æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã)
- –î–ª—è –§–ò–¢–ù–ï–°-–ö–õ–£–ë–ê –≤—ã–±–∏—Ä–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏
- –ù–ï –í–´–ë–ò–†–ê–ô –æ—Ç—Ä–∞—Å–ª–µ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ñ–µ—Ä!

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "response": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞",
  "recommendedModules": [–Ω–æ–º–µ—Ä1, –Ω–æ–º–µ—Ä2, –Ω–æ–º–µ—Ä3, –Ω–æ–º–µ—Ä4],
  "explanations": [
    "–ü–æ—á–µ–º—É –º–æ–¥—É–ª—å 1 –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
    "–ü–æ—á–µ–º—É –º–æ–¥—É–ª—å 2 –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞", 
    "–ü–æ—á–µ–º—É –º–æ–¥—É–ª—å 3 –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
    "–ü–æ—á–µ–º—É –º–æ–¥—É–ª—å 4 –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"
  ]
}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini AI
    const response = await fetch(GEMINI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-goog-api-key': GEMINI_API_KEY!
      },
      body: JSON.stringify({
        contents: [{
          parts: [{ text: prompt }]
        }],
        generationConfig: {
          maxOutputTokens: 2000,
          temperature: 0.1
        }
      })
    });

    const data = await response.json();
    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
    
    if (content) {
      let responseText = content.trim();
      
      // –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (responseText.startsWith('```json')) {
        responseText = responseText.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (responseText.startsWith('```')) {
        responseText = responseText.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      try {
        const aiResult = JSON.parse(responseText);
        console.log(`üéØ AI –≤—ã–±—Ä–∞–ª –º–æ–¥—É–ª–∏:`, aiResult.recommendedModules);
        console.log(`üí¨ AI –æ—Ç–≤–µ—Ç:`, aiResult.response);
        
        return {
          response: aiResult.response || '–ü–æ–¥–æ–±—Ä–∞–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–¥—É–ª–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:',
          recommendedModules: aiResult.recommendedModules || []
        };
      } catch (parseError) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI:', parseError);
        throw parseError;
      }
    }
    
    throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI');
  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ AI:', error);
    
    // –ü—Ä–æ—Å—Ç–æ–π fallback –µ—Å–ª–∏ AI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    const lastUserMessage = messages.filter(m => m.role === 'user').pop()?.content?.toLowerCase() || '';
    console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback –¥–ª—è: "${lastUserMessage}"`);
    
    let fallbackModules: number[] = [];
    let fallbackResponse = '';
    
    if (lastUserMessage.includes('–ø–∏—Ü—Ü') || lastUserMessage.includes('–∫–∞—Ñ–µ') || lastUserMessage.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω')) {
      fallbackModules = [238, 236, 237, 225];
      fallbackResponse = `üçï –î–ª—è –ø–∏—Ü—Ü–µ—Ä–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:`;
    } else if (lastUserMessage.includes('—Å–∞–ª–æ–Ω') || lastUserMessage.includes('–∫—Ä–∞—Å–æ—Ç–∞')) {
      fallbackModules = [240, 8, 224, 15]; 
      fallbackResponse = `üíÑ –î–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã –ø–æ–¥–æ–π–¥—É—Ç —ç—Ç–∏ –º–æ–¥—É–ª–∏:`;
    } else if (lastUserMessage.includes('–º–µ–¥–∏—Ü–∏–Ω') || lastUserMessage.includes('–∫–ª–∏–Ω–∏–∫')) {
      fallbackModules = [239, 8, 224, 15]; 
      fallbackResponse = `üè• –î–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏:`;
    } else {
      fallbackModules = [1, 224, 15, 13];
      fallbackResponse = `–î–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç–∏ –º–æ–¥—É–ª–∏:`;
    }
    
    return {
      response: fallbackResponse,
      recommendedModules: fallbackModules.filter(num => !alreadyShownModules.includes(num))
    };
  }
}