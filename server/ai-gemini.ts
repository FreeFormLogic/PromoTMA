import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "" });

export interface BusinessAnalysis {
  industry: string;
  challenges: string[];
  goals: string[];
  relevantCategories: string[];
  keywords: string[];
}

export async function analyzeBusinessContext(messages: string[]): Promise<BusinessAnalysis> {
  console.log("üß† Analyzing business context with Gemini AI...");
  
  const conversationText = messages.join("\n");
  
  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:

–†–ê–ó–ì–û–í–û–†:
${conversationText}

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "industry": "—Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ (restaurant, travel, retail, beauty, fitness, medical, education, auto, real_estate, logistics, legal –∏–ª–∏ general)",
  "challenges": ["–æ—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã –±–∏–∑–Ω–µ—Å–∞"],
  "goals": ["—Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏"],
  "relevantCategories": ["–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–¥—É–ª–µ–π"],
  "keywords": ["–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"]
}`;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      config: {
        responseMimeType: "application/json",
      },
      contents: prompt,
    });

    const result = JSON.parse(response.text || "{}");
    console.log(`‚úÖ Gemini analysis complete: ${result.industry}`);
    return result;
  } catch (error) {
    console.error("‚ùå Gemini analysis failed:", error);
    // Fallback to simple detection
    return {
      industry: "general",
      challenges: ["–û–±—â–∏–µ –±–∏–∑–Ω–µ—Å-–∑–∞–¥–∞—á–∏"],
      goals: ["–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"],
      relevantCategories: ["E-COMMERCE", "–ú–ê–†–ö–ï–¢–ò–ù–ì", "CRM"],
      keywords: []
    };
  }
}

export async function generateAIResponse(
  messages: { role: "user" | "assistant"; content: string }[],
  alreadyShownModules: number[] = [],
): Promise<{ response: string; recommendedModules: number[] }> {
  try {
    const { storage } = await import("./storage");
    const allModules = await storage.getAllModules();
    console.log(`ü§ñ Gemini AI processing ${allModules.length} total modules.`);

    // Stage 1: Business context analysis with Gemini
    const messageTexts = messages.map(m => `${m.role}: ${m.content}`);
    const analysis = await analyzeBusinessContext(messageTexts);
    
    console.log(`üß† Business analysis complete: ${analysis.industry}`);
    
    // Stage 2: Prepare context for Gemini module selection
    const conversationText = messages.map(m => `${m.role}: ${m.content}`).join("\n");
    
    // Create summary of available modules (instead of sending full data)
    const availableModules = allModules.filter(module => !alreadyShownModules.includes(module.number));
    const moduleSummary = availableModules.slice(0, 50) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –º–æ–¥—É–ª–µ–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
      .map(module => `${module.number}: ${module.name} - ${module.description.substring(0, 100)}`)
      .join("\n");
    
    const moduleSelectionPrompt = `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –º–æ–¥—É–ª–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞.

–ö–û–ù–¢–ï–ö–°–¢ –†–ê–ó–ì–û–í–û–†–ê:
${conversationText}

–ê–ù–ê–õ–ò–ó –ë–ò–ó–ù–ï–°–ê:
- –¢–∏–ø: ${analysis.industry}
- –ó–∞–¥–∞—á–∏: ${analysis.challenges.join(", ")}
- –¶–µ–ª–∏: ${analysis.goals.join(", ")}

–î–û–°–¢–£–ü–ù–´–ï –ú–û–î–£–õ–ò (–ø–µ—Ä–≤—ã–µ 50):
${moduleSummary}

–í—ã–±–µ—Ä–∏ 3 –°–ê–ú–´–• –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–¥—É–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.
–£—á—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –±–∏–∑–Ω–µ—Å–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.

–û–°–û–ë–´–ï –ü–†–ê–í–ò–õ–ê:
- –î–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –Ω–∞ –ë–∞–ª–∏/–≤ –ò–Ω–¥–æ–Ω–µ–∑–∏–∏ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤–∫–ª—é—á–∏ –º–æ–¥—É–ª–∏ 120 (GoPay/OVO) –∏ 123 (DANA/LinkAja)
- –î–ª—è —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤ –≤—ã–±–∏—Ä–∞–π –º–æ–¥—É–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ CRM
- –î–ª—è —Å–∞–ª–æ–Ω–æ–≤ –∫—Ä–∞—Å–æ—Ç—ã - –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
- –î–ª—è —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–æ–≤ - –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "selectedModules": [–Ω–æ–º–µ—Ä1, –Ω–æ–º–µ—Ä2, –Ω–æ–º–µ—Ä3],
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞"
}`;

    const moduleSelection = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      config: {
        responseMimeType: "application/json",
      },
      contents: moduleSelectionPrompt,
    });

    const selectionResult = JSON.parse(moduleSelection.text || '{"selectedModules": [1, 5, 18]}');
    let recommendedModuleNumbers = selectionResult.selectedModules || [1, 5, 18];
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const textContent = conversationText.toLowerCase();
    if (textContent.includes('–±–∞–ª–∏') || textContent.includes('–∏–Ω–¥–æ–Ω–µ–∑')) {
      if (analysis.industry === 'restaurant' && !recommendedModuleNumbers.includes(120)) {
        recommendedModuleNumbers = [120, 123, ...recommendedModuleNumbers.slice(0, 1)];
      }
    }
    
    console.log(`üéØ Gemini selected modules:`, recommendedModuleNumbers);
    console.log(`üìù Reasoning:`, selectionResult.reasoning);
    
    // Stage 3: Get module data and generate descriptions
    const recommendedModules = allModules.filter(module => 
      recommendedModuleNumbers.includes(module.number)
    );
    
    // Stage 4: Generate contextual descriptions with Gemini
    const descriptionPrompt = `–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –ø—Ä–æ–¥–∞—é—â–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ "${analysis.industry}".

–ö–û–ù–¢–ï–ö–°–¢: ${conversationText}

–ú–û–î–£–õ–ò:
${recommendedModules.map(m => `${m.number}: ${m.name} - ${m.description}`).join("\n")}

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞–ø–∏—à–∏ –û–î–ù–û –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ–±—ä—è—Å–Ω—è—é—â–µ–µ –ö–ê–ö –ò–ú–ï–ù–ù–û –æ–Ω –ø–æ–º–æ–∂–µ—Ç —ç—Ç–æ–º—É –±–∏–∑–Ω–µ—Å—É.
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
[MODULE:–Ω–æ–º–µ—Ä] –æ–ø–∏—Å–∞–Ω–∏–µ
[MODULE:–Ω–æ–º–µ—Ä] –æ–ø–∏—Å–∞–Ω–∏–µ
[MODULE:–Ω–æ–º–µ—Ä] –æ–ø–∏—Å–∞–Ω–∏–µ`;

    const descriptionsResponse = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: descriptionPrompt,
    });

    const response = descriptionsResponse.text || recommendedModules.map(m => 
      `[MODULE:${m.number}] ${m.description}`
    ).join("\n");
    
    console.log(`‚úÖ Gemini AI generation complete`);
    console.log(`- Selected modules:`, recommendedModuleNumbers);
    console.log(`- Generated descriptions for business: ${analysis.industry}`);
    
    return {
      response: response,
      recommendedModules: recommendedModuleNumbers
    };
    
  } catch (error) {
    console.error("‚ùå Gemini AI failed:", error);
    throw new Error(`–û—à–∏–±–∫–∞ Gemini AI: ${error}`);
  }
}